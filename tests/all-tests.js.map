{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/actions/notificationsActions.ts","webpack:///external \"axios\"","webpack:///external \"mocha\"","webpack:///./src/actions/channelsActions.ts","webpack:///./tests/index.ts","webpack:///./tests/testStore.ts","webpack:///external \"chai\"","webpack:///external \"lodash\"","webpack:///./src/store.ts","webpack:///external \"redux\"","webpack:///external \"redux-thunk\"","webpack:///external \"redux-logger\"","webpack:///./src/reducers/user.ts","webpack:///./src/actions/userActions.ts","webpack:///./src/reducers/channels.ts","webpack:///./src/reducers/notifications.ts","webpack:///./src/reducers/sidebar.ts","webpack:///./src/actions/sidebarActions.ts","webpack:///./src/reducers/socket.ts","webpack:///./src/actions/socketActions.ts","webpack:///external \"socket.io-client\"","webpack:///./src/reducers/chatUsers.ts","webpack:///./src/actions/chatUsersActions.ts","webpack:///./tests/testAsyncActions.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ERROR","REMOVE_ERROR","CLEAR_ERRORS","ADD_INFO","REMOVE_INFO","CLEAR_INFOS","addError","error","type","data","removeError","clearErrors","addInfo","info","removeInfo","clearInfos","require","_this","this","axios_1","notificationsActions_1","ADD_CHANNELS","SET_CHANNEL_FETCHING_NEW_MESSAGES","SET_CHANNEL_HAS_MORE_MESSAGES","ADD_RECEIVED_CHANNEL_MESSAGE","ADD_RETRIEVED_CHANNEL_MESSAGES","INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET","RETRIEVE_CHANNEL_MESSAGES","CLEAR_CHANNELS_DATA","addChannels","channelNames","channels","forEach","push","messages","retrieveMessagesOffset","hasMoreMessages","fetchingNewMessages","incrementChannelRetrieveMessagesOffset","channel","increment","setChannelFetchingNewMessages","isFetching","channelName","setChannelHasMoreMessages","hasMore","addReceivedChannelMessage","message","addRetrievedChannelMessages","clearChannelsData","fetchChannels","dispatch","then","res","map","err","console","log","retrieveChannelMessages","getState","__awaiter","find","length","Promise","resolve","deleteChannel","response","addChannel","post","chai_1","_","store_1","describe","store","user","beforeEach","cloneDeep","it","assert","isFalse","authorized","email","role","redux_1","redux_thunk_1","redux_logger_1","user_1","channels_1","notifications_1","sidebar_1","socket_1","chatUsers_1","rootReducer","combineReducers","notifications","sidebar","socket","chatUsers","createStore","applyMiddleware","createLogger","userActions_1","initialState","state","action","SET_AUTHORIZED","assign","SET_USER","LOGOUT_USER","channelsActions_1","setAuthorized","setUser","logoutUser","logout","updateName","onSuccess","updateEmail","updatePassword","oldPass","newPass","channelExists","channel_1","increment_1","channel_2","hasMore_1","retrievedMessages_1","channelName_1","concat","receivedMessage_1","channelName_2","errors","infos","newErrorsArray","slice","splice","newInfosArray","sidebarActions_1","open","TOGGLE_SIDEBAR_OPEN","toggleSidebarOpen","socketActions_1","io","connected","connectedUserEmails","INIT_WEBSOCKET","SET_SOCKET_CONNECTED","SET_SOCKET_CONNECTED_USERS","userEmails","initWebsocket","setSocketConnected","setSocketConnectedUsers","init","ioSocket","on","id","chatUsersActions_1","UPDATE_CHAT_USERS","users","ADD_CHAT_USER","_a","REMOVE_CHAT_USER","updateUsers","addUser","removeUser","fetchAllUsers","u","createNewUser","editUser","deleteUser"],"mappings":"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","file":"all-tests.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","export const ADD_ERROR = 'ADD_ERROR';\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\nexport const ADD_INFO = 'ADD_INFO';\nexport const REMOVE_INFO = 'REMOVE_INFO';\nexport const CLEAR_INFOS = 'CLEAR_INFOS';\n\nexport const addError = (error: string) => {\n    return {\n        type: ADD_ERROR,\n        data: error\n    };\n}\n\nexport const removeError = (i: number) => {\n    return {\n        type: REMOVE_ERROR,\n        data: i\n    };\n}\n\nexport const clearErrors = () => {\n    return { type: CLEAR_ERRORS };\n}\n\nexport const addInfo = (info: string) => {\n    return {\n        type: ADD_INFO,\n        data: info\n    };\n}\n\nexport const removeInfo = (i: number) => {\n    return {\n        type: REMOVE_INFO,\n        data: i\n    };\n}\n\nexport const clearInfos = () => {\n    return {\n        type: CLEAR_INFOS\n    };\n}\n","module.exports = require(\"axios\");","module.exports = require(\"mocha\");","import {State, Channel, Message} from '../reducers/channels';\nimport axios, { AxiosResponse, AxiosError } from 'axios';\n\nimport {addError, addInfo} from '../actions/notificationsActions';\n\nexport const ADD_CHANNELS = 'ADD_CHANNELS';\nexport const SET_CHANNEL_FETCHING_NEW_MESSAGES = 'SET_CHANNEL_FETCHING_NEW_MESSAGES';\nexport const SET_CHANNEL_HAS_MORE_MESSAGES = 'SET_CHANNEL_HAS_MORE_MESSAGE';\nexport const ADD_RECEIVED_CHANNEL_MESSAGE = 'ADD_RECEIVED_CHANNEL_MESSAGE';\nexport const ADD_RETRIEVED_CHANNEL_MESSAGES = 'ADD_RETRIEVED_CHANNEL_MESSAGES';\nexport const INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET = 'INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET';\nexport const RETRIEVE_CHANNEL_MESSAGES = 'RETRIEVE_CHANNEL_MESSAGES';\nexport const CLEAR_CHANNELS_DATA = 'CLEAR_CHANNELS_DATA';\n\nexport const addChannels = (channelNames: string[]) => {\n    let channels: State = [];\n    channelNames.forEach((name: string) => {\n        channels.push({\n            name: name,\n            messages: [],\n            retrieveMessagesOffset: 0,\n            hasMoreMessages: true,\n            fetchingNewMessages: false\n        });\n    });\n    return {\n        type: ADD_CHANNELS,\n        data: { channels: channels }\n    };\n}\n\nexport const incrementChannelRetrieveMessagesOffset = (channel: string, n: number) => {\n    return {\n        type: INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET,\n        data: {\n            channel: channel,\n            increment: n\n        }\n    };\n}\n\nexport const setChannelFetchingNewMessages = (channel: string, isFetching: boolean) => {\n    return {\n        type: SET_CHANNEL_FETCHING_NEW_MESSAGES,\n        data: {\n            channelName: channel,\n            isFetching: isFetching\n        }\n    };\n}\n\nexport const setChannelHasMoreMessages = (channelName: string, hasMore: boolean) => {\n    return {\n        type: SET_CHANNEL_HAS_MORE_MESSAGES,\n        data: { channelName: channelName, hasMore: hasMore }\n    };\n}\n\nexport const addReceivedChannelMessage = (channelName: string, message: Message) => {\n    return {\n        type: ADD_RECEIVED_CHANNEL_MESSAGE,\n        data: { message: message, channelName: channelName }\n    };\n}\n\nexport const addRetrievedChannelMessages = (channelName: string, messages: Message[]) => {\n    return {\n        type: ADD_RETRIEVED_CHANNEL_MESSAGES,\n        data: {channelName: channelName, messages: messages}\n    };\n}\n\nexport const clearChannelsData = () => {\n    return {\n        type: CLEAR_CHANNELS_DATA\n    }\n}\n\n/* Async Actions */\n\nexport const fetchChannels = () => {\n    return (dispatch: any)  => {\n        return axios.get('/api/v1/channels').then((res: AxiosResponse) => {\n            let channels = res.data.channels.map( (c: {name: string, _id: string}) => {\n                return c.name;\n            });\n            return dispatch(addChannels(channels));\n        }).catch((err: AxiosError) => {\n            console.log(err);\n            return dispatch(addError('Something went wrong while trying to fetch the channels'));\n        });\n    }\n}\n\nexport const retrieveChannelMessages = (channelName: string) => {\n    return async (dispatch: any, getState: any) => {\n        let channel: Channel = getState().channels.find( (c: Channel) => {\n            return c.name === channelName;\n        })\n        if (!channel || channel.fetchingNewMessages || !channel.hasMoreMessages) {\n            console.log('Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages',\n                        channelName,\n                        getState());\n            return Promise.resolve();\n        }\n        dispatch(setChannelFetchingNewMessages(channel.name, true));\n        return axios.get('/api/v1/messages/' + channel.name + '/' + channel.retrieveMessagesOffset).then((res: AxiosResponse) => {\n            if (res.data.messages.length === 0) {\n                dispatch(setChannelHasMoreMessages(channel.name, false));\n                return res;\n            }\n            dispatch(incrementChannelRetrieveMessagesOffset(channelName, 20));\n            dispatch(addRetrievedChannelMessages(channel.name, res.data.messages))\n        }).catch((err: AxiosError) => {\n            console.log('Error fetching messages', channel, err);\n            dispatch(addError('Something went wrong while trying to fetch messages'));\n        }).then(() => {\n            return dispatch(setChannelFetchingNewMessages(channel.name, false));\n        });\n    }\n}\n\nexport const deleteChannel = (channelName: string) => {\n    return (dispatch: any) => {\n        return axios.get('/api/v1/channel/delete/' + channelName).\n            then((res: AxiosResponse) => {\n                dispatch(addInfo('Channel deleted'));\n                return dispatch(fetchChannels());\n            }).catch((err: AxiosError) => {\n                console.log('Error deleting channel', err);\n                return dispatch(addError(err.response.data.error));\n            });\n    };\n}\n\nexport const addChannel = (channelName: string) => {\n    return (dispatch: any) => {\n        return axios.post('/api/v1/channel/create', {\n            channelName: channelName\n        }).then((res: AxiosResponse) => {\n            dispatch(addInfo('Channel created'));\n            return dispatch(fetchChannels());\n        }).catch((err: AxiosError) => {\n            console.log('Error creating chanel', err);\n            return dispatch(addError(err.response.data.error));\n        })\n    };\n}\n","require('./testStore');\nrequire('./testAsyncActions');","import { assert } from 'chai';\nimport * as _ from 'lodash';\nimport 'mocha';\nimport store, {State} from '../src/store';\nimport { Store } from 'redux';\n\nfunction getStoreCopy(): Store<State> {\n    return _.cloneDeep(store);\n}\n\ndescribe('Store and Synchronous Actions', function() {\n    describe('User State', function () {\n        let store: Store<State>;\n        let user: State['user'];\n        beforeEach(function () {\n            store = getStoreCopy();\n            user = store.getState().user;\n        });\n        it('should not be authorized', function () {\n            assert.isFalse(user.authorized);\n            assert.isFalse(user.email);\n            assert.isFalse(user.name);\n            assert.isFalse(user.role);\n        });\n        it('should be authorized after setAuthorized action');\n        it('should have user data after setting the user');\n        it('should not have user data after logging out')\n    });\n    describe('Channels State', function () {\n        it('should add channels from an array of channel names');\n        it('should update fetchingNewMessages after calling setChannelFetchingNewMessages action');\n        it('should increment the channel offset for retrieving new messages');\n        it('should update the hasMoreMessages property on a channel');\n        it('should add a received message to the appropriate channel');\n        it('should add retreived messages to the appropriate channel');\n        it('should clear all channel data');\n    });\n    describe('Notifications State', function () {\n        it('should add errors');\n        it('should remove errors given an index');\n        it('should clear errors');\n        it('should add info');\n        it('should remove info given an index');\n        it('should clear infos');\n    });\n    describe('Sidebar State', function () {\n        it('should toggle open state');\n    });\n    describe('Socket State', function () {\n        it('should set the socket given an opened SocketIOClient Socket');\n        it('should update the connected state');\n        it('should update the connected users');\n    });\n    describe('Chat Users State', function () {\n        it('should update users');\n        it('should add a user');\n        it('should remove a user');\n    });\n});\n","module.exports = require(\"chai\");","module.exports = require(\"lodash\");","import {createStore, combineReducers, applyMiddleware, Reducer} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\n\nimport userReducer, {State as UserState} from './reducers/user';\nimport channelsReducer, {State as ChannelsState} from './reducers/channels';\nimport notificationsReducer, {State as NotificationsState} from './reducers/notifications';\nimport sidebarReducer, {State as SidebarState} from './reducers/sidebar';\nimport socketReducer, {State as SocketState} from './reducers/socket';\nimport chatUsersReducer, {State as ChatUsersState} from './reducers/chatUsers';\n\nexport interface State {\n    user: UserState,\n    channels: ChannelsState,\n    notifications: NotificationsState,\n    sidebar: SidebarState,\n    socket: SocketState,\n    chatUsers: ChatUsersState,\n}\n\nconst rootReducer: Reducer = combineReducers({\n    user: userReducer,\n    channels: channelsReducer,\n    notifications: notificationsReducer,\n    sidebar: sidebarReducer,\n    socket: socketReducer,\n    chatUsers: chatUsersReducer,\n});\n\nexport default createStore(\n    rootReducer,\n    applyMiddleware(reduxThunk, createLogger())\n);","module.exports = require(\"redux\");","module.exports = require(\"redux-thunk\");","module.exports = require(\"redux-logger\");","import {SET_AUTHORIZED, SET_USER, LOGOUT_USER} from '../actions/userActions';\n\nexport interface State {\n    authorized?: boolean,\n    email?: string | boolean,\n    name?: string | boolean,\n    role?: string | boolean,\n}\n\ninterface Action {\n    type: string,\n    data: any\n}\n\nlet initialState : State = {\n    authorized: false,\n    email: false,\n    name: false,\n    role: false,\n}\n\n\nexport default function(state: State = initialState, action: Action) {\n    switch (action.type) {\n        case SET_AUTHORIZED:\n            if (typeof action.data !== 'boolean') {\n                console.error('Data must be boolean for SET_AUTHORIZED action');\n                return state;\n            }\n            if (action.data === false)\n                return Object.assign({}, state, {authorized: false, email: false});\n            return Object.assign({}, state, {authorized: action.data});\n        case SET_USER:\n            return Object.assign({}, state, action.data);\n        case LOGOUT_USER:\n            return {\n                authorized: false,\n                name: false,\n                email: false,\n                role: false\n            }\n        default:\n            return state;\n    }\n}","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport {State as UserState} from '../reducers/user';\nimport {clearChannelsData} from './channelsActions';\nimport {addError, addInfo} from './notificationsActions';\n\nexport const SET_AUTHORIZED = 'SET_AUTHORIZED';\nexport const SET_USER = 'SET_USER';\nexport const LOGOUT_USER = 'LOGOUT_USER';\n\nexport const setAuthorized = (authorized: boolean) => {\n    return  {\n        type: SET_AUTHORIZED,\n        data: authorized\n    };\n}\n\nexport const setUser = (user: UserState) => {\n    return {\n        type: SET_USER,\n        data: user\n    };\n}\n\nexport const logoutUser = () => {\n    return {\n        type: LOGOUT_USER\n    };\n}\n\nexport const logout = () => {\n    return (dispatch: any) => {\n        dispatch(logoutUser());\n        return dispatch(clearChannelsData());\n    }\n    \n}\n\n/* Async Actions */\nexport const updateName = (name: string, onSuccess?: Function) => {\n    return (dispatch: any) => {\n        return axios.post('/api/v1/user/update/name', {\n            name: name\n        }).then((res: AxiosResponse) => {\n            dispatch(addInfo('Name updated'));\n            if (onSuccess) onSuccess();\n        }).catch((err: AxiosError) => {\n            if (err.response && err.response.data.error)\n                return dispatch(addError(err.response.data.error));\n            console.log('Something went wrong updating user name', err);\n            dispatch(addError('Something went wrong while trying to update your name.'));\n        });\n    };\n}\n\nexport const updateEmail = (email: string, onSuccess?: Function) => {\n    return (dispatch: any) => {\n        return axios.post('/api/v1/user/update/email', {\n            email: email\n        }).then((res: AxiosResponse) => {\n            dispatch(addInfo('Email updated'));\n            if (onSuccess) onSuccess();\n        }).catch((err: AxiosError) => {\n            if (err.response && err.response.data.error)\n                return dispatch(addError(err.response.data.error));\n            console.log('Something went wrong updating user email', err);\n            dispatch(addError('Something went wrong while trying to update your email.'));\n        });\n    };\n}\n\nexport const updatePassword = (oldPass: string, newPass: string, onSuccess?: Function) => {\n    return (dispatch: any) => {\n        return axios.post('/api/v1/user/update/password', {\n            oldPass: oldPass,\n            newPass: newPass\n        }).then((res: AxiosResponse) => {\n            dispatch(addInfo('Password updated'));\n            if (onSuccess) onSuccess();\n        }).catch((err: AxiosError) => {\n            if (err.response && err.response.data.error)\n                return dispatch(addError(err.response.data.error));\n            console.log('Something went wrong updating user password', err);\n            dispatch(addError('Something went wrong while trying to update your password.'));\n        });\n    };\n}","import {ADD_CHANNELS,\n        SET_CHANNEL_FETCHING_NEW_MESSAGES,\n        SET_CHANNEL_HAS_MORE_MESSAGES,\n        ADD_RECEIVED_CHANNEL_MESSAGE,\n        ADD_RETRIEVED_CHANNEL_MESSAGES,\n        INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET,\n        CLEAR_CHANNELS_DATA}\n    from '../actions/channelsActions';\n\nexport interface Message {\n    userEmail: string,\n    created: string,\n    _id: string,\n    text: string\n}\n\nexport interface Channel {\n    name: string,\n    messages: Message[],\n    retrieveMessagesOffset: number,\n    hasMoreMessages: boolean\n    fetchingNewMessages: boolean\n}\n\nexport interface State extends Array<Channel> {\n\n}\n\ninterface Action {\n    type: string,\n    data: any\n}\n\nlet initialState: State = [];\n\nexport const channelExists = (channels: Channel[] | State, channelName: string): any =>  {\n    let channel = channels.find( (c: Channel) => {\n        return c.name === channelName;\n    });\n    if (!channel) return false;\n    return channel;\n}\n\nexport default function (state: State = initialState, action: Action) {\n    switch(action.type) {\n        case ADD_CHANNELS:\n            return action.data.channels;\n        case INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET: {\n            let channel: Channel = channelExists(state, action.data.channel);\n            let increment: number = action.data.increment;\n            if (!channel) {\n                console.log('Unknown channel while incrementing messages offset', action);\n                return state;\n            }\n            let newChannels: Channel[] = state.map( (c: Channel) => {\n                if(c.name === channel.name) {\n                    c.retrieveMessagesOffset += increment;\n                }\n                return c;\n            });\n            return newChannels;\n        }\n        case SET_CHANNEL_FETCHING_NEW_MESSAGES:\n            let channel: Channel = channelExists(state, action.data.channelName);\n            if (!channel) {\n                console.log('Unknown channel while fetching new messages', action);\n                return state;\n            }\n            let newChannels: Channel[] = state.map( (c: Channel) => {\n                if (c.name === action.data.channelName) {\n                    c.fetchingNewMessages = action.data.isFetching;\n                }\n                return c;\n            });\n            return newChannels;\n        case SET_CHANNEL_HAS_MORE_MESSAGES: {\n            let channel: Channel = channelExists(state, action.data.channelName);\n            let hasMore: boolean = action.data.hasMore;\n            if (!channel) {\n                console.log('Unknown channel while setting hasMore messages', action);\n                return state;\n            }\n            let newChannels: Channel[] = state.map( (c: Channel) => {\n                if (c.name === action.data.channelName)\n                    c.hasMoreMessages = hasMore;\n                return c;\n            });\n            return newChannels;\n        }\n        case ADD_RETRIEVED_CHANNEL_MESSAGES: {\n            let retrievedMessages: Message[] = action.data.messages;\n            let channelName: string = action.data.channelName;\n            let channel: Channel = channelExists(state, channelName);\n            if(!channel) {\n                console.log('Unknown channel while adding retrieved channel messages', action);\n                return state;\n            }\n            let newChannels: Channel[] = state.map( (c: Channel) => {\n                if (c.name === channelName)\n                    c.messages = retrievedMessages.concat(c.messages);//c.messages.concat(messages);\n                return c;\n            });\n            return newChannels;\n        }\n        case ADD_RECEIVED_CHANNEL_MESSAGE: {\n            let receivedMessage = action.data.message;\n            let channelName = action.data.channelName;\n            let channel: Channel = channelExists(state, channelName);\n            if (!channel) {\n                console.log('Unknown channel while adding received message', state, action);\n                return state;\n            }\n            let newChannels: Channel[] = state.map((c: Channel) => {\n                if(c.name === channelName) \n                    c.messages = c.messages.concat([receivedMessage]);\n                return c;\n            })\n            return newChannels;\n        }\n        case CLEAR_CHANNELS_DATA:\n            return [];\n        default:\n            return state;\n    }\n}","import {ADD_ERROR, REMOVE_ERROR, CLEAR_ERRORS, ADD_INFO, REMOVE_INFO, CLEAR_INFOS}\n    from '../actions/notificationsActions';\n\nexport interface State {\n    errors: string[],\n    infos: string[],\n}\ninterface Action {\n    type: string,\n    data: any\n}\n\nlet initialState: State = {\n    errors: [],\n    infos: []\n}\n\nexport default function(state: State = initialState, action: Action) {\n    switch(action.type) {\n        case ADD_ERROR:\n            return Object.assign({}, state, {errors: state.errors.concat([action.data])});\n        case REMOVE_ERROR:\n            let newErrorsArray = state.errors.slice();\n            newErrorsArray.splice(action.data, 1);\n            return Object.assign({}, state, {errors: newErrorsArray});\n        case CLEAR_ERRORS:\n            return Object.assign({}, state,  {errors: []});\n        case ADD_INFO:\n            return Object.assign({}, state, {infos: state.infos.concat([action.data])});\n        case REMOVE_INFO:\n            let newInfosArray = state.infos.slice();\n            newInfosArray.splice(action.data, 1);\n            return Object.assign({}, state, { infos: newInfosArray });\n        case CLEAR_INFOS:\n            return Object.assign({}, state, {infos: []});\n        default:\n            return state;\n    }\n}","import { Action } from \"redux\";\nimport { TOGGLE_SIDEBAR_OPEN } from '../actions/sidebarActions';\n\nexport interface State {\n    open: boolean\n}\n\nlet initialState: State = {\n    open: true\n}\n\nexport default function(state: State = initialState, action: Action) {\n    switch (action.type) {\n        case TOGGLE_SIDEBAR_OPEN:\n            return Object.assign({}, state, {open: !state.open});\n        default:\n            return state;\n    }\n}","export const TOGGLE_SIDEBAR_OPEN = 'TOGGLE_SIDEBAR_OPEN';\n\nexport const toggleSidebarOpen = () => {\n    return {\n        type: TOGGLE_SIDEBAR_OPEN\n    }\n}","import { AnyAction } from \"redux\";\nimport * as io from 'socket.io-client';\n\nimport { INIT_WEBSOCKET,\n         SET_SOCKET_CONNECTED,\n         SET_SOCKET_CONNECTED_USERS }\n    from '../actions/socketActions';\n\nexport interface State {\n    io: SocketIOClient.Socket | null,\n    connected: boolean,\n    connectedUserEmails: string[]\n}\n\nlet initialState: State = {\n    io: null,\n    connected: false,\n    connectedUserEmails: []\n}\n\nexport default function(state: State = initialState, action: AnyAction) {\n    switch(action.type) {\n        case INIT_WEBSOCKET:\n            return Object.assign({}, state, {io: action.data.io});\n        case SET_SOCKET_CONNECTED:\n            return Object.assign({}, state, {connected: action.data.connected});\n        case SET_SOCKET_CONNECTED_USERS:\n            return Object.assign({}, state, {connectedUserEmails: action.data.userEmails })\n        default:\n            return state;\n    }\n}","import * as io from 'socket.io-client';\nimport { Dispatch } from 'redux';\n\nexport const INIT_WEBSOCKET = 'INIT_WEBSOCKET';\nexport const SET_SOCKET_CONNECTED = 'SET_SOCKET_CONNECTED';\nexport const SET_SOCKET_CONNECTED_USERS = 'SET_SOCKET_CONNECTED_USERS';\n\nexport const initWebsocket = (io: SocketIOClient.Socket) => {\n    return {\n        type: INIT_WEBSOCKET,\n        data: { io: io }\n    };\n}\n\nexport const setSocketConnected = (connected: boolean) => {\n    return {\n        type: SET_SOCKET_CONNECTED,\n        data: { connected: connected }\n    }\n}\n\nexport const setSocketConnectedUsers = (userEmails: string[]) => {\n    return {\n        type: SET_SOCKET_CONNECTED_USERS,\n        data: { userEmails: userEmails }\n    }\n}\n\nexport const init = () => {\n    return (dispatch: Dispatch) => {\n        let ioSocket: SocketIOClient.Socket = io();\n        ioSocket.on('connect', () => {\n            dispatch(setSocketConnected(true));\n            console.log('Connected to websocket server [' + ioSocket.id + ']');\n        });\n        ioSocket.on('disconnect', () => {\n            dispatch(setSocketConnected(false));\n            console.log('Disconnected from websocket server, attempting reconnect');\n        });\n        ioSocket.on('connected users', (userEmails: string[]) => {\n            dispatch(setSocketConnectedUsers(userEmails));\n        })\n        return dispatch(initWebsocket(ioSocket));\n    }\n}","module.exports = require(\"socket.io-client\");","import {AnyAction} from 'redux';\nimport {UPDATE_CHAT_USERS, ADD_CHAT_USER, REMOVE_CHAT_USER}\n    from '../actions/chatUsersActions';\n\nexport interface State {\n    [email: string]: {\n        role: string,\n        name: string,\n    }\n}\n\nexport interface ChatUser {\n    email: string,\n    role: string,\n    name: string,\n}\n\nlet initialState: State = {\n    \n}\n\nexport default function(state: State = initialState, action: AnyAction) {\n    switch(action.type) {\n        case UPDATE_CHAT_USERS:\n            return action.data.users;\n        case ADD_CHAT_USER:\n            return Object.assign({}, state, {\n                [action.data.user.email]: {\n                    role: action.data.user.role,\n                    name: action.data.user.name,\n                }\n            });\n        case REMOVE_CHAT_USER:\n            let clone: State = Object.assign({}, state);\n            delete clone[action.data.email]\n        default:\n            return state;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\n\nimport {State, ChatUser} from '../reducers/chatUsers';\nimport { Dispatch } from 'redux';\nimport { addError } from './notificationsActions';\n\nexport const UPDATE_CHAT_USERS = 'UPDATE_CHAT_USERS';\nexport const ADD_CHAT_USER = 'ADD_USER';\nexport const REMOVE_CHAT_USER = 'REMOVE_USER';\n\nexport const updateUsers = function(users: State) {\n    return {\n        type: UPDATE_CHAT_USERS,\n        data: {\n            users: users\n        }\n    }\n}\n\nexport const addUser = function(user: ChatUser) {\n    return {\n        type: ADD_CHAT_USER,\n        data: {\n            user: user\n        }\n    }\n}\n\nexport const removeUser = function(email: string) {\n    return {\n        type: REMOVE_CHAT_USER,\n        data: {\n            email: email\n        }\n    }\n}\n\n/* Async Functions */\nexport const fetchAllUsers = () => {\n    return (dispatch: Dispatch) => {\n        axios.get('/api/v1/users').then((res: AxiosResponse) => {\n            let users: State = {};\n            res.data.users.forEach((u: ChatUser) => {\n                users[u.email] = {\n                    role: u.role,\n                    name: u.name\n                };\n            });\n            dispatch(updateUsers(users));\n            return res;\n        }).catch((err: AxiosError) => {\n            dispatch(addError('Fetching all users failed'));\n            console.log(err);\n            return err;\n        });\n    }\n}\n\nexport const createNewUser = (user: ChatUser) => {\n\n}\n\nexport const editUser = (email: string, user: ChatUser) => {\n\n}\n\nexport const deleteUser = (email: string) => {\n\n}","import 'mocha';\nimport * as _ from 'lodash';\nimport { Store } from 'redux';\nimport store, { State } from '../src/store';\n\nfunction getStoreCopy(): Store<State> {\n    return _.cloneDeep(store);\n}\n\ndescribe('Async Actions', function() {\n    let store: Store<State>;\n    beforeEach(function() {\n        store = getStoreCopy();\n    });\n    describe('User async actions', function() {\n        it('should update name');\n        it('should update email');\n        it('should update password');\n    });\n    describe('Channels async actions', function () {\n        it('should fetch channels');\n        it('should retrieve channel messages');\n        it('should delete channel');\n        it('should create new channel');\n    });\n    describe('Socket async actions', function () {\n        it('should initialize websocket connection');\n    });\n    describe('Chat Users async actions', function () {\n        it('should fetch all users');\n        it('should create a new user');\n        it('should edit the user');\n        it('should delete the user');\n    });\n})"],"sourceRoot":""}