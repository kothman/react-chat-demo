!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){"use strict";t.__esModule=!0;var s=n(4),r=new s.Schema({name:String,email:{required:!0,type:String,lowercase:!0},password:{type:String,required:!0},role:{type:String,required:!0,lowercase:!0,enum:["admin","user"]},deleted:{type:Boolean,default:!1},verified:{type:Boolean,default:!1}},{timestamps:!0});r.statics.findByEmail=function(e){return this.findOne({email:e})};var a=s.model("User",r);t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.ADD_ERROR="ADD_ERROR",t.REMOVE_ERROR="REMOVE_ERROR",t.CLEAR_ERRORS="CLEAR_ERRORS",t.ADD_INFO="ADD_INFO",t.REMOVE_INFO="REMOVE_INFO",t.CLEAR_INFOS="CLEAR_INFOS",t.addError=function(e){return{type:t.ADD_ERROR,data:e}},t.removeError=function(e){return{type:t.REMOVE_ERROR,data:e}},t.clearErrors=function(){return{type:t.CLEAR_ERRORS}},t.addInfo=function(e){return{type:t.ADD_INFO,data:e}},t.removeInfo=function(e){return{type:t.REMOVE_INFO,data:e}},t.clearInfos=function(){return{type:t.CLEAR_INFOS}}},function(e,t){e.exports=require("bcryptjs")},function(e,t,n){e.exports={mongodbConnectionUri:process.env.MONGODB_URI,mongodbTestConnectionUri:process.env.MONGODB_TEST_URI||"mongodb://localhost:27017/openChatTest",port:process.env.PORT||5e3,production:!0,useTestDb:process.env.USE_TEST_DB||!1,secret:process.env.SECRET||"secret",disableCsrf:process.env.DISABLE_CSRF||!1,disableReduxLogging:process.env.DISABLE_REDUX_LOGGING||!1,disableAutoStart:process.env.DISABLE_AUTO_START||!1,mailgunApiKey:process.env.MAILGUN_API_KEY,mailgunDomain:process.env.MAILGUN_DOMAIN,baseUrl:process.env.BASE_URL?process.env.BASE_URL:"http://localhost:5000"}},function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("chai")},function(e,t){e.exports=require("axios")},function(e,t,n){"use strict";var s=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))(function(r,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(o,i)}c((s=s.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){var n,s,r,a,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,s=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){o.label=a[1];break}if(6===a[0]&&o.label<r[1]){o.label=r[1],r=a;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(a);break}r[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}},a=this;t.__esModule=!0;var o=n(6),i=n(1);t.ADD_CHANNELS="ADD_CHANNELS",t.SET_CHANNEL_FETCHING_NEW_MESSAGES="SET_CHANNEL_FETCHING_NEW_MESSAGES",t.SET_CHANNEL_HAS_MORE_MESSAGES="SET_CHANNEL_HAS_MORE_MESSAGE",t.ADD_RECEIVED_CHANNEL_MESSAGE="ADD_RECEIVED_CHANNEL_MESSAGE",t.ADD_RETRIEVED_CHANNEL_MESSAGES="ADD_RETRIEVED_CHANNEL_MESSAGES",t.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET="INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET",t.RETRIEVE_CHANNEL_MESSAGES="RETRIEVE_CHANNEL_MESSAGES",t.CLEAR_CHANNELS_DATA="CLEAR_CHANNELS_DATA",t.addChannels=function(e){var n=[];return e.forEach(function(e){n.push({name:e,messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1})}),{type:t.ADD_CHANNELS,data:{channels:n}}},t.incrementChannelRetrieveMessagesOffset=function(e,n){return{type:t.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET,data:{channel:e,increment:n}}},t.setChannelFetchingNewMessages=function(e,n){return{type:t.SET_CHANNEL_FETCHING_NEW_MESSAGES,data:{channelName:e,isFetching:n}}},t.setChannelHasMoreMessages=function(e,n){return{type:t.SET_CHANNEL_HAS_MORE_MESSAGES,data:{channelName:e,hasMore:n}}},t.addReceivedChannelMessage=function(e,n){return{type:t.ADD_RECEIVED_CHANNEL_MESSAGE,data:{message:n,channelName:e}}},t.addRetrievedChannelMessages=function(e,n){return{type:t.ADD_RETRIEVED_CHANNEL_MESSAGES,data:{channelName:e,messages:n}}},t.clearChannelsData=function(){return{type:t.CLEAR_CHANNELS_DATA}},t.fetchChannels=function(){return function(e){return o.default.get("/api/v1/channels").then(function(n){var s=n.data.channels.map(function(e){return e.name});return e(t.addChannels(s))}).catch(function(t){return e(i.addError("Something went wrong while trying to fetch the channels"))})}},t.retrieveChannelMessages=function(e){return function(n,c){return s(a,void 0,void 0,function(){var s;return r(this,function(r){return(s=c().channels.find(function(t){return t.name===e}))&&!s.fetchingNewMessages&&s.hasMoreMessages?(n(t.setChannelFetchingNewMessages(s.name,!0)),[2,o.default.get("/api/v1/messages/"+s.name+"/"+s.retrieveMessagesOffset).then(function(r){if(0===r.data.messages.length)return n(t.setChannelHasMoreMessages(s.name,!1)),r;n(t.incrementChannelRetrieveMessagesOffset(e,r.data.messages.length)),n(t.addRetrievedChannelMessages(s.name,r.data.messages))}).catch(function(e){n(i.addError("Something went wrong while trying to fetch messages"))}).then(function(){return n(t.setChannelFetchingNewMessages(s.name,!1))})]):(n(i.addError("Something went wrong while trying to fetch messages")),[2,Promise.resolve("Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages")])})})}},t.deleteChannel=function(e){return function(n){return o.default.get("/api/v1/channel/delete/"+e).then(function(e){return n(i.addInfo("Channel deleted")),n(t.fetchChannels())}).catch(function(e){return n(i.addError(e.response.data.error))})}},t.addChannel=function(e){return function(n){return o.default.post("/api/v1/channel/create",{channelName:e}).then(function(e){return n(i.addInfo("Channel created")),n(t.fetchChannels())}).catch(function(e){return n(i.addError(e.response.data.error))})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(23);t.app=s.app;var r=n(0),a=function(){return new Promise(function(e,t){r.default.deleteMany({},function(n){return n?t(n):e()})}).then().catch(function(e){console.error(e)})};t.dropAllCollections=a;var o=new Error("Test not implemented");t.NotImplementedError=o,before("all tests",function(e){console.log(process.version),s.conn.on("connected",function(){console.log("server started"),e()})}),beforeEach("reset DB",function(e){a().then(function(){return e()})}),after("all tests",function(e){a().then(function(){console.log("Closing connections"),s.conn.close(),e()})}),n(43),n(52),n(55),n(57),n(58),n(59)},function(e,t,n){"use strict";t.__esModule=!0;var s=n(6),r=n(7),a=n(1);t.SET_AUTHORIZED="SET_AUTHORIZED",t.SET_USER="SET_USER",t.LOGOUT_USER="LOGOUT_USER",t.SET_JWT="SET_JWT",t.setAuthorized=function(e){return{type:t.SET_AUTHORIZED,data:e}},t.setUser=function(e){return{type:t.SET_USER,data:e}},t.logoutUser=function(){return{type:t.LOGOUT_USER}},t.setJwt=function(e){return{type:t.SET_JWT,data:e}},t.logout=function(){return function(e){return e(t.logoutUser()),e(r.clearChannelsData())}},t.updateName=function(e,t){return function(n){return s.default.post("/api/v1/user/update/name",{name:e}).then(function(e){n(a.addInfo("Name updated")),t&&t()}).catch(function(e){if(e.response&&e.response.data.error)return n(a.addError(e.response.data.error));console.log("Something went wrong updating user name",e),n(a.addError("Something went wrong while trying to update your name."))})}},t.updateEmail=function(e,t){return function(n){return s.default.post("/api/v1/user/update/email",{email:e}).then(function(e){n(a.addInfo("Email updated")),t&&t()}).catch(function(e){if(e.response&&e.response.data.error)return n(a.addError(e.response.data.error));console.log("Something went wrong updating user email",e),n(a.addError("Something went wrong while trying to update your email."))})}},t.updatePassword=function(e,t,n){return function(r){return s.default.post("/api/v1/user/update/password",{oldPass:e,newPass:t}).then(function(e){r(a.addInfo("Password updated")),n&&n()}).catch(function(e){if(e.response&&e.response.data.error)return r(a.addError(e.response.data.error));console.log("Something went wrong updating user password",e),r(a.addError("Something went wrong while trying to update your password."))})}},t.createUser=function(e,t,n){return function(r){return s.default.post("/api/v1/user/create",{name:e,email:t,role:n}).then(function(e){r(a.addInfo("New user created"))}).catch(function(e){e.response&&e.response.data.error?r(a.addError(e.response.data.error)):r(a.addError("Something went wrong"))})}},t.editUser=function(e,t,n,r){return function(o){return s.default.put("/api/v1/user/update",{email:e,user:{name:t,email:n,role:r}}).then(function(e){o(a.addInfo("Changes saved"))}).catch(function(e){e.response&&e.response.data.error?o(a.addError(e.response.data.error)):o(a.addError("Something went wrong"))})}},t.deleteUser=function(e){return function(t){return s.default({method:"delete",url:"/api/v1/user/delete",data:{email:e}}).then(function(e){t(a.addInfo("User deleted"))}).catch(function(e){e.response&&e.response.data.error?t(a.addError(e.response.data.error)):t(a.addError("Something went wrong"))})}},t.restoreUser=function(e){return function(t){return s.default.put("/api/v1/user/restore",{email:e}).then(function(e){t(a.addInfo("User restored"))}).catch(function(e){e.response&&e.response.data.error?t(a.addError(e.response.data.error)):t(a.addError("Something went wrong"))})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(18);t.INIT_WEBSOCKET="INIT_WEBSOCKET",t.SET_SOCKET_CONNECTED="SET_SOCKET_CONNECTED",t.SET_SOCKET_CONNECTED_USERS="SET_SOCKET_CONNECTED_USERS",t.initWebsocket=function(e){return{type:t.INIT_WEBSOCKET,data:{io:e}}},t.setSocketConnected=function(e){return{type:t.SET_SOCKET_CONNECTED,data:{connected:e}}},t.setSocketConnectedUsers=function(e){return{type:t.SET_SOCKET_CONNECTED_USERS,data:{userEmails:e}}},t.init=function(){return function(e,n){var r=s();return r.on("connect",function(){e(t.setSocketConnected(!0)),console.log("authorized ["+r.id+"]"),r.on("connected users",function(n){e(t.setSocketConnectedUsers(n))})}),r.on("disconnect",function(){e(t.setSocketConnected(!1)),console.log("Disconnected from websocket server, attempting reconnect")}),e(t.initWebsocket(r))}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(6),r=n(1);t.UPDATE_CHAT_USERS="UPDATE_CHAT_USERS",t.ADD_CHAT_USER="ADD_USER",t.REMOVE_CHAT_USER="REMOVE_USER",t.updateUsers=function(e){return{type:t.UPDATE_CHAT_USERS,data:{users:e}}},t.addUser=function(e){return{type:t.ADD_CHAT_USER,data:{user:e}}},t.removeUser=function(e){return{type:t.REMOVE_CHAT_USER,data:{email:e}}},t.fetchAllUsers=function(){return function(e){return s.default.get("/api/v1/users").then(function(n){var s={};return n.data.users.forEach(function(e){s[e.email]={role:e.role,name:e.name}}),e(t.updateUsers(s)),n}).catch(function(t){return e(r.addError("Fetching all users failed")),t})}},t.createNewUser=function(e){return function(e){return s.default.get("/api/v1/")}},t.editUser=function(e,t){},t.deleteUser=function(e){}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(13),r=n(3);t.default=function(e,t,n){var a=e.session.token||e.headers["x-access-token"];if(!a)return t.status(401).json({error:"Not authorized"});s.verify(a,r.secret,function(s,r){return s?t.status(401).send({error:"Not authorized"}):(e.user=r,n())})}},function(e,t){e.exports=require("validator")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(4),r=new s.Schema({channel:{type:String,required:!0},text:{type:String,required:!0},userEmail:{type:String,required:!0,lowercase:!0}},{timestamps:!0}),a=s.model("Message",r);t.default=a},function(e,t){e.exports=require("mocha")},function(e,t){e.exports=require("socket.io-client")},function(e,t){e.exports=require("redux")},function(e,t){e.exports=require("redux-thunk")},function(e,t,n){"use strict";t.__esModule=!0,t.TOGGLE_SIDEBAR_OPEN="TOGGLE_SIDEBAR_OPEN",t.toggleSidebarOpen=function(){return{type:t.TOGGLE_SIDEBAR_OPEN}}},function(e,t){e.exports=require("supertest")},function(e,t,n){"use strict";(function(e){t.__esModule=!0;var s=n(24),r=n(25),a=n(12),o=n(4),i=n(26),c=n(27),u=n(28),d=n(29),l=n(2),f=n(30),p=n(31),h=n(13),m=n(32),g=n(33)(u),E=n(34),v=n(41),S=n(0),w=n(3),_=r();t.app=_;var y,b,x=w.port;t.socketServer=b,_.engine("html",m()),_.set("view engine","html"),_.use(p());var A=u({secret:w.secret,cookie:{maxAge:864e5,sameSite:!0,secure:w.production,httpOnly:!0},saveUninitialized:!0,resave:!1,store:new g({mongooseConnection:o.connection})}),N=i({cookie:{maxAge:864e5,sameSite:!0,secure:w.production,httpOnly:!0,key:"_csrf"}});o.connect(w.useTestDb?w.mongodbTestConnectionUri:w.mongodbConnectionUri,{useNewUrlParser:!0}),o.connection.on("error",function(e){console.error("Mongoose connection error",e)}),process.on("SIGINT",function(){o.connection.close(function(){console.log("Mongoose default connection disconnected through app termination"),y.close(function(){process.exit(0)})})}),_.use(A),_.use(c(w.secret)),w.disableCsrf?(console.log("CSRF disabled"),_.use(function(e,t,n){return e.csrfToken=function(){return""},n()})):_.use(N);var C=o.connection;_.use(function(e,t,n){return e.db=C,n()}),_.use(d.json()),_.use(d.urlencoded({extended:!0})),_.use(f()),_.use(r.static(a.resolve(e,"../../dist/public/"))),_.use("/api",function(e,t,n){return n()}),_.use(function(e,t,n){e.authenticate=function(e,t,n){S.default.findByEmail(e).then(function(e){if(null===e)return n(!1,null);if(!l.compareSync(t,e.password))return n(!1,new Error("Invalid password"));var s={email:e.email,name:e.name,role:e.role};return n(s,null)}).catch(function(e){n(!1,e)})},e.logout=function(){e.session.token=null},e.issueNewToken=function(n){var s=h.sign({name:n.name,role:n.role,email:n.email},w.secret,{expiresIn:86400});t.setHeader("x-access-token",s),e.session.token=s},n()}),E.default(_),(y=s.createServer(_)).on("error",function(e){console.error(e),y.close()}),w.disableAutoStart||(t.socketServer=b=v.default(y,C,A),o.connection.on("connected",function(){console.log("Connected to MongoDB via Mongoose"),y.listen(x,function(){console.log("Listening on port "+x+"!"),_.emit("server started")})})),t.default=y,t.conn=o.connection}).call(this,"src/server")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("csurf")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("express-session")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("mustache-express")},function(e,t){e.exports=require("connect-mongo")},function(e,t,n){"use strict";(function(e){t.__esModule=!0;var s=n(12),r=n(14),a=n(35),o=n(36),i=n(37),c=n(38),u=n(39);t.default=function(t){t.get("/",function(t,n){return n.render(s.resolve(e,"../../dist/public/index.html"),{csrfToken:t.csrfToken()})}),t.get("/widget",function(t,n){return n.render(s.resolve(e,"../../../dist/public/widget/index.html"))}),t.get("/widget/demo",function(t,n){return n.render(s.resolve(e,"../../../dist/public/widget/demo.html"))}),t.post("/api/v1/login",o.default.login),t.post("/api/v1/register",o.default.register),t.get("/api/v1/logout",o.default.logout),t.get("/api/v1/verifyEmail/:id",o.default.verifyEmail),t.use("/api/v1/user*",r.default),t.get("/api/v1/user",i.default.user),t.get("/api/v1/users",i.default.users),t.get("/api/v1/user/:user",i.default.userByEmail),t.post("/api/v1/user/update/email",i.default.updateEmail),t.post("/api/v1/user/update/name",i.default.updateName),t.post("/api/v1/user/update/password",i.default.updatePassword),t.post("/api/v1/user/reset_password",i.default.resetPassword),t.post("/api/v1/user/create",a.default,i.default.createUser),t.put("/api/v1/user/update",a.default,i.default.editUser),t.delete("/api/v1/user/delete",a.default,i.default.deleteUser),t.put("/api/v1/user/restore",a.default,i.default.restoreUser),t.use("/api/v1/message*",r.default),t.get("/api/v1/messages/:channel/:offset",c.default.messages),t.use("/api/v1/channel",r.default),t.get("/api/v1/channels",u.default.channels),t.post("/api/v1/channels/delete",a.default,u.default.delete),t.post("/api/v1/channels/create",a.default,u.default.create),t.get("*",function(t,n){return n.render(s.resolve(e,"../../dist/public/index.html"),{csrfToken:t.csrfToken()})})}}).call(this,"src/server")},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n){return e.user&&"admin"===e.user.role?n():t.status(401).json({error:"Not authorized as admin"})}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(15),r=n(2),a=n(0);n(3);t.default={login:function(e,t){return s.isEmpty(e.body.email||"")||s.isEmpty(e.body.password||"")?t.status(400).json({error:"Please supply an email and password"}).end():s.isEmail(e.body.email)?void e.authenticate(e.body.email,e.body.password,function(n){return n?(e.issueNewToken(n),t.status(200).json({success:!0,email:n.email,role:n.role,name:n.name}).end()):t.status(401).json({error:"Invalid email or password"}).end()}):t.status(400).json({error:"Not a valid email address"}).end()},register:function(e,t){return s.isEmpty(e.body.email||"")||s.isEmpty(e.body.password||"")?t.status(400).json({error:"Please supply an email and password"}):s.isEmail(e.body.email)?a.default.findByEmail(e.body.email).countDocuments().exec().then(function(n){if(0!==n)return t.status(400).json({error:"Email address in use"});var s=r.hashSync(e.body.password);a.default.countDocuments().exec().then(function(n){var r="user";0===n&&(r="admin"),new a.default({name:"",email:e.body.email,password:s,role:r,emailVerified:!1}).save().then(function(e){return t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to create a new user"})})})}):t.status(400).json({error:"Not a valid email address"})},logout:function(e,t){return e.logout(),t.json({success:!0,message:"logged out"})},verifyEmail:function(e,t){}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(15),r=n(0),a=n(2);t.default={user:function(e,t){t.send(e.user)},users:function(e,t){return r.default.find({}).select("name email role deleted").then(function(e){return t.status(200).json({success:!0,users:e})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong while retrieving users"})})},userByEmail:function(e,t){return s.isEmail(e.params.user)?r.default.findByEmail(e.params.user).exec().then(function(e){return null!==e?t.status(200).json({user:{email:e.email,_id:e._id,name:e.name||"",role:e.role,created:e.createdAt}}):t.status(400).json({error:"No user found with that email"})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to find the user"})}):t.status(400).json({error:"Please supply a valid email"})},updateEmail:function(e,t){return s.isEmail(e.body.email)?r.default.countDocuments({email:e.body.email}).exec().then(function(n){return 0!==n?t.status(400).json({error:"Email address already in use"}):r.default.findByEmail(e.user.email).exec().then(function(n){return n.email=e.body.email,n.save(),e.issueNewToken(Object.assign({},e.user,{email:e.body.email})),t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to fetch the user"})})}):t.status(400).json({error:"Not a valid email"})},updateName:function(e,t){return r.default.findByEmail(e.user.email).exec().then(function(n){return n.name=e.body.name,n.save(),e.issueNewToken(Object.assign({},e.user,{name:e.body.name})),t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to update the user"})})},updatePassword:function(e,t){return s.isEmpty(e.body.newPass)||s.isEmpty(e.body.oldPass)?t.status(400).json({error:"Must supply the current and new password"}):r.default.findByEmail(e.user.email).exec().then(function(n){return a.compareSync(e.body.oldPass,n.password)?(n.password=a.hashSync(e.body.newPass),n.save(),t.status(200).json({success:!0})):t.status(400).json({error:"Current password is incorrect"})})},resetPassword:function(e,t){return t.status(500).json({error:"Not implemented"})},createUser:function(e,t){return s.isEmpty(e.body.email)||!s.isEmail(e.body.email)||s.isEmpty(e.body.role)||"user"!==e.body.role&&"admin"!==e.body.role?t.status(400).json({error:"Must supply valid email and role"}):r.default.findByEmail(e.body.email).countDocuments(function(n,s){return n?(console.error("Something went wrong trying to count users with email "+e.body.email,n),t.status(500).json({error:"Something went wrong"})):0!==s?t.status(400).json({error:"Email address in use"}):new r.default({email:e.body.email,name:e.body.name||"",role:e.body.role,password:"temp"}).save(function(e,n){return e?(console.error("Something went wrong trying to save user",e),t.status(500).json({error:"Something went wrong"})):t.status(200).json({success:!0})})})},editUser:function(e,t){return e.body.email&&s.isEmail(e.body.email)?e.body.user.email&&!s.isEmail(e.body.user.email)?t.status(400).json({error:"Please supply a valid email"}):e.body.user.role&&!s.isEmpty(e.body.user.role)&&"user"!==e.body.user.role&&"admin"!==e.body.user.role?t.status(400).json({error:"Invalid role"}):r.default.findByEmail(e.body.email).exec(function(n,s){return n?(console.log("Something went wrong",n),t.status(500).json({error:"Something went wrong"})):s?(e.body.user.email&&(s.email=e.body.user.email),e.body.user.name&&(s.name=e.body.user.name),e.body.user.role&&(s.role=e.body.user.role),s.save(function(e,n){return e?(console.log(e),t.status(500).json({error:"Something went wrong"})):t.status(200).json({success:!0})})):t.status(404).json({error:"User does not exist"})}):t.status(400).json({error:"Please supply a valid email"})},deleteUser:function(e,t){return e.body.email&&s.isEmail(e.body.email)?r.default.findByEmail(e.body.email).exec(function(n,s){return n?(console.log("Something went wrong",n),t.status(500).json({error:"Something went wrong"})):s?s.deleted?t.status(400).json({error:"User already deleted"}):e.user.email===e.body.email?t.status(400).json({error:"Cannot delete current user"}):(s.deleted=!0,s.save(function(e){return t.status(200).json({success:!0})})):t.status(404).json({error:"User does not exist"})}):t.status(400).json({error:'Invalid data for parameter "email"'})},restoreUser:function(e,t){return e.body.email&&s.isEmail(e.body.email)?r.default.findByEmail(e.body.email).exec(function(e,n){return e?(console.log("Something went wrong",e),t.status(500).json({error:"Something went wrong"})):n?n.deleted?(n.deleted=!1,n.save(function(e){return t.status(200).json({success:!0})})):t.status(400).json({error:"User already active"}):t.status(404).json({error:"User does not exist"})}):t.status(400).json({error:'Invalid data for parameter "email"'})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(16);t.default={messages:function(e,t){return s.default.find({channel:e.params.channel}).skip(parseInt(e.params.offest)).sort({_id:-1}).limit(20).exec().then(function(e){return t.status(200).json({messages:e.map(function(e){return{text:e.text,created:e.createdAt,userEmail:e.userEmail,channel:e.channel,_id:e._id}}).reverse()})}).catch(function(e){return t.status(400).json({error:"something went wrong trying to fetch messages"})})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(40);t.default={channels:function(e,t){return s.default.countDocuments().exec().then(function(e){return new Promise(function(t,n){if(0!==e)return t();s.default.create([{name:"general"},{name:"random"}]).then(function(){return t()}).catch(function(e){return n(e)})}).then(function(){s.default.find().exec().then(function(e){return t.status(200).json({channels:e})}).catch(function(e){return console.log(e),t.status(500).json({error:"Something went wrong while trying to fetch channels"})})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong while trying to create default channels"})})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong while counting channels"})})},delete:function(e,t){},create:function(e,t){}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(4),r=new s.Schema({name:{type:String,required:!0,lowercase:!0}},{timestamps:!0}),a=s.model("Channel",r);t.default=a},function(e,t,n){"use strict";t.__esModule=!0;var s=n(42),r=n(16),a=n(14);n(3);t.default=function(e,t,n){var o=s(e),i=[];return o.use(function(e,t){n(e.request,{},t)}),o.use(function(e,t){a.default(e.request,{},t)}),o.on("connection",function(e){i.push(e.request.user.email),console.log("Connected users",i),o.emit("connected users",i),e.on("disconnect",function(){i.splice(i.indexOf(e.request.user.email),1),o.emit("connected users",i)}),e.on("message",function(t){console.log(t),new r.default({channel:t.channel,text:t.text,userEmail:e.request.user.email}).save().then(function(t){o.emit("message",{_id:t._id,userEmail:t.userEmail,text:t.text,channel:t.channel,created:t.createdAt}),e.emit("message received")}).catch(function(t){console.error(t),e.emit("message receive error",t)})})}),o}},function(e,t){e.exports=require("socket.io")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(5);n(17);var r=n(18),a=n(44),o=n(19),i=n(9),c=n(7),u=n(1),d=n(21),l=n(10),f=n(11);function p(){return o.createStore(a.rootReducer,a.middleware)}describe("Store and Synchronous Actions",function(){describe("User State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().user}}),it("should not be authorized",function(){s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role)}),it("should be authorized after setAuthorized action",function(){s.assert.isFalse(t().authorized),e.dispatch(i.setAuthorized(!0)),s.assert.isTrue(t().authorized),e.dispatch(i.setAuthorized(!1)),s.assert.isFalse(t().authorized)}),it("should have user data after setting the user",function(){s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role),e.dispatch(i.setUser({authorized:!0,email:"test@test.com",name:"Jane Doe",role:"admin"})),s.assert.isTrue(t().authorized),s.assert.strictEqual(t().email,"test@test.com"),s.assert.strictEqual(t().name,"Jane Doe"),s.assert.strictEqual(t().role,"admin"),e.dispatch(i.setUser({authorized:!1,email:!1,name:!1,role:!1})),s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role)}),it("should not have user data after logging out",function(){e.dispatch(i.setUser({authorized:!0,email:"test@test.com",name:"Jane Doe",role:"admin"})),e.dispatch(i.logoutUser()),e.dispatch(i.setUser({authorized:!1,email:!1,name:!1,role:!1}))})}),describe("Channels State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().channels}}),it("should add channels from an array of channel names",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=t()[0],r=t()[1],a=t()[2];s.assert.deepStrictEqual(n,{name:"general",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1}),s.assert.deepStrictEqual(r,{name:"random",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1}),s.assert.deepStrictEqual(a,{name:"something else",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1})}),it("should update fetchingNewMessages after calling setChannelFetchingNewMessages action",function(){e.dispatch(c.addChannels(["general","random","something else"])),t().forEach(function(t){s.assert.isFalse(t.fetchingNewMessages),e.dispatch(c.setChannelFetchingNewMessages(t.name,!0))}),t().forEach(function(t){s.assert.isTrue(t.fetchingNewMessages),e.dispatch(c.setChannelFetchingNewMessages(t.name,!1))}),t().forEach(function(e){s.assert.isFalse(e.fetchingNewMessages)})}),it("should increment the channel offset for retrieving new messages",function(){e.dispatch(c.addChannels(["general","random","something else"])),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,0),s.assert.strictEqual(t().find(function(e){return"random"===e.name}).retrieveMessagesOffset,0),s.assert.strictEqual(t().find(function(e){return"something else"===e.name}).retrieveMessagesOffset,0),e.dispatch(c.incrementChannelRetrieveMessagesOffset("general",20)),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,20),e.dispatch(c.incrementChannelRetrieveMessagesOffset("general",1)),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,21),e.dispatch(c.incrementChannelRetrieveMessagesOffset("random",1)),s.assert.strictEqual(t().find(function(e){return"random"===e.name}).retrieveMessagesOffset,1),e.dispatch(c.incrementChannelRetrieveMessagesOffset("something else",1)),s.assert.strictEqual(t().find(function(e){return"something else"===e.name}).retrieveMessagesOffset,1)}),it("should update the hasMoreMessages property on a channel",function(){e.dispatch(c.addChannels(["general","random","something else"])),s.assert.isTrue(t().find(function(e){return"general"===e.name}).hasMoreMessages),s.assert.isTrue(t().find(function(e){return"random"===e.name}).hasMoreMessages),s.assert.isTrue(t().find(function(e){return"something else"===e.name}).hasMoreMessages),e.dispatch(c.setChannelHasMoreMessages("general",!1)),e.dispatch(c.setChannelHasMoreMessages("random",!1)),e.dispatch(c.setChannelHasMoreMessages("something else",!1)),s.assert.isFalse(t().find(function(e){return"general"===e.name}).hasMoreMessages),s.assert.isFalse(t().find(function(e){return"random"===e.name}).hasMoreMessages),s.assert.isFalse(t().find(function(e){return"something else"===e.name}).hasMoreMessages)}),it("should add a received message to the appropriate channel",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n={userEmail:"test@test.com",created:Date.now().toString(),_id:"1",text:"this is the message"};e.dispatch(c.addReceivedChannelMessage("general",n)),e.dispatch(c.addReceivedChannelMessage("random",n)),e.dispatch(c.addReceivedChannelMessage("random",n)),e.dispatch(c.addReceivedChannelMessage("something else",n)),e.dispatch(c.addReceivedChannelMessage("something else",n)),e.dispatch(c.addReceivedChannelMessage("something else",n));var r=t().find(function(e){return"general"===e.name}).messages;s.assert.deepStrictEqual(r.length,1),s.assert.deepStrictEqual(r,[n]);var a=t().find(function(e){return"random"===e.name}).messages;s.assert.deepStrictEqual(a.length,2),s.assert.deepStrictEqual(a,[n,n]);var o=t().find(function(e){return"something else"===e.name}).messages;s.assert.deepStrictEqual(o.length,3),s.assert.deepStrictEqual(o,[n,n,n])}),it("should add retreived messages to the appropriate channel",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=[{text:"Something here",created:"2019-04-13T16:45:28.946Z",userEmail:"abkothman@gmail.com",_id:"5cb212281d645a22abea8dbe"},{text:"12341234",created:"2019-04-14T22:34:06.686Z",userEmail:"abkothman@gmail.com",_id:"5cb3b55ecbf68c6a954eafb3"},{text:"test one two three",created:"2019-04-14T22:34:10.903Z",userEmail:"abkothman@gmail.com",_id:"5cb3b562cbf68c6a954eafb4"}];e.dispatch(c.addRetrievedChannelMessages("general",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.addRetrievedChannelMessages("random",n));var r=t();s.assert.deepStrictEqual(r.find(function(e){return"general"===e.name}).messages,n),s.assert.deepStrictEqual(r.find(function(e){return"random"===e.name}).messages,n.concat(n)),s.assert.deepStrictEqual(r.find(function(e){return"something else"===e.name}).messages,[])}),it("should clear all channel data",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=[{text:"Something here",created:"2019-04-13T16:45:28.946Z",userEmail:"abkothman@gmail.com",_id:"5cb212281d645a22abea8dbe"},{text:"12341234",created:"2019-04-14T22:34:06.686Z",userEmail:"abkothman@gmail.com",_id:"5cb3b55ecbf68c6a954eafb3"},{text:"test one two three",created:"2019-04-14T22:34:10.903Z",userEmail:"abkothman@gmail.com",_id:"5cb3b562cbf68c6a954eafb4"}];e.dispatch(c.addRetrievedChannelMessages("general",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.clearChannelsData());var r=t();s.assert.deepStrictEqual(r,[])})}),describe("Notifications State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().notifications}}),it("should add errors",function(){s.assert.deepStrictEqual(t().errors,[]),e.dispatch(u.addError("Test error")),s.assert.deepStrictEqual(t().errors,["Test error"]),e.dispatch(u.addError("Another error")),s.assert.deepStrictEqual(t().errors,["Test error","Another error"])}),it("should remove errors given an index",function(){e.dispatch(u.addError("Test error")),e.dispatch(u.addError("Another error")),s.assert.deepStrictEqual(t().errors,["Test error","Another error"]),e.dispatch(u.removeError(1)),s.assert.deepStrictEqual(t().errors,["Test error"]),e.dispatch(u.removeError(0)),s.assert.deepStrictEqual(t().errors,[])}),it("should clear errors",function(){e.dispatch(u.addError("Test error")),e.dispatch(u.addError("Another error")),e.dispatch(u.clearErrors()),s.assert.deepStrictEqual(t().errors,[])}),it("should add info",function(){s.assert.deepStrictEqual(t().infos,[]),e.dispatch(u.addInfo("Test info")),s.assert.deepStrictEqual(t().infos,["Test info"]),e.dispatch(u.addInfo("Another info")),s.assert.deepStrictEqual(t().infos,["Test info","Another info"])}),it("should remove info given an index",function(){e.dispatch(u.addInfo("Test info")),e.dispatch(u.addInfo("Another info")),e.dispatch(u.removeInfo(1)),s.assert.deepStrictEqual(t().infos,["Test info"]),e.dispatch(u.removeInfo(0)),s.assert.deepStrictEqual(t().infos,[])}),it("should clear infos",function(){e.dispatch(u.addInfo("Test info")),e.dispatch(u.addInfo("Another info")),e.dispatch(u.clearInfos()),s.assert.deepStrictEqual(t().infos,[])})}),describe("Sidebar State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().sidebar}}),it("should toggle open state",function(){s.assert.isTrue(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isFalse(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isTrue(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isFalse(t().open)})}),describe("Socket State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().socket}}),it("should set the socket given a SocketIOClient Socket",function(){s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:[]});var n=r();e.dispatch(l.initWebsocket(n)),s.assert.deepStrictEqual(t(),{io:n,connected:!1,connectedUserEmails:[]}),n.close()}),it("should update the connected state",function(){e.dispatch(l.setSocketConnected(!0)),s.assert.deepStrictEqual(t(),{io:null,connected:!0,connectedUserEmails:[]}),e.dispatch(l.setSocketConnected(!1)),s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:[]})}),it("should update the connected users",function(){var n=["test@test.com","test2@test.com"];e.dispatch(l.setSocketConnectedUsers(n)),s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:n})})}),describe("Chat Users State",function(){var e,t;beforeEach(function(){e=p(),t=function(){return e.getState().chatUsers}}),it("should update users",function(){var n={"test@test.com":{role:"user",name:"Test Name"},"test2@test.com":{role:"admin",name:"Another test"},"test3@test.com":{role:"admin",name:"Last test"}};e.dispatch(f.updateUsers(n)),s.assert.deepStrictEqual(t(),n)})})})},function(e,t,n){"use strict";t.__esModule=!0;var s=n(19),r=n(20),a=n(45),o=n(46),i=n(47),c=n(48),u=n(49),d=n(50),l=n(51),f=n(3);t.rootReducer=s.combineReducers({user:o.default,channels:i.default,notifications:c.default,sidebar:u.default,socket:d.default,chatUsers:l.default}),t.middleware=f.production||f.disableReduxLogging?s.applyMiddleware(r.default):s.applyMiddleware(r.default,a.createLogger()),t.default=s.createStore(t.rootReducer,t.middleware)},function(e,t){e.exports=require("redux-logger")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(9),r={authorized:!1,email:!1,name:!1,role:!1,jwt:!1};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.SET_AUTHORIZED:return"boolean"!=typeof t.data?(console.error("Data must be boolean for SET_AUTHORIZED action"),e):!1===t.data?Object.assign({},e,{authorized:!1,email:!1}):Object.assign({},e,{authorized:t.data});case s.SET_USER:return Object.assign({},e,t.data);case s.LOGOUT_USER:return{authorized:!1,name:!1,email:!1,role:!1};case s.SET_JWT:return Object.assign({},e,{token:t.data});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(7),r=[];t.channelExists=function(e,t){var n=e.find(function(e){return e.name===t});return n||!1},t.default=function(e,n){switch(void 0===e&&(e=r),n.type){case s.ADD_CHANNELS:return n.data.channels;case s.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET:var a=t.channelExists(e,n.data.channel),o=n.data.increment;return a?e.map(function(e){return e.name===a.name&&(e.retrieveMessagesOffset+=o),e}):(console.log("Unknown channel while incrementing messages offset",n),e);case s.SET_CHANNEL_FETCHING_NEW_MESSAGES:return t.channelExists(e,n.data.channelName)?e.map(function(e){return e.name===n.data.channelName&&(e.fetchingNewMessages=n.data.isFetching),e}):(console.log("Unknown channel while fetching new messages",n),e);case s.SET_CHANNEL_HAS_MORE_MESSAGES:var i=t.channelExists(e,n.data.channelName),c=n.data.hasMore;return i?e.map(function(e){return e.name===n.data.channelName&&(e.hasMoreMessages=c),e}):(console.log("Unknown channel while setting hasMore messages",n),e);case s.ADD_RETRIEVED_CHANNEL_MESSAGES:var u=n.data.messages,d=n.data.channelName;return t.channelExists(e,d)?e.map(function(e){return e.name===d&&(e.messages=u.concat(e.messages)),e}):(console.log("Unknown channel while adding retrieved channel messages",n),e);case s.ADD_RECEIVED_CHANNEL_MESSAGE:var l=n.data.message,f=n.data.channelName;return t.channelExists(e,f)?e.map(function(e){return e.name===f&&(e.messages=e.messages.concat([l])),e}):(console.log("Unknown channel while adding received message",e,n),e);case s.CLEAR_CHANNELS_DATA:return[];default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(1),r={errors:[],infos:[]};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.ADD_ERROR:return Object.assign({},e,{errors:e.errors.concat([t.data])});case s.REMOVE_ERROR:var n=e.errors.slice();return n.splice(t.data,1),Object.assign({},e,{errors:n});case s.CLEAR_ERRORS:return Object.assign({},e,{errors:[]});case s.ADD_INFO:return Object.assign({},e,{infos:e.infos.concat([t.data])});case s.REMOVE_INFO:var a=e.infos.slice();return a.splice(t.data,1),Object.assign({},e,{infos:a});case s.CLEAR_INFOS:return Object.assign({},e,{infos:[]});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(21),r={open:!0};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.TOGGLE_SIDEBAR_OPEN:return Object.assign({},e,{open:!e.open});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(10),r={io:null,connected:!1,connectedUserEmails:[]};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.INIT_WEBSOCKET:return Object.assign({},e,{io:t.data.io});case s.SET_SOCKET_CONNECTED:return Object.assign({},e,{connected:t.data.connected});case s.SET_SOCKET_CONNECTED_USERS:return Object.assign({},e,{connectedUserEmails:t.data.userEmails});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(11),r={};t.default=function(e,t){var n;switch(void 0===e&&(e=r),t.type){case s.UPDATE_CHAT_USERS:return t.data.users;case s.ADD_CHAT_USER:return Object.assign({},e,((n={})[t.data.user.email]={role:t.data.user.role,name:t.data.user.name},n));case s.REMOVE_CHAT_USER:delete Object.assign({},e)[t.data.email];default:return e}}},function(e,t,n){"use strict";t.__esModule=!0,n(17);var s=n(6),r=n(5),a=n(53),o=n(54),i=n(20),c=n(9),u=n(1),d=n(10),l=n(7),f=n(11),p=o.default([i.default]);function h(e){return void 0===e&&(e={}),p(e)}describe("Async Actions",function(){var e,t;before(function(){t=new a.default(s.default)}),after(function(){t.restore()}),describe("User async actions",function(){beforeEach(function(){e=h(),t.reset(),t.onAny().reply(200,{})}),describe("updateName",function(){it("should handle callback and set info ",function(t){var n=!1;e.dispatch(c.updateName("Adrian",function(){return n="Adrian"})).then(function(){r.assert.strictEqual(n,"Adrian");var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Name updated"}]),t()}).catch(t)}),it("should set an error on failed request",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/name").reply(500,{error:"Something went wrong"}),e.dispatch(c.updateName("Adrian",function(){return s="Adrian"})).then(function(){r.assert.strictEqual(s,!1);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)})}),describe("updateEmail",function(){it("should set an error on failed request",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/email").reply(500,{error:"Something went wrong"}),e.dispatch(c.updateEmail("test@test.com",function(){return s="test@test.com"})).then(function(){r.assert.isFalse(s);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)}),it("should handle callback and set info",function(t){var n=!1;e.dispatch(c.updateEmail("test@test.com",function(){return n="test@test.com"})).then(function(){r.assert.strictEqual(n,"test@test.com");var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Email updated"}]),t()}).catch(t)})}),describe("updatePassword",function(){it("should set info",function(t){var n=!1;e.dispatch(c.updatePassword("a","b",function(){return n=!0})).then(function(){r.assert.isTrue(n);var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Password updated"}]),t()}).catch(t)}),it("should set an error on failed request",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/password").reply(500,{error:"Something went wrong"}),e.dispatch(c.updatePassword("a","b",function(){return s=!0})).then(function(){r.assert.isFalse(s);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)})}),describe("createUser",function(){it("should set info on success",function(t){e.dispatch(c.createUser("Name","email@test.com","user")).then(function(){var n=e.getActions();r.assert.deepStrictEqual(n,[u.addInfo("New user created")]),t()}).catch(t)}),it("should set error on failure",function(n){t.reset(),t.onAny().reply(400,{error:"Something went wrong"}),e.dispatch(c.createUser("Name","email@test.com","user")).then(function(){var t=e.getActions();r.assert.deepStrictEqual(t,[u.addError("Something went wrong")]),n()}).catch(n)})}),describe("editUser",function(){it("should set info on success",function(t){e.dispatch(c.editUser("original@test.com","Name","email@test.com","user")).then(function(){var n=e.getActions();r.assert.deepStrictEqual(n,[u.addInfo("Changes saved")]),t()}).catch(t)}),it("should set error on failure",function(n){t.reset(),t.onAny().reply(400,{error:"Something went wrong"}),e.dispatch(c.editUser("original@test.com","Name","email@test.com","user")).then(function(){var t=e.getActions();r.assert.deepStrictEqual(t,[u.addError("Something went wrong")]),n()}).catch(n)})}),describe("deleteUser",function(){it("should set info on success",function(t){e.dispatch(c.deleteUser("user@test.com")).then(function(){var n=e.getActions();r.assert.deepStrictEqual(n,[u.addInfo("User deleted")]),t()}).catch(t)}),it("should set error on failure",function(n){t.reset(),t.onAny().reply(400,{error:"Something went wrong"}),e.dispatch(c.deleteUser("test@test.com")).then(function(){var t=e.getActions();r.assert.deepStrictEqual(t,[u.addError("Something went wrong")]),n()}).catch(n)})}),describe("restoreUser",function(){it("should set info on success",function(t){e.dispatch(c.restoreUser("user@test.com")).then(function(){var n=e.getActions();r.assert.deepStrictEqual(n,[u.addInfo("User restored")]),t()}).catch(t)}),it("should set error on failure",function(n){t.reset(),t.onAny().reply(400,{error:"Something went wrong"}),e.dispatch(c.restoreUser("test@test.com")).then(function(){var t=e.getActions();r.assert.deepStrictEqual(t,[u.addError("Something went wrong")]),n()}).catch(n)})})}),describe("Channels async actions",function(){beforeEach(function(){e=p({channels:[{name:"general",fetchingNewMessages:!1,hasMoreMessages:!0,retrieveMessagesOffset:0},{name:"fetching new messages",fetchingNewMessages:!0,hasMoreMessages:!0},{name:"no more messages",fetchingNewMessages:!1,hasMoreMessages:!1}]}),t.reset(),t.onAny().reply(200,{})}),it("should fetch channels and dispatch addChannels with an array of channel names",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),e.dispatch(l.fetchChannels()).then(function(){var t=e.getActions(),s=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch addError on failed request to /api/v1/channels",function(n){t.reset(),t.onGet("/api/v1/channels").reply(500),e.dispatch(l.fetchChannels()).then(function(){var t=e.getActions(),s=u.addError("Something went wrong while trying to fetch the channels");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch an error if retrieving messages with invalid channel name",function(t){e.dispatch(l.retrieveChannelMessages("invalid name")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error if already retrieving channel messages",function(t){e.dispatch(l.retrieveChannelMessages("fetching new messages")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error if channel does not have older messages",function(t){e.dispatch(l.retrieveChannelMessages("no more messages")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error on failed get request to /api/v1/messages/",function(n){t.reset(),t.onGet().reply(500);e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),s=l.setChannelFetchingNewMessages("general",!0),a=u.addError("Something went wrong while trying to fetch messages"),o=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[s,a,o]),n()}).catch(n)}),it("should set channelHasMoreMessages on response with empty array",function(n){t.reset(),t.onGet().reply(200,{messages:[]});e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),s=l.setChannelFetchingNewMessages("general",!0),a=l.setChannelHasMoreMessages("general",!1),o=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[s,a,o]),n()}).catch(n)}),it("should increment offset (based on number of received messages) and add retrieved channel messages on successful retreiveChannelMessages action",function(n){var s=[{text:"123",created:Date.now().toString(),userEmail:"test@test.com",_id:"1"},{text:"456",created:Date.now().toString(),userEmail:"test@test.com",_id:"2"}];t.reset(),t.onGet().reply(200,{messages:s}),e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),a=l.setChannelFetchingNewMessages("general",!0),o=l.incrementChannelRetrieveMessagesOffset("general",s.length),i=l.addRetrievedChannelMessages("general",s),c=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[a,o,i,c]),n()}).catch(n)}),it("should dispatch info on successfully deleting channel",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),t.onGet().reply(200),e.dispatch(l.deleteChannel("general")).then(function(){var t=e.getActions(),s=u.addInfo("Channel deleted"),a=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s,a]),n()}).catch(n)}),it("should dispatch an error on failed attempt to delete channel",function(n){t.reset(),t.onGet().reply(500,{error:"Something went wrong"}),e.dispatch(l.deleteChannel("general")).then(function(){var t=e.getActions(),s=u.addError("Something went wrong");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch info on creating new channel",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),t.onPost().reply(200),e.dispatch(l.addChannel("new channel")).then(function(){var t=e.getActions(),s=u.addInfo("Channel created"),a=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s,a]),n()}).catch(n)}),it("should dispatch an error on failed attempt to create a new channel",function(n){t.reset(),t.onAny().reply(500,{error:"Something went wrong"}),e.dispatch(l.addChannel("new channel")).then(function(){var t=e.getActions(),s=u.addError("Something went wrong");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)})}),describe("Socket async actions",function(){beforeEach(function(){e=h()}),it("should initialize websocket connection",function(){e.dispatch(d.init());var t=e.getActions();r.assert.strictEqual(t[0].type,d.INIT_WEBSOCKET),t[0].data.io.close()})}),describe("Chat Users async actions",function(){beforeEach(function(){e=h()}),it("should dipatch updateUsers on fetch all users",function(n){var s=[{email:"test@test.com",role:"admin",name:"test"},{email:"test2@test.com",role:"general",name:"test"}],a={};s.forEach(function(e){a[e.email]={name:e.name,role:e.role}}),t.reset(),t.onAny().reply(200,{users:s}),e.dispatch(f.fetchAllUsers()).then(function(){var t=e.getActions(),s=f.updateUsers(a);r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch addError on failed attempt to fetch users",function(n){t.reset(),t.onAny().reply(500),e.dispatch(f.fetchAllUsers()).then(function(){var t=e.getActions(),s=u.addError("Fetching all users failed");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)})})})},function(e,t){e.exports=require("axios-mock-adapter")},function(e,t){e.exports=require("redux-mock-store")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(22),r=n(2),a=n(8),o=n(0),i=n(5),c=n(56);describe("Auth Controller",function(){describe("POST /api/v1/login",function(){beforeEach(function(e){a.dropAllCollections().then(function(){new o.default({name:"Adrian",email:"test@test.com",password:r.hashSync("test"),role:"user"}).save().then(function(t){return e()}).catch(function(e){throw e})})}),it("should login the user",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test"}).expect(200).end(function(t){if(t)return e(t);e()})}),it("should return the logged-in user details",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.email,"test@test.com"),i.assert.strictEqual(s.role,"user"),i.assert.strictEqual(s.name,"Adrian"),e()})}),it("should return an error if the email does not exist",function(e){s(a.app).post("/api/v1/login").send({email:"test.does.not.exit@test.com",password:"test"}).expect(401).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Invalid email or password"),e()})}),it("should return an error if the password does not match the hash",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test-invalid-password"}).expect(401).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Invalid email or password"),e()})}),it("should return an error if the email or password is missing",function(e){s(a.app).post("/api/v1/login").send({password:"test"}).expect(400).end(function(t,n){if(t)return e(t);var r=JSON.parse(n.text);i.assert.strictEqual(r.error,"Please supply an email and password"),s(a.app).post("/api/v1/login").send({email:"test@test.com"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Please supply an email and password"),e()})})}),it("should return an error if the email is not valid",function(e){s(a.app).post("/api/v1/login").send({email:"not an email@asdf",password:"1234"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Not a valid email address"),e()})})}),describe("POST /api/v1/register",function(){beforeEach(function(e){a.dropAllCollections().then(function(){return e()})}),it("should register a user",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){if(!t)return i.assert.fail(),e();e()}).catch(function(t){return e(t)})})}),it("should create an admin user if no users exist",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){t||i.assert.fail(),i.assert.strictEqual(t.role,"admin"),e()}).catch(function(t){return e(t)})})}),it("should create a regular user if users exist",function(e){new o.default({name:"test",email:"admin@test.com",password:"password",role:"admin"}).save().then(function(){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){t||i.assert.fail(),i.assert.strictEqual(t.role,"user"),e()}).catch(function(t){return e(t)})})})}),it("should return an error if email or password not provided",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com"}).expect(400).end(function(t,n){if(t)return e(t);var r=JSON.parse(n.text);i.assert.strictEqual(r.error,"Please supply an email and password"),s(a.app).post("/api/v1/register").send({password:"123"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Please supply an email and password"),e()})})}),it("should return an error if not a valid email",function(e){s(a.app).post("/api/v1/register").send({email:"not an email @ asdlfkj;l",password:"1234"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Not a valid email address"),e()})})}),describe("POST /api/v1/logout",function(){var e;beforeEach(function(t){e=c(a.app),a.dropAllCollections().then(function(){new o.default({name:"Adrian",email:"test@test.com",password:r.hashSync("test"),role:"user"}).save().then(function(e){return t()}).catch(function(e){throw e})})}),it("should log out the user",function(t){e.post("/api/v1/login").send({email:"test@test.com",password:"test"}).end(function(n){if(n)return t(n);e.get("/api/v1/user").send().expect(200).end(function(n){if(n)return t(n);e.get("/api/v1/logout").send().expect(200).end(function(n){if(n)return t(n);e.get("/api/v1/user").send().expect(401).end(t)})})})})})})},function(e,t){e.exports=require("supertest-session")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(22),r=n(2),a=n(5),o=n(8),i=n(0);describe("User Controller",function(){var e,t="Adrian",n="test@test.com",c="test",u="admin";beforeEach(function(d){o.dropAllCollections().then(function(){new i.default({name:t,email:n,password:r.hashSync(c),role:u}).save().then(function(t){s(o.app).post("/api/v1/login").send({email:n,password:c}).expect(200).end(function(t,n){e=n.get("x-access-token"),a.assert.isNotNull(e),a.assert.isString(e),a.assert.isNotEmpty(e),d()})}).catch(function(e){throw e})})}),describe("GET /api/v1/user",function(){it("should fetch the logged in user",function(r){s(o.app).get("/api/v1/user").set("x-access-token",e).expect(200,function(e,s){if(e)return r(e);a.assert.strictEqual(s.body.name,t),a.assert.strictEqual(s.body.email,n),a.assert.strictEqual(s.body.role,u),a.assert.notProperty(s.body,"password"),r()})}),it("should fail if not logged in",function(e){s(o.app).get("/api/v1/user").expect(401,e)})}),describe("GET /api/v1/users",function(){it("should receive a list of users",function(r){s(o.app).get("/api/v1/users").set("x-access-token",e).expect(200,function(e,s){a.assert.strictEqual(s.body.users.length,1),a.assert.include(s.body.users[0],{name:t,role:u,email:n}),a.assert.notProperty(s.body.users[0],"password"),r()})}),it("should fail if not logged in",function(e){s(o.app).get("/api/v1/users").expect(401,e)})}),describe("GET /api/v1/user/:email",function(){it("should retrieve a user by email",function(r){s(o.app).get("/api/v1/user/"+n).set("x-access-token",e).expect(200,function(e,s){a.assert.hasAllKeys(s.body.user,["email","name","role","_id","created"]),a.assert.include(s.body.user,{email:n,name:t,role:u}),r()})}),it("should fail if email does not exist",function(t){s(o.app).get("/api/v1/user/not.in.use@test.com").set("x-access-token",e).expect(400,function(e,n){a.assert.isString(n.body.error),a.assert.strictEqual(n.body.error,"No user found with that email"),t(e)})}),it("should fail if not a valid email",function(t){s(o.app).get("/api/v1/user/not-an-email").set("x-access-token",e).expect(400,function(e,n){a.assert.isString(n.body.error),a.assert.strictEqual(n.body.error,"Please supply a valid email"),t(e)})})}),describe("POST /api/v1/user/update/email",function(){it("should update the logged in user's email",function(n){s(o.app).post("/api/v1/user/update/email").set("x-access-token",e).send({email:"new.email@test.com"}).expect(200,function(e,r){if(e)return n(e);s(o.app).get("/api/v1/user").set("x-access-token",r.get("x-access-token")).expect(200,function(e,s){a.assert.strictEqual(s.body.name,t),a.assert.strictEqual(s.body.email,"new.email@test.com"),a.assert.strictEqual(s.body.role,u),n(e)})})}),it("should fail if new email is not valid",function(t){s(o.app).post("/api/v1/user/update/email").set("x-access-token",e).send({email:"not an email"}).expect(400,t)}),it("should fail if email already in use",function(t){s(o.app).post("/api/v1/user/update/email").set("x-access-token",e).send({email:"test@test.com"}).expect(400,t)}),it("should fail if not authorized",function(e){s(o.app).post("/api/v1/user/update/email").send({email:"test@test.com"}).expect(401,e)})}),describe("POST /api/v1/user/update/name",function(){it("should update name",function(t){s(o.app).post("/api/v1/user/update/name").set("x-access-token",e).send({name:"new name"}).expect(200,function(e,r){s(o.app).get("/api/v1/user").set("x-access-token",r.get("x-access-token")).expect(200,function(e,s){a.assert.strictEqual(s.body.name,"new name"),a.assert.strictEqual(s.body.email,n),a.assert.strictEqual(s.body.role,u),t(e)})})}),it("should fail if not authorized",function(e){s(o.app).post("/api/v1/user/update/name").send({name:"new name"}).expect(401,e)})}),describe("POST /api/v1/user/update/password",function(){it("should update password",function(t){s(o.app).post("/api/v1/user/update/password").set("x-access-token",e).send({oldPass:c,newPass:"newpass"}).expect(200,function(e,r){if(e)return t(e);s(o.app).post("/api/v1/login").send({email:n,password:"newpass"}).expect(200,t)})}),it("should fail updating password if current password invalid",function(t){s(o.app).post("/api/v1/user/update/password").set("x-access-token",e).send({oldPass:"wrong password",newPass:"12341234"}).expect(400,t)}),it("should fail updating password if not authorized",function(e){s(o.app).post("/api/v1/user/update/password").expect(401,e)})}),describe("POST /api/v1/user/create",function(){var t={email:"test123@test.com",name:"New User",role:"user"};it("should create a new user",function(n){i.default.findByEmail(t.email).countDocuments(function(r,c){if(r)return n(r);a.assert.strictEqual(c,0,"User should not exist with email test123Wtest.com"),s(o.app).post("/api/v1/user/create").set("x-access-token",e).send(t).expect(200,function(e,s){if(e)return n(e);i.default.findByEmail(t.email).exec(function(e,s){if(e)return n(e);a.assert.deepInclude(s,t),n()})})})}),it("should fail if user making request is not an admin",function(n){new i.default({name:t.name,email:t.email,password:r.hashSync("password"),role:t.role}).save().then(function(r){s(o.app).post("/api/v1/login").send({email:t.email,password:"password"}).expect(200).end(function(t,r){e=r.get("x-access-token"),s(o.app).post("/api/v1/user/create").set("x-access-token",e).expect(401,n)})}).catch(function(e){throw e})}),it("should fail if user is not logged in",function(e){s(o.app).post("/api/v1/user/create").expect(401,e)}),it("should fail if email is not valid",function(n){s(o.app).post("/api/v1/user/create").set("x-access-token",e).send({email:"not valid",name:t.name,role:t.role}).expect(400,n)}),it("should fail if role not valid",function(n){s(o.app).post("/api/v1/user/create").set("x-access-token",e).send({email:t.email,name:t.name,role:"not valid"}).expect(400,n)}),it("should fail if email address already in use",function(r){s(o.app).post("/api/v1/user/create").set("x-access-token",e).send({email:n,name:t.name,role:t.role}).expect(400,r)})}),describe("PUT /api/v1/user/update",function(){var t={name:"New Name",email:"newemail@test.com",role:"user"};it("should update the user",function(r){s(o.app).put("/api/v1/user/update").set("x-access-token",e).send({email:n,user:t}).expect(200,function(e,n){if(e)return r(e);i.default.findByEmail(t.email).exec(function(e,n){if(e)return r(e);a.assert.isNotNull(n),a.assert.deepInclude(n,t),r()})})}),it("should fail if user with email does not exist",function(n){s(o.app).put("/api/v1/user/update").set("x-access-token",e).send({email:"doesnotexist@test.com",user:t}).expect(404,n)}),it("should fail if new email not valid",function(r){s(o.app).put("/api/v1/user/update").set("x-access-token",e).send({email:n,user:Object.assign({},t,{email:"not valid"})}).expect(400,r)}),it("should fail if role not valid",function(r){s(o.app).put("/api/v1/user/update").set("x-access-token",e).send({email:n,user:Object.assign({},t,{role:"not valid"})}).expect(400,r)})}),describe("DELETE /api/v1/user/delete",function(){beforeEach(function(e){var t=new i.default({name:"New Name",email:"newemail@test.com",role:"user",password:"pass"}),n=new i.default({name:"Name",email:"deleted@test.com",role:"user",password:"password",deleted:!0});t.save(function(t){if(t)return e(t);n.save(function(t){e(t)})})}),it("should delete the user",function(t){s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).send({email:"newemail@test.com"}).expect(200,function(e){if(e)return t(e);i.default.findByEmail("newemail@test.com").exec(function(e,n){if(e)return t(e);a.assert.isTrue(n.deleted),t()})})}),it("should fail if trying to delete logged in user",function(t){s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).send({email:n}).expect(400,t)}),it("should fail if email inactive",function(t){s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).send({email:"deleted@test.com"}).expect(400,t)}),it("should fail if email does not exist",function(t){s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).send({email:"notreal@test.com"}).expect(404,t)}),it("should fail if email not provided",function(t){s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).send({email:"not valid"}).expect(400,t)}),it("should fail if user making request is not an admin",function(t){new i.default({name:"Name",email:"notanadmin@test.com",password:r.hashSync("password"),role:"user"}).save(function(n,r){if(n)return t(n);s(o.app).post("/api/v1/login").send({email:"notanadmin@test.com",password:"password"}).expect(200).end(function(n,r){e=r.get("x-access-token"),s(o.app).delete("/api/v1/user/delete").set("x-access-token",e).expect(401,t)})})}),it("should fail if user not logged in",function(e){s(o.app).delete("/api/v1/user/delete").expect(401,e)})}),describe("PUT /api/v1/user/restore",function(){beforeEach(function(e){var t=new i.default({name:"New Name",email:"active@test.com",role:"user",password:"pass"}),n=new i.default({name:"Name",email:"deleted@test.com",role:"user",password:"password",deleted:!0});t.save(function(t){if(t)return e(t);n.save(function(t){e(t)})})}),it("should restore the user",function(t){s(o.app).put("/api/v1/user/restore").set("x-access-token",e).send({email:"deleted@test.com"}).expect(200,function(e){if(e)return t(e);i.default.findByEmail("deleted@test.com").exec(function(e,n){if(e)return t(e);a.assert.isFalse(n.deleted),t()})})}),it("should fail if email does not exist",function(t){s(o.app).put("/api/v1/user/restore").set("x-access-token",e).send({email:"doesnotexist@test.com"}).expect(404,t)}),it("should fail if user is active",function(t){s(o.app).put("/api/v1/user/restore").set("x-access-token",e).send({email:"active@test.com"}).expect(400,t)}),it("should fail if user making request is not an admin",function(t){new i.default({name:"Name",email:"notanadmin@test.com",password:r.hashSync("password"),role:"user"}).save(function(n,r){if(n)return t(n);s(o.app).post("/api/v1/login").send({email:"notanadmin@test.com",password:"password"}).expect(200).end(function(n,r){e=r.get("x-access-token"),s(o.app).put("/api/v1/user/restore").set("x-access-token",e).expect(401,t)})})}),it("should fail if user not logged in",function(e){s(o.app).put("/api/v1/user/restore").send({email:"active@test.com"}).expect(401,e)})})})},function(e,t){},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9tb2RlbHMvVXNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL2FjdGlvbnMvbm90aWZpY2F0aW9uc0FjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYmNyeXB0anNcIiIsIndlYnBhY2s6Ly8vLi9lbnYuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9uZ29vc2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjaGFpXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYXhpb3NcIiIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL2FjdGlvbnMvY2hhbm5lbHNBY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3Rlc3RzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy93ZWIvYWN0aW9ucy91c2VyQWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL2FjdGlvbnMvc29ja2V0QWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL2FjdGlvbnMvY2hhdFVzZXJzQWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwianNvbndlYnRva2VuXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9taWRkbGV3YXJlL2F1dGhvcml6ZWQudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwidmFsaWRhdG9yXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9tb2RlbHMvTWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJtb2NoYVwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInNvY2tldC5pby1jbGllbnRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWR1eFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInJlZHV4LXRodW5rXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi9hY3Rpb25zL3NpZGViYXJBY3Rpb25zLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcInN1cGVydGVzdFwiIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvc2VydmVyLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY3N1cmZcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb29raWUtcGFyc2VyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXhwcmVzcy1zZXNzaW9uXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYm9keS1wYXJzZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJoZWxtZXRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb21wcmVzc2lvblwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIm11c3RhY2hlLWV4cHJlc3NcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjb25uZWN0LW1vbmdvXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9yb3V0ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9taWRkbGV3YXJlL2FkbWluLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvY29udHJvbGxlcnMvYXV0aENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9jb250cm9sbGVycy91c2VyQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL2NvbnRyb2xsZXJzL21lc3NhZ2VDb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvY29udHJvbGxlcnMvY2hhbm5lbENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9tb2RlbHMvQ2hhbm5lbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL3NvY2tldC5pby9pbmRleC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzb2NrZXQuaW9cIiIsIndlYnBhY2s6Ly8vLi90ZXN0cy93ZWIvdGVzdFN0b3JlLnRzIiwid2VicGFjazovLy8uL3NyYy93ZWIvc3RvcmUudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicmVkdXgtbG9nZ2VyXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi9yZWR1Y2Vycy91c2VyLnRzIiwid2VicGFjazovLy8uL3NyYy93ZWIvcmVkdWNlcnMvY2hhbm5lbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi9yZWR1Y2Vycy9ub3RpZmljYXRpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy93ZWIvcmVkdWNlcnMvc2lkZWJhci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL3JlZHVjZXJzL3NvY2tldC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViL3JlZHVjZXJzL2NoYXRVc2Vycy50cyIsIndlYnBhY2s6Ly8vLi90ZXN0cy93ZWIvdGVzdEFzeW5jQWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJheGlvcy1tb2NrLWFkYXB0ZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWR1eC1tb2NrLXN0b3JlXCIiLCJ3ZWJwYWNrOi8vLy4vdGVzdHMvc2VydmVyL3Rlc3RBdXRoQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdXBlcnRlc3Qtc2Vzc2lvblwiIiwid2VicGFjazovLy8uL3Rlc3RzL3NlcnZlci90ZXN0VXNlckNvbnRyb2xsZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJtb25nb29zZV8xIiwidXNlclNjaGVtYSIsIlNjaGVtYSIsIlN0cmluZyIsImVtYWlsIiwicmVxdWlyZWQiLCJ0eXBlIiwibG93ZXJjYXNlIiwicGFzc3dvcmQiLCJyb2xlIiwiZW51bSIsImRlbGV0ZWQiLCJCb29sZWFuIiwiZGVmYXVsdCIsInZlcmlmaWVkIiwidGltZXN0YW1wcyIsInN0YXRpY3MiLCJmaW5kQnlFbWFpbCIsInRoaXMiLCJmaW5kT25lIiwiVXNlciIsIm1vZGVsIiwiQUREX0VSUk9SIiwiUkVNT1ZFX0VSUk9SIiwiQ0xFQVJfRVJST1JTIiwiQUREX0lORk8iLCJSRU1PVkVfSU5GTyIsIkNMRUFSX0lORk9TIiwiYWRkRXJyb3IiLCJlcnJvciIsImRhdGEiLCJyZW1vdmVFcnJvciIsImNsZWFyRXJyb3JzIiwiYWRkSW5mbyIsImluZm8iLCJyZW1vdmVJbmZvIiwiY2xlYXJJbmZvcyIsInJlcXVpcmUiLCJtb25nb2RiQ29ubmVjdGlvblVyaSIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsIm1vbmdvZGJUZXN0Q29ubmVjdGlvblVyaSIsIk1PTkdPREJfVEVTVF9VUkkiLCJwb3J0IiwiUE9SVCIsInByb2R1Y3Rpb24iLCJ1c2VUZXN0RGIiLCJVU0VfVEVTVF9EQiIsInNlY3JldCIsIlNFQ1JFVCIsImRpc2FibGVDc3JmIiwiRElTQUJMRV9DU1JGIiwiZGlzYWJsZVJlZHV4TG9nZ2luZyIsIkRJU0FCTEVfUkVEVVhfTE9HR0lORyIsImRpc2FibGVBdXRvU3RhcnQiLCJESVNBQkxFX0FVVE9fU1RBUlQiLCJtYWlsZ3VuQXBpS2V5IiwiTUFJTEdVTl9BUElfS0VZIiwibWFpbGd1bkRvbWFpbiIsIk1BSUxHVU5fRE9NQUlOIiwiYmFzZVVybCIsIkJBU0VfVVJMIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ0aHJvdyIsInJldHVybiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsIl90aGlzIiwiYXhpb3NfMSIsIm5vdGlmaWNhdGlvbnNBY3Rpb25zXzEiLCJBRERfQ0hBTk5FTFMiLCJTRVRfQ0hBTk5FTF9GRVRDSElOR19ORVdfTUVTU0FHRVMiLCJTRVRfQ0hBTk5FTF9IQVNfTU9SRV9NRVNTQUdFUyIsIkFERF9SRUNFSVZFRF9DSEFOTkVMX01FU1NBR0UiLCJBRERfUkVUUklFVkVEX0NIQU5ORUxfTUVTU0FHRVMiLCJJTkNSRU1FTlRfQ0hBTk5FTF9SRVRSSUVWRV9NRVNTQUdFU19PRkZTRVQiLCJSRVRSSUVWRV9DSEFOTkVMX01FU1NBR0VTIiwiQ0xFQVJfQ0hBTk5FTFNfREFUQSIsImFkZENoYW5uZWxzIiwiY2hhbm5lbE5hbWVzIiwiY2hhbm5lbHMiLCJmb3JFYWNoIiwibWVzc2FnZXMiLCJyZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0IiwiaGFzTW9yZU1lc3NhZ2VzIiwiZmV0Y2hpbmdOZXdNZXNzYWdlcyIsImluY3JlbWVudENoYW5uZWxSZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0IiwiY2hhbm5lbCIsImluY3JlbWVudCIsInNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzIiwiaXNGZXRjaGluZyIsImNoYW5uZWxOYW1lIiwic2V0Q2hhbm5lbEhhc01vcmVNZXNzYWdlcyIsImhhc01vcmUiLCJhZGRSZWNlaXZlZENoYW5uZWxNZXNzYWdlIiwibWVzc2FnZSIsImFkZFJldHJpZXZlZENoYW5uZWxNZXNzYWdlcyIsImNsZWFyQ2hhbm5lbHNEYXRhIiwiZmV0Y2hDaGFubmVscyIsImRpc3BhdGNoIiwicmVzIiwibWFwIiwiZXJyIiwicmV0cmlldmVDaGFubmVsTWVzc2FnZXMiLCJnZXRTdGF0ZSIsIl9hIiwiZmluZCIsImRlbGV0ZUNoYW5uZWwiLCJyZXNwb25zZSIsImFkZENoYW5uZWwiLCJwb3N0Iiwic2VydmVyXzEiLCJhcHAiLCJVc2VyXzEiLCJkcm9wQWxsQ29sbGVjdGlvbnMiLCJkZWxldGVNYW55IiwiY29uc29sZSIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJFcnJvciIsImJlZm9yZSIsImxvZyIsInZlcnNpb24iLCJjb25uIiwib24iLCJiZWZvcmVFYWNoIiwiYWZ0ZXIiLCJjbG9zZSIsImNoYW5uZWxzQWN0aW9uc18xIiwiU0VUX0FVVEhPUklaRUQiLCJTRVRfVVNFUiIsIkxPR09VVF9VU0VSIiwiU0VUX0pXVCIsInNldEF1dGhvcml6ZWQiLCJhdXRob3JpemVkIiwic2V0VXNlciIsInVzZXIiLCJsb2dvdXRVc2VyIiwic2V0Snd0IiwidG9rZW4iLCJsb2dvdXQiLCJ1cGRhdGVOYW1lIiwib25TdWNjZXNzIiwidXBkYXRlRW1haWwiLCJ1cGRhdGVQYXNzd29yZCIsIm9sZFBhc3MiLCJuZXdQYXNzIiwiY3JlYXRlVXNlciIsImVkaXRVc2VyIiwib3JpZ2luYWxFbWFpbCIsIm5ld05hbWUiLCJuZXdFbWFpbCIsIm5ld1JvbGUiLCJwdXQiLCJkZWxldGVVc2VyIiwibWV0aG9kIiwidXJsIiwicmVzdG9yZVVzZXIiLCJpbyIsIklOSVRfV0VCU09DS0VUIiwiU0VUX1NPQ0tFVF9DT05ORUNURUQiLCJTRVRfU09DS0VUX0NPTk5FQ1RFRF9VU0VSUyIsImluaXRXZWJzb2NrZXQiLCJzZXRTb2NrZXRDb25uZWN0ZWQiLCJjb25uZWN0ZWQiLCJzZXRTb2NrZXRDb25uZWN0ZWRVc2VycyIsInVzZXJFbWFpbHMiLCJpbml0Iiwic29ja2V0IiwiaWQiLCJVUERBVEVfQ0hBVF9VU0VSUyIsIkFERF9DSEFUX1VTRVIiLCJSRU1PVkVfQ0hBVF9VU0VSIiwidXBkYXRlVXNlcnMiLCJ1c2VycyIsImFkZFVzZXIiLCJyZW1vdmVVc2VyIiwiZmV0Y2hBbGxVc2VycyIsInUiLCJjcmVhdGVOZXdVc2VyIiwianNvbndlYnRva2VuXzEiLCJyZXEiLCJzZXNzaW9uIiwiaGVhZGVycyIsInN0YXR1cyIsImpzb24iLCJ2ZXJpZnkiLCJkZWNvZGVkIiwic2VuZCIsIm1lc3NhZ2VTY2hlbWEiLCJ0ZXh0IiwidXNlckVtYWlsIiwiTWVzc2FnZSIsIlRPR0dMRV9TSURFQkFSX09QRU4iLCJ0b2dnbGVTaWRlYmFyT3BlbiIsIl9fZGlybmFtZSIsImh0dHAiLCJleHByZXNzIiwicGF0aCIsIm1vbmdvb3NlIiwiY3NyZiIsImNvb2tpZVBhcnNlciIsImJvZHlQYXJzZXIiLCJiY3J5cHQiLCJoZWxtZXQiLCJjb21wcmVzc2lvbiIsIm11c3RhY2hlRXhwcmVzcyIsIk1vbmdvU3RvcmUiLCJyb3V0ZXNfMSIsImluZGV4XzEiLCJzZXJ2ZXIiLCJzb2NrZXRTZXJ2ZXIiLCJlbmdpbmUiLCJzZXQiLCJ1c2UiLCJzZXNzaW9uTWlkZGxld2FyZSIsImNvb2tpZSIsIm1heEFnZSIsInNhbWVTaXRlIiwic2VjdXJlIiwiaHR0cE9ubHkiLCJzYXZlVW5pbml0aWFsaXplZCIsInJlc2F2ZSIsInN0b3JlIiwibW9uZ29vc2VDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsImNzcmZNaWRkbGV3YXJlIiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsImV4aXQiLCJjc3JmVG9rZW4iLCJkYiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInN0YXRpYyIsImF1dGhlbnRpY2F0ZSIsImNvbXBhcmVTeW5jIiwidXNlckRldGFpbHMiLCJpc3N1ZU5ld1Rva2VuIiwic2lnbiIsImV4cGlyZXNJbiIsInNldEhlYWRlciIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsImVtaXQiLCJhdXRob3JpemVkXzEiLCJhZG1pbl8xIiwiYXV0aENvbnRyb2xsZXJfMSIsInVzZXJDb250cm9sbGVyXzEiLCJtZXNzYWdlQ29udHJvbGxlcl8xIiwiY2hhbm5lbENvbnRyb2xsZXJfMSIsInJlbmRlciIsImxvZ2luIiwicmVnaXN0ZXIiLCJ2ZXJpZnlFbWFpbCIsInVzZXJCeUVtYWlsIiwicmVzZXRQYXNzd29yZCIsInZhbGlkYXRvcl8xIiwiYmNyeXB0anNfMSIsImlzRW1wdHkiLCJlbmQiLCJpc0VtYWlsIiwic3VjY2VzcyIsImNvdW50RG9jdW1lbnRzIiwiZXhlYyIsImNvdW50IiwicGFzc3dvcmRIYXNoIiwiaGFzaFN5bmMiLCJlbWFpbFZlcmlmaWVkIiwic2F2ZSIsInNlbGVjdCIsInBhcmFtcyIsIl9pZCIsImNyZWF0ZWQiLCJjcmVhdGVkQXQiLCJhc3NpZ24iLCJNZXNzYWdlXzEiLCJza2lwIiwicGFyc2VJbnQiLCJvZmZlc3QiLCJzb3J0IiwibGltaXQiLCJyZXZlcnNlIiwiQ2hhbm5lbF8xIiwiZGVsZXRlIiwiY2hhbm5lbFNjaGVtYSIsIkNoYW5uZWwiLCJzb2NrZXRpbyIsImNvbm5lY3RlZFVzZXJFbWFpbHMiLCJyZXF1ZXN0Iiwic3BsaWNlIiwiaW5kZXhPZiIsImNoYWlfMSIsInNvY2tldGlvY2xpZW50Iiwic3RvcmVfMSIsInJlZHV4XzEiLCJ1c2VyQWN0aW9uc18xIiwic2lkZWJhckFjdGlvbnNfMSIsInNvY2tldEFjdGlvbnNfMSIsImNoYXRVc2Vyc0FjdGlvbnNfMSIsImdldFN0b3JlIiwiY3JlYXRlU3RvcmUiLCJyb290UmVkdWNlciIsIm1pZGRsZXdhcmUiLCJkZXNjcmliZSIsIml0IiwiYXNzZXJ0IiwiaXNGYWxzZSIsImlzVHJ1ZSIsInN0cmljdEVxdWFsIiwiYzAiLCJjMSIsImMyIiwiZGVlcFN0cmljdEVxdWFsIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwiZ2VuZXJhbE1lc3NhZ2VzIiwicmFuZG9tTWVzc2FnZXMiLCJvdGhlck1lc3NhZ2VzIiwiY2hhbm5lbFN0YXRlIiwiY29uY2F0Iiwibm90aWZpY2F0aW9ucyIsImVycm9ycyIsImluZm9zIiwic2lkZWJhciIsIm9wZW4iLCJlbWFpbHMiLCJjaGF0VXNlcnMiLCJ0ZXN0QHRlc3QuY29tIiwidGVzdDJAdGVzdC5jb20iLCJ0ZXN0M0B0ZXN0LmNvbSIsInJlZHV4X3RodW5rXzEiLCJyZWR1eF9sb2dnZXJfMSIsInVzZXJfMSIsImNoYW5uZWxzXzEiLCJub3RpZmljYXRpb25zXzEiLCJzaWRlYmFyXzEiLCJzb2NrZXRfMSIsImNoYXRVc2Vyc18xIiwiY29tYmluZVJlZHVjZXJzIiwiYXBwbHlNaWRkbGV3YXJlIiwiY3JlYXRlTG9nZ2VyIiwiaW5pdGlhbFN0YXRlIiwiand0Iiwic3RhdGUiLCJhY3Rpb24iLCJjaGFubmVsRXhpc3RzIiwiY2hhbm5lbF8xIiwiaW5jcmVtZW50XzEiLCJjaGFubmVsXzIiLCJoYXNNb3JlXzEiLCJyZXRyaWV2ZWRNZXNzYWdlc18xIiwiY2hhbm5lbE5hbWVfMSIsInJlY2VpdmVkTWVzc2FnZV8xIiwiY2hhbm5lbE5hbWVfMiIsIm5ld0Vycm9yc0FycmF5Iiwic2xpY2UiLCJuZXdJbmZvc0FycmF5IiwiYXhpb3NfbW9ja19hZGFwdGVyXzEiLCJyZWR1eF9tb2NrX3N0b3JlXzEiLCJtb2NrU3RvcmVDcmVhdG9yIiwibW9ja1N0b3JlIiwibW9ja0F4aW9zIiwicmVzdG9yZSIsInJlc2V0Iiwib25BbnkiLCJyZXBseSIsImFjdGlvbnMiLCJnZXRBY3Rpb25zIiwib25Qb3N0IiwidXBkYXRlZCIsIm9uR2V0IiwiYWRkQ2hhbm5lbHNBY3Rpb24iLCJlcnJvckFjdGlvbiIsIm1zZyIsInNldEZldGNoaW5nVHJ1ZUFjdGlvbiIsInNldEZldGNoaW5nRmFsc2VBY3Rpb24iLCJzZXRIYXNNb3JlQWN0aW9uIiwiaW5jcmVtZW50T2Zmc2V0QWN0aW9uIiwiYWRkTWVzc2FnZXNBY3Rpb24iLCJhZGRJbmZvQWN0aW9uIiwiYWRkRXJyb3JBY3Rpb24iLCJ1c2Vyc1Jlc3BvbnNlIiwidXBkYXRlVXNlcnNBY3Rpb24iLCJfXzEiLCJleHBlY3QiLCJKU09OIiwicGFyc2UiLCJmYWlsIiwidGVzdFNlc3Npb24iLCJ1c2VySW5mbyIsImlzTm90TnVsbCIsImlzU3RyaW5nIiwiaXNOb3RFbXB0eSIsIm5vdFByb3BlcnR5IiwiaW5jbHVkZSIsImhhc0FsbEtleXMiLCJuZXdVc2VyIiwiZGVlcEluY2x1ZGUiLCJuZXdVc2VySW5mbyIsImluYWN0aXZlVXNlciJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFB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Q0E2TCxFQUFBYyxPQUFBQyxRQUFBM0ssRUFBQTdKLFNBQ0FrRSxVQUlBb1EsR0FBQSwrQ0FBQXBRLEdBQ0FvUCxFQUFBZ0csRUFBQWhSLEtBQ0F3QyxJQUFBLHdCQUNBNEQsSUFBQSxpQkFBQTFFLEdBQ0FpRCxLQUFBLENBQXVCeE4sTUFBQSwwQkFDdkI4WixPQUFBLElBQUFyVixLQUVBb1EsR0FBQSx5Q0FBQXBRLEdBQ0FvUCxFQUFBZ0csRUFBQWhSLEtBQ0F3QyxJQUFBLHdCQUNBNEQsSUFBQSxpQkFBQTFFLEdBQ0FpRCxLQUFBLENBQXVCeE4sTUFBQSxvQkFDdkI4WixPQUFBLElBQUFyVixLQUVBb1EsR0FBQSw4REFBQXBRLEdBQ0EsSUFBQXFFLEVBQUEsU0FDQTNLLEtBQUEsT0FDQTZCLE1BQUEsc0JBQ0FJLFNBQUEwUixFQUFBUyxTQUFBLFlBQ0FsUyxLQUFBLFNBRUFvUyxLQUFBLFNBQUF0SyxFQUFBaUMsR0FDQSxHQUFBakMsRUFDQSxPQUFBMUQsRUFBQTBELEdBQ0EwTCxFQUFBZ0csRUFBQWhSLEtBQ0FGLEtBQUEsaUJBQ0E2RSxLQUFBLENBQTJCeE4sTUFBQSxzQkFBQUksU0FBQSxhQUMzQjBaLE9BQUEsS0FDQTlILElBQUEsU0FBQTdKLEVBQUFGLEdBQ0FzQyxFQUFBdEMsRUFBQXhKLElBQUEsa0JBQ0FvVixFQUFBZ0csRUFBQWhSLEtBQ0F3QyxJQUFBLHdCQUNBNEQsSUFBQSxpQkFBQTFFLEdBQ0F1UCxPQUFBLElBQUFyVixTQUlBb1EsR0FBQSw2Q0FBQXBRLEdBQ0FvUCxFQUFBZ0csRUFBQWhSLEtBQ0F3QyxJQUFBLHdCQUNBbUMsS0FBQSxDQUF1QnhOLE1BQUEsb0JBQ3ZCOFosT0FBQSxJQUFBclYiLCJmaWxlIjoiYWxsLXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIG1vbmdvb3NlXzEgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XG47XG52YXIgdXNlclNjaGVtYSA9IG5ldyBtb25nb29zZV8xLlNjaGVtYSh7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGVtYWlsOiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGxvd2VyY2FzZTogdHJ1ZVxuICAgIH0sXG4gICAgcGFzc3dvcmQ6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgcm9sZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBsb3dlcmNhc2U6IHRydWUsXG4gICAgICAgIFwiZW51bVwiOiBbJ2FkbWluJywgJ3VzZXInXVxuICAgIH0sXG4gICAgZGVsZXRlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICB9LFxuICAgIHZlcmlmaWVkOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZSxcbiAgICB9LFxufSwge1xuICAgIHRpbWVzdGFtcHM6IHRydWVcbn0pO1xudXNlclNjaGVtYS5zdGF0aWNzLmZpbmRCeUVtYWlsID0gZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IGVtYWlsOiBlbWFpbCB9KTtcbn07XG52YXIgVXNlciA9IG1vbmdvb3NlXzEubW9kZWwoJ1VzZXInLCB1c2VyU2NoZW1hKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gVXNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVZYTmxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMM055WXk5elpYSjJaWEl2Ylc5a1pXeHpMMVZ6WlhJdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4eFEwRkJPRVU3UVVGWk4wVXNRMEZCUXp0QlFVMUdMRWxCUVUwc1ZVRkJWU3hIUVVGWExFbEJRVWtzYVVKQlFVMHNRMEZCUXp0SlFVTnNReXhKUVVGSkxFVkJRVVVzVFVGQlRUdEpRVU5hTEV0QlFVc3NSVUZCUlR0UlFVTklMRkZCUVZFc1JVRkJSU3hKUVVGSk8xRkJRMlFzU1VGQlNTeEZRVUZGTEUxQlFVMDdVVUZEV2l4VFFVRlRMRVZCUVVVc1NVRkJTVHRMUVVOc1FqdEpRVU5FTEZGQlFWRXNSVUZCUlR0UlFVTk9MRWxCUVVrc1JVRkJSU3hOUVVGTk8xRkJRMW9zVVVGQlVTeEZRVUZGTEVsQlFVazdTMEZEYWtJN1NVRkRSQ3hKUVVGSkxFVkJRVVU3VVVGRFJpeEpRVUZKTEVWQlFVVXNUVUZCVFR0UlFVTmFMRkZCUVZFc1JVRkJSU3hKUVVGSk8xRkJRMlFzVTBGQlV5eEZRVUZGTEVsQlFVazdVVUZEWml4TlFVRkpMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeERRVUZETzB0QlF6RkNPMGxCUTBRc1QwRkJUeXhGUVVGRk8xRkJRMHdzU1VGQlNTeEZRVUZGTEU5QlFVODdVVUZEWWl4VFFVRlBMRVZCUVVVc1MwRkJTenRMUVVOcVFqdEpRVU5FTEZGQlFWRXNSVUZCUlR0UlFVTk9MRWxCUVVrc1JVRkJSU3hQUVVGUE8xRkJRMklzVTBGQlR5eEZRVUZGTEV0QlFVczdTMEZEYWtJN1EwRkRTaXhGUVVGRk8wbEJRME1zVlVGQlZTeEZRVUZGTEVsQlFVazdRMEZEYmtJc1EwRkJReXhEUVVGRE8wRkJSVWdzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1ZVRkJWU3hMUVVGaE8wbEJRM0JFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoRExFTkJRVU1zUTBGQlFUdEJRVVZFTEVsQlFVMHNTVUZCU1N4SFFVRmxMR2RDUVVGTExFTkJRVzlDTEUxQlFVMHNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOMFJTeHhRa0ZCWlN4SlFVRkpMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkFERF9FUlJPUiA9ICdBRERfRVJST1InO1xuZXhwb3J0cy5SRU1PVkVfRVJST1IgPSAnUkVNT1ZFX0VSUk9SJztcbmV4cG9ydHMuQ0xFQVJfRVJST1JTID0gJ0NMRUFSX0VSUk9SUyc7XG5leHBvcnRzLkFERF9JTkZPID0gJ0FERF9JTkZPJztcbmV4cG9ydHMuUkVNT1ZFX0lORk8gPSAnUkVNT1ZFX0lORk8nO1xuZXhwb3J0cy5DTEVBUl9JTkZPUyA9ICdDTEVBUl9JTkZPUyc7XG5leHBvcnRzLmFkZEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5BRERfRVJST1IsXG4gICAgICAgIGRhdGE6IGVycm9yXG4gICAgfTtcbn07XG5leHBvcnRzLnJlbW92ZUVycm9yID0gZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlJFTU9WRV9FUlJPUixcbiAgICAgICAgZGF0YTogaVxuICAgIH07XG59O1xuZXhwb3J0cy5jbGVhckVycm9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geyB0eXBlOiBleHBvcnRzLkNMRUFSX0VSUk9SUyB9O1xufTtcbmV4cG9ydHMuYWRkSW5mbyA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5BRERfSU5GTyxcbiAgICAgICAgZGF0YTogaW5mb1xuICAgIH07XG59O1xuZXhwb3J0cy5yZW1vdmVJbmZvID0gZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlJFTU9WRV9JTkZPLFxuICAgICAgICBkYXRhOiBpXG4gICAgfTtcbn07XG5leHBvcnRzLmNsZWFySW5mb3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5DTEVBUl9JTkZPU1xuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYm05MGFXWnBZMkYwYVc5dWMwRmpkR2x2Ym5NdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZkMlZpTDJGamRHbHZibk12Ym05MGFXWnBZMkYwYVc5dWMwRmpkR2x2Ym5NdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCWVN4UlFVRkJMRk5CUVZNc1IwRkJSeXhYUVVGWExFTkJRVU03UVVGRGVFSXNVVUZCUVN4WlFVRlpMRWRCUVVjc1kwRkJZeXhEUVVGRE8wRkJRemxDTEZGQlFVRXNXVUZCV1N4SFFVRkhMR05CUVdNc1EwRkJRenRCUVVNNVFpeFJRVUZCTEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRkRUlzVVVGQlFTeFhRVUZYTEVkQlFVY3NZVUZCWVN4RFFVRkRPMEZCUXpWQ0xGRkJRVUVzVjBGQlZ5eEhRVUZITEdGQlFXRXNRMEZCUXp0QlFVVTFRaXhSUVVGQkxGRkJRVkVzUjBGQlJ5eFZRVUZETEV0QlFXRTdTVUZEYkVNc1QwRkJUenRSUVVOSUxFbEJRVWtzUlVGQlJTeHBRa0ZCVXp0UlFVTm1MRWxCUVVrc1JVRkJSU3hMUVVGTE8wdEJRMlFzUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1YwRkJWeXhIUVVGSExGVkJRVU1zUTBGQlV6dEpRVU5xUXl4UFFVRlBPMUZCUTBnc1NVRkJTU3hGUVVGRkxHOUNRVUZaTzFGQlEyeENMRWxCUVVrc1JVRkJSU3hEUVVGRE8wdEJRMVlzUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1YwRkJWeXhIUVVGSE8wbEJRM1pDTEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc2IwSkJRVmtzUlVGQlJTeERRVUZETzBGQlEyeERMRU5CUVVNc1EwRkJRVHRCUVVWWkxGRkJRVUVzVDBGQlR5eEhRVUZITEZWQlFVTXNTVUZCV1R0SlFVTm9ReXhQUVVGUE8xRkJRMGdzU1VGQlNTeEZRVUZGTEdkQ1FVRlJPMUZCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWs3UzBGRFlpeERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hWUVVGVkxFZEJRVWNzVlVGQlF5eERRVUZUTzBsQlEyaERMRTlCUVU4N1VVRkRTQ3hKUVVGSkxFVkJRVVVzYlVKQlFWYzdVVUZEYWtJc1NVRkJTU3hGUVVGRkxFTkJRVU03UzBGRFZpeERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hWUVVGVkxFZEJRVWM3U1VGRGRFSXNUMEZCVHp0UlFVTklMRWxCUVVrc1JVRkJSU3h0UWtGQlZ6dExRVU53UWl4RFFVRkRPMEZCUTA0c1EwRkJReXhEUVVGQkluMD0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJiY3J5cHRqc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBodHRwczovL2RvY3MubW9uZ29kYi5jb20vbWFudWFsL3JlZmVyZW5jZS9jb25uZWN0aW9uLXN0cmluZy9cbiAgICBtb25nb2RiQ29ubmVjdGlvblVyaTogcHJvY2Vzcy5lbnYuTU9OR09EQl9VUkksXG4gICAgbW9uZ29kYlRlc3RDb25uZWN0aW9uVXJpOiBwcm9jZXNzLmVudi5NT05HT0RCX1RFU1RfVVJJIHx8XG5cdFx0XHQgICAgICAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9vcGVuQ2hhdFRlc3QnLFxuICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgfHwgNTAwMCxcbiAgICBwcm9kdWN0aW9uOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IGZhbHNlLFxuICAgIHVzZVRlc3REYjogcHJvY2Vzcy5lbnYuVVNFX1RFU1RfREIgfHwgZmFsc2UsXG4gICAgc2VjcmV0OiBwcm9jZXNzLmVudi5TRUNSRVQgfHwgJ3NlY3JldCcsXG4gICAgZGlzYWJsZUNzcmY6IHByb2Nlc3MuZW52LkRJU0FCTEVfQ1NSRiB8fCBmYWxzZSxcbiAgICBkaXNhYmxlUmVkdXhMb2dnaW5nOiBwcm9jZXNzLmVudi5ESVNBQkxFX1JFRFVYX0xPR0dJTkcgfHwgZmFsc2UsXG4gICAgZGlzYWJsZUF1dG9TdGFydDogcHJvY2Vzcy5lbnYuRElTQUJMRV9BVVRPX1NUQVJUIHx8IGZhbHNlLFxuICAgIG1haWxndW5BcGlLZXk6IHByb2Nlc3MuZW52Lk1BSUxHVU5fQVBJX0tFWSxcbiAgICBtYWlsZ3VuRG9tYWluOiBwcm9jZXNzLmVudi5NQUlMR1VOX0RPTUFJTixcbiAgICBiYXNlVXJsOiBwcm9jZXNzLmVudi5CQVNFX1VSTCA/IHByb2Nlc3MuZW52LkJBU0VfVVJMIDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMCdcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNoYWlcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXhpb3NcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF90aGlzID0gdGhpcztcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbnZhciBub3RpZmljYXRpb25zQWN0aW9uc18xID0gcmVxdWlyZShcIi4vbm90aWZpY2F0aW9uc0FjdGlvbnNcIik7XG5leHBvcnRzLkFERF9DSEFOTkVMUyA9ICdBRERfQ0hBTk5FTFMnO1xuZXhwb3J0cy5TRVRfQ0hBTk5FTF9GRVRDSElOR19ORVdfTUVTU0FHRVMgPSAnU0VUX0NIQU5ORUxfRkVUQ0hJTkdfTkVXX01FU1NBR0VTJztcbmV4cG9ydHMuU0VUX0NIQU5ORUxfSEFTX01PUkVfTUVTU0FHRVMgPSAnU0VUX0NIQU5ORUxfSEFTX01PUkVfTUVTU0FHRSc7XG5leHBvcnRzLkFERF9SRUNFSVZFRF9DSEFOTkVMX01FU1NBR0UgPSAnQUREX1JFQ0VJVkVEX0NIQU5ORUxfTUVTU0FHRSc7XG5leHBvcnRzLkFERF9SRVRSSUVWRURfQ0hBTk5FTF9NRVNTQUdFUyA9ICdBRERfUkVUUklFVkVEX0NIQU5ORUxfTUVTU0FHRVMnO1xuZXhwb3J0cy5JTkNSRU1FTlRfQ0hBTk5FTF9SRVRSSUVWRV9NRVNTQUdFU19PRkZTRVQgPSAnSU5DUkVNRU5UX0NIQU5ORUxfUkVUUklFVkVfTUVTU0FHRVNfT0ZGU0VUJztcbmV4cG9ydHMuUkVUUklFVkVfQ0hBTk5FTF9NRVNTQUdFUyA9ICdSRVRSSUVWRV9DSEFOTkVMX01FU1NBR0VTJztcbmV4cG9ydHMuQ0xFQVJfQ0hBTk5FTFNfREFUQSA9ICdDTEVBUl9DSEFOTkVMU19EQVRBJztcbmV4cG9ydHMuYWRkQ2hhbm5lbHMgPSBmdW5jdGlvbiAoY2hhbm5lbE5hbWVzKSB7XG4gICAgdmFyIGNoYW5uZWxzID0gW107XG4gICAgY2hhbm5lbE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgY2hhbm5lbHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgcmV0cmlldmVNZXNzYWdlc09mZnNldDogMCxcbiAgICAgICAgICAgIGhhc01vcmVNZXNzYWdlczogdHJ1ZSxcbiAgICAgICAgICAgIGZldGNoaW5nTmV3TWVzc2FnZXM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuQUREX0NIQU5ORUxTLFxuICAgICAgICBkYXRhOiB7IGNoYW5uZWxzOiBjaGFubmVscyB9XG4gICAgfTtcbn07XG5leHBvcnRzLmluY3JlbWVudENoYW5uZWxSZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0ID0gZnVuY3Rpb24gKGNoYW5uZWwsIG4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLklOQ1JFTUVOVF9DSEFOTkVMX1JFVFJJRVZFX01FU1NBR0VTX09GRlNFVCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2hhbm5lbDogY2hhbm5lbCxcbiAgICAgICAgICAgIGluY3JlbWVudDogblxuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLnNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzID0gZnVuY3Rpb24gKGNoYW5uZWwsIGlzRmV0Y2hpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlNFVF9DSEFOTkVMX0ZFVENISU5HX05FV19NRVNTQUdFUyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2hhbm5lbE5hbWU6IGNoYW5uZWwsXG4gICAgICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nXG4gICAgICAgIH1cbiAgICB9O1xufTtcbmV4cG9ydHMuc2V0Q2hhbm5lbEhhc01vcmVNZXNzYWdlcyA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSwgaGFzTW9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuU0VUX0NIQU5ORUxfSEFTX01PUkVfTUVTU0FHRVMsXG4gICAgICAgIGRhdGE6IHsgY2hhbm5lbE5hbWU6IGNoYW5uZWxOYW1lLCBoYXNNb3JlOiBoYXNNb3JlIH1cbiAgICB9O1xufTtcbmV4cG9ydHMuYWRkUmVjZWl2ZWRDaGFubmVsTWVzc2FnZSA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuQUREX1JFQ0VJVkVEX0NIQU5ORUxfTUVTU0FHRSxcbiAgICAgICAgZGF0YTogeyBtZXNzYWdlOiBtZXNzYWdlLCBjaGFubmVsTmFtZTogY2hhbm5lbE5hbWUgfVxuICAgIH07XG59O1xuZXhwb3J0cy5hZGRSZXRyaWV2ZWRDaGFubmVsTWVzc2FnZXMgPSBmdW5jdGlvbiAoY2hhbm5lbE5hbWUsIG1lc3NhZ2VzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5BRERfUkVUUklFVkVEX0NIQU5ORUxfTUVTU0FHRVMsXG4gICAgICAgIGRhdGE6IHsgY2hhbm5lbE5hbWU6IGNoYW5uZWxOYW1lLCBtZXNzYWdlczogbWVzc2FnZXMgfVxuICAgIH07XG59O1xuZXhwb3J0cy5jbGVhckNoYW5uZWxzRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLkNMRUFSX0NIQU5ORUxTX0RBVEFcbiAgICB9O1xufTtcbmV4cG9ydHMuZmV0Y2hDaGFubmVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgICAgIHJldHVybiBheGlvc18xW1wiZGVmYXVsdFwiXS5nZXQoJy9hcGkvdjEvY2hhbm5lbHMnKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVscyA9IHJlcy5kYXRhLmNoYW5uZWxzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaChleHBvcnRzLmFkZENoYW5uZWxzKGNoYW5uZWxzKSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIHRyeWluZyB0byBmZXRjaCB0aGUgY2hhbm5lbHMnKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuZXhwb3J0cy5yZXRyaWV2ZUNoYW5uZWxNZXNzYWdlcyA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGFubmVsO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBjaGFubmVsID0gZ2V0U3RhdGUoKS5jaGFubmVscy5maW5kKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMubmFtZSA9PT0gY2hhbm5lbE5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbCB8fCBjaGFubmVsLmZldGNoaW5nTmV3TWVzc2FnZXMgfHwgIWNoYW5uZWwuaGFzTW9yZU1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIGZldGNoIG1lc3NhZ2VzJykpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgUHJvbWlzZS5yZXNvbHZlKCdSZXRyaWV2ZSBDaGFubmVsIE1lc3NhZ2VzIGRpc3BhdGNoZWQgd2l0aCBpbmNvcnJlY3QgY2hhbm5lbCBuYW1lIG9yIHdoaWxlIGFscmVhZHkgZmV0Y2hpbmcgbWVzc2FnZXMnKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXNwYXRjaChleHBvcnRzLnNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzKGNoYW5uZWwubmFtZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIFsyLCBheGlvc18xW1wiZGVmYXVsdFwiXS5nZXQoJy9hcGkvdjEvbWVzc2FnZXMvJyArIGNoYW5uZWwubmFtZSArICcvJyArIGNoYW5uZWwucmV0cmlldmVNZXNzYWdlc09mZnNldCkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5tZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGV4cG9ydHMuc2V0Q2hhbm5lbEhhc01vcmVNZXNzYWdlcyhjaGFubmVsLm5hbWUsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGV4cG9ydHMuaW5jcmVtZW50Q2hhbm5lbFJldHJpZXZlTWVzc2FnZXNPZmZzZXQoY2hhbm5lbE5hbWUsIHJlcy5kYXRhLm1lc3NhZ2VzLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChleHBvcnRzLmFkZFJldHJpZXZlZENoYW5uZWxNZXNzYWdlcyhjaGFubmVsLm5hbWUsIHJlcy5kYXRhLm1lc3NhZ2VzKSk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIHRyeWluZyB0byBmZXRjaCBtZXNzYWdlcycpKTtcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGV4cG9ydHMuc2V0Q2hhbm5lbEZldGNoaW5nTmV3TWVzc2FnZXMoY2hhbm5lbC5uYW1lLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG59O1xuZXhwb3J0cy5kZWxldGVDaGFubmVsID0gZnVuY3Rpb24gKGNoYW5uZWxOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gYXhpb3NfMVtcImRlZmF1bHRcIl0uZ2V0KCcvYXBpL3YxL2NoYW5uZWwvZGVsZXRlLycgKyBjaGFubmVsTmFtZSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnQ2hhbm5lbCBkZWxldGVkJykpO1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGV4cG9ydHMuZmV0Y2hDaGFubmVscygpKTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTtcbmV4cG9ydHMuYWRkQ2hhbm5lbCA9IGZ1bmN0aW9uIChjaGFubmVsTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zXzFbXCJkZWZhdWx0XCJdLnBvc3QoJy9hcGkvdjEvY2hhbm5lbC9jcmVhdGUnLCB7XG4gICAgICAgICAgICBjaGFubmVsTmFtZTogY2hhbm5lbE5hbWVcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ0NoYW5uZWwgY3JlYXRlZCcpKTtcbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaChleHBvcnRzLmZldGNoQ2hhbm5lbHMoKSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMmhoYm01bGJITkJZM1JwYjI1ekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2TGk0dmMzSmpMM2RsWWk5aFkzUnBiMjV6TDJOb1lXNXVaV3h6UVdOMGFXOXVjeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGQlFTeHBRa0U0U1VFN08wRkJOMGxCTEN0Q1FVRjVSRHRCUVVWNlJDd3JSRUZCZVVRN1FVRkZOVU1zVVVGQlFTeFpRVUZaTEVkQlFVY3NZMEZCWXl4RFFVRkRPMEZCUXpsQ0xGRkJRVUVzYVVOQlFXbERMRWRCUVVjc2JVTkJRVzFETEVOQlFVTTdRVUZEZUVVc1VVRkJRU3cyUWtGQk5rSXNSMEZCUnl3NFFrRkJPRUlzUTBGQlF6dEJRVU12UkN4UlFVRkJMRFJDUVVFMFFpeEhRVUZITERoQ1FVRTRRaXhEUVVGRE8wRkJRemxFTEZGQlFVRXNPRUpCUVRoQ0xFZEJRVWNzWjBOQlFXZERMRU5CUVVNN1FVRkRiRVVzVVVGQlFTd3dRMEZCTUVNc1IwRkJSeXcwUTBGQk5FTXNRMEZCUXp0QlFVTXhSaXhSUVVGQkxIbENRVUY1UWl4SFFVRkhMREpDUVVFeVFpeERRVUZETzBGQlEzaEVMRkZCUVVFc2JVSkJRVzFDTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU03UVVGRk5VTXNVVUZCUVN4WFFVRlhMRWRCUVVjc1ZVRkJReXhaUVVGelFqdEpRVU01UXl4SlFVRkpMRkZCUVZFc1IwRkJWU3hGUVVGRkxFTkJRVU03U1VGRGVrSXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGRExFbEJRVms3VVVGRE9VSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVOV0xFbEJRVWtzUlVGQlJTeEpRVUZKTzFsQlExWXNVVUZCVVN4RlFVRkZMRVZCUVVVN1dVRkRXaXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRPMWxCUTNwQ0xHVkJRV1VzUlVGQlJTeEpRVUZKTzFsQlEzSkNMRzFDUVVGdFFpeEZRVUZGTEV0QlFVczdVMEZETjBJc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEU0N4UFFVRlBPMUZCUTBnc1NVRkJTU3hGUVVGRkxHOUNRVUZaTzFGQlEyeENMRWxCUVVrc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVTdTMEZETDBJc1EwRkJRenRCUVVOT0xFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNjME5CUVhORExFZEJRVWNzVlVGQlF5eFBRVUZsTEVWQlFVVXNRMEZCVXp0SlFVTTNSU3hQUVVGUE8xRkJRMGdzU1VGQlNTeEZRVUZGTEd0RVFVRXdRenRSUVVOb1JDeEpRVUZKTEVWQlFVVTdXVUZEUml4UFFVRlBMRVZCUVVVc1QwRkJUenRaUVVOb1FpeFRRVUZUTEVWQlFVVXNRMEZCUXp0VFFVTm1PMHRCUTBvc1EwRkJRenRCUVVOT0xFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNOa0pCUVRaQ0xFZEJRVWNzVlVGQlF5eFBRVUZsTEVWQlFVVXNWVUZCYlVJN1NVRkRPVVVzVDBGQlR6dFJRVU5JTEVsQlFVa3NSVUZCUlN4NVEwRkJhVU03VVVGRGRrTXNTVUZCU1N4RlFVRkZPMWxCUTBZc1YwRkJWeXhGUVVGRkxFOUJRVTg3V1VGRGNFSXNWVUZCVlN4RlFVRkZMRlZCUVZVN1UwRkRla0k3UzBGRFNpeERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3g1UWtGQmVVSXNSMEZCUnl4VlFVRkRMRmRCUVcxQ0xFVkJRVVVzVDBGQlowSTdTVUZETTBVc1QwRkJUenRSUVVOSUxFbEJRVWtzUlVGQlJTeHhRMEZCTmtJN1VVRkRia01zU1VGQlNTeEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRmRCUVZjc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzB0QlEzWkVMRU5CUVVNN1FVRkRUaXhEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEhsQ1FVRjVRaXhIUVVGSExGVkJRVU1zVjBGQmJVSXNSVUZCUlN4UFFVRm5RanRKUVVNelJTeFBRVUZQTzFGQlEwZ3NTVUZCU1N4RlFVRkZMRzlEUVVFMFFqdFJRVU5zUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlN4WFFVRlhMRVZCUVVVN1MwRkRka1FzUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc01rSkJRVEpDTEVkQlFVY3NWVUZCUXl4WFFVRnRRaXhGUVVGRkxGRkJRVzFDTzBsQlEyaEdMRTlCUVU4N1VVRkRTQ3hKUVVGSkxFVkJRVVVzYzBOQlFUaENPMUZCUTNCRExFbEJRVWtzUlVGQlJTeEZRVUZETEZkQlFWY3NSVUZCUlN4WFFVRlhMRVZCUVVVc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlF6dExRVU4yUkN4RFFVRkRPMEZCUTA0c1EwRkJReXhEUVVGQk8wRkJSVmtzVVVGQlFTeHBRa0ZCYVVJc1IwRkJSenRKUVVNM1FpeFBRVUZQTzFGQlEwZ3NTVUZCU1N4RlFVRkZMREpDUVVGdFFqdExRVU0xUWl4RFFVRkJPMEZCUTB3c1EwRkJReXhEUVVGQk8wRkJTVmtzVVVGQlFTeGhRVUZoTEVkQlFVYzdTVUZEZWtJc1QwRkJUeXhWUVVGRExGRkJRV0U3VVVGRGFrSXNUMEZCVHl4clFrRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFXdENPMWxCUTNwRUxFbEJRVWtzVVVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlJTeFZRVUZETEVOQlFUaENPMmRDUVVOcVJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRiRUlzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEU0N4UFFVRlBMRkZCUVZFc1EwRkJReXh0UWtGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNME1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1ZVRkJReXhIUVVGbE8xbEJRM0pDTEU5QlFVOHNVVUZCVVN4RFFVRkRMQ3RDUVVGUkxFTkJRVU1zZVVSQlFYbEVMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BHTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGQk8wRkJRMHdzUTBGQlF5eERRVUZCTzBGQlJWa3NVVUZCUVN4MVFrRkJkVUlzUjBGQlJ5eFZRVUZETEZkQlFXMUNPMGxCUTNaRUxFOUJRVThzVlVGQlR5eFJRVUZoTEVWQlFVVXNVVUZCWVRzN08xbEJRMnhETEU5QlFVOHNSMEZCV1N4UlFVRlJMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZGTEZWQlFVTXNRMEZCVlR0blFrRkRlRVFzVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRmRCUVZjc1EwRkJRenRaUVVOc1F5eERRVUZETEVOQlFVTXNRMEZCUVR0WlFVTkdMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNSVUZCUlR0blFrRkRja1VzVVVGQlVTeERRVUZETEN0Q1FVRlJMRU5CUVVNc2NVUkJRWEZFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNeFJTeFhRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc2NVZEJRWEZITEVOQlFVTXNSVUZCUXp0aFFVTnFTVHRaUVVORUxGRkJRVkVzUTBGQlF5eHhRMEZCTmtJc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROVVFzVjBGQlR5eHJRa0ZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4SFFVRnJRanR2UWtGRGFFZ3NTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPM2RDUVVOb1F5eFJRVUZSTEVOQlFVTXNhVU5CUVhsQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8zZENRVU42UkN4UFFVRlBMRWRCUVVjc1EwRkJRenR4UWtGRFpEdHZRa0ZEUkN4UlFVRlJMRU5CUVVNc09FTkJRWE5ETEVOQlFVTXNWMEZCVnl4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM2hHTEZGQlFWRXNRMEZCUXl4dFEwRkJNa0lzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUVR0blFrRkRNVVVzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1ZVRkJReXhIUVVGbE8yOUNRVU55UWl4UlFVRlJMRU5CUVVNc0swSkJRVkVzUTBGQlF5eHhSRUZCY1VRc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6bEZMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEU2l4UFFVRlBMRkZCUVZFc1EwRkJReXh4UTBGQk5rSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoRkxFTkJRVU1zUTBGQlF5eEZRVUZET3p0VFFVTk9MRU5CUVVFN1FVRkRUQ3hEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEdGQlFXRXNSMEZCUnl4VlFVRkRMRmRCUVcxQ08wbEJRemRETEU5QlFVOHNWVUZCUXl4UlFVRmhPMUZCUTJwQ0xFOUJRVThzYTBKQlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc2VVSkJRWGxDTEVkQlFVY3NWMEZCVnl4RFFVRkRPMWxCUTNKRUxFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFXdENPMWxCUTNCQ0xGRkJRVkVzUTBGQlF5dzRRa0ZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlReXhQUVVGUExGRkJRVkVzUTBGQlF5eHhRa0ZCWVN4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOeVF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhWUVVGRExFZEJRV1U3V1VGRGNrSXNUMEZCVHl4UlFVRlJMRU5CUVVNc0swSkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEzWkVMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMWdzUTBGQlF5eERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hWUVVGVkxFZEJRVWNzVlVGQlF5eFhRVUZ0UWp0SlFVTXhReXhQUVVGUExGVkJRVU1zVVVGQllUdFJRVU5xUWl4UFFVRlBMR3RDUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhGUVVGRk8xbEJRM2hETEZkQlFWY3NSVUZCUlN4WFFVRlhPMU5CUXpOQ0xFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4SFFVRnJRanRaUVVOMlFpeFJRVUZSTEVOQlFVTXNPRUpCUVU4c1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja01zVDBGQlR5eFJRVUZSTEVOQlFVTXNjVUpCUVdFc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGNrTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zVlVGQlF5eEhRVUZsTzFsQlEzSkNMRTlCUVU4c1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5PTEVOQlFVTXNRMEZCUXp0QlFVTk9MRU5CUVVNc1EwRkJRU0o5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHNlcnZlcl8xID0gcmVxdWlyZShcIi4uL3NyYy9zZXJ2ZXIvc2VydmVyXCIpO1xuZXhwb3J0cy5hcHAgPSBzZXJ2ZXJfMS5hcHA7XG52YXIgVXNlcl8xID0gcmVxdWlyZShcIi4uL3NyYy9zZXJ2ZXIvbW9kZWxzL1VzZXJcIik7XG52YXIgZHJvcEFsbENvbGxlY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBVc2VyXzFbXCJkZWZhdWx0XCJdLmRlbGV0ZU1hbnkoe30sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHAudGhlbigpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kcm9wQWxsQ29sbGVjdGlvbnMgPSBkcm9wQWxsQ29sbGVjdGlvbnM7XG52YXIgTm90SW1wbGVtZW50ZWRFcnJvciA9IG5ldyBFcnJvcignVGVzdCBub3QgaW1wbGVtZW50ZWQnKTtcbmV4cG9ydHMuTm90SW1wbGVtZW50ZWRFcnJvciA9IE5vdEltcGxlbWVudGVkRXJyb3I7XG5iZWZvcmUoJ2FsbCB0ZXN0cycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgY29uc29sZS5sb2cocHJvY2Vzcy52ZXJzaW9uKTtcbiAgICBzZXJ2ZXJfMS5jb25uLm9uKCdjb25uZWN0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZXJ2ZXIgc3RhcnRlZCcpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG59KTtcbmJlZm9yZUVhY2goJ3Jlc2V0IERCJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICBkcm9wQWxsQ29sbGVjdGlvbnMoKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbmUoKTsgfSk7XG59KTtcbmFmdGVyKCdhbGwgdGVzdHMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgIGRyb3BBbGxDb2xsZWN0aW9ucygpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnQ2xvc2luZyBjb25uZWN0aW9ucycpO1xuICAgICAgICBzZXJ2ZXJfMS5jb25uLmNsb3NlKCk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KTtcbn0pO1xucmVxdWlyZSgnLi93ZWIvdGVzdFN0b3JlJyk7XG5yZXF1aXJlKCcuL3dlYi90ZXN0QXN5bmNBY3Rpb25zJyk7XG5yZXF1aXJlKCcuL3NlcnZlci90ZXN0QXV0aENvbnRyb2xsZXInKTtcbnJlcXVpcmUoJy4vc2VydmVyL3Rlc3RVc2VyQ29udHJvbGxlcicpO1xucmVxdWlyZSgnLi9zZXJ2ZXIvdGVzdE1lc3NhZ2VDb250cm9sbGVyJyk7XG5yZXF1aXJlKCcuL3NlcnZlci90ZXN0Q2hhbm5lbENvbnRyb2xsZXInKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5MFpYTjBjeTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxDdERRVUZwUkR0QlFXdEVlRU1zWTBGc1JFMHNXVUZCUnl4RFFXdEVUanRCUVdwRVdpeHJSRUZCTmtNN1FVRkZOME1zU1VGQlRTeHJRa0ZCYTBJc1IwRkJSenRKUVVOMlFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SlFVRkpMRTlCUVU4c1EwRkJReXhWUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTzFGQlEyaERMR2xDUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNSVUZCUlN4VlFVRkRMRWRCUVZFN1dVRkRla0lzU1VGQlNTeEhRVUZITzJkQ1FVRkZMRTlCUVU4c1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFsQlF6VkNMRTlCUVU4c1QwRkJUeXhGUVVGRkxFTkJRVU03VVVGRGNrSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRUaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5HTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEZWQlFVTXNSMEZCVVR0UlFVTXpRaXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlExQXNRMEZCUXl4RFFVRkJPMEZCY1VOaExHZEVRVUZyUWp0QlFXNURhRU1zU1VGQlRTeHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhEUVVGRE8wRkJiVU0xUWl4clJFRkJiVUk3UVVGcVEzSkVMRTFCUVUwc1EwRkJReXhYUVVGWExFVkJRVVVzVlVGQlV5eEpRVUZKTzBsQlJUZENMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUXpkQ0xHRkJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RlFVRkZPMUZCUTJwQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dFJRVU01UWl4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTEZWQlFWTXNTVUZCU1R0SlFVVm9ReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGTkxFOUJRVUVzU1VGQlNTeEZRVUZGTEVWQlFVNHNRMEZCVFN4RFFVRkRMRU5CUVVNN1FVRkROVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEU0N4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxGVkJRVk1zU1VGQlNUdEpRVVUxUWl4clFrRkJhMElzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjBRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03VVVGRGJrTXNZVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMklzU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlMwWXNUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdRVUZETTBJc1QwRkJUeXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRU5CUVVNN1FVRkhiRU1zVDBGQlR5eERRVUZETERaQ1FVRTJRaXhEUVVGRExFTkJRVU03UVVGRGRrTXNUMEZCVHl4RFFVRkRMRFpDUVVFMlFpeERRVUZETEVOQlFVTTdRVUZEZGtNc1QwRkJUeXhEUVVGRExHZERRVUZuUXl4RFFVRkRMRU5CUVVNN1FVRkRNVU1zVDBGQlR5eERRVUZETEdkRFFVRm5ReXhEUVVGRExFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBheGlvc18xID0gcmVxdWlyZShcImF4aW9zXCIpO1xudmFyIGNoYW5uZWxzQWN0aW9uc18xID0gcmVxdWlyZShcIi4vY2hhbm5lbHNBY3Rpb25zXCIpO1xudmFyIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi9ub3RpZmljYXRpb25zQWN0aW9uc1wiKTtcbmV4cG9ydHMuU0VUX0FVVEhPUklaRUQgPSAnU0VUX0FVVEhPUklaRUQnO1xuZXhwb3J0cy5TRVRfVVNFUiA9ICdTRVRfVVNFUic7XG5leHBvcnRzLkxPR09VVF9VU0VSID0gJ0xPR09VVF9VU0VSJztcbmV4cG9ydHMuU0VUX0pXVCA9ICdTRVRfSldUJztcbmV4cG9ydHMuc2V0QXV0aG9yaXplZCA9IGZ1bmN0aW9uIChhdXRob3JpemVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5TRVRfQVVUSE9SSVpFRCxcbiAgICAgICAgZGF0YTogYXV0aG9yaXplZFxuICAgIH07XG59O1xuZXhwb3J0cy5zZXRVc2VyID0gZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlNFVF9VU0VSLFxuICAgICAgICBkYXRhOiB1c2VyXG4gICAgfTtcbn07XG5leHBvcnRzLmxvZ291dFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZXhwb3J0cy5MT0dPVVRfVVNFUlxuICAgIH07XG59O1xuZXhwb3J0cy5zZXRKd3QgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlNFVF9KV1QsXG4gICAgICAgIGRhdGE6IHRva2VuXG4gICAgfTtcbn07XG5leHBvcnRzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgICAgIGRpc3BhdGNoKGV4cG9ydHMubG9nb3V0VXNlcigpKTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmNsZWFyQ2hhbm5lbHNEYXRhKCkpO1xuICAgIH07XG59O1xuZXhwb3J0cy51cGRhdGVOYW1lID0gZnVuY3Rpb24gKG5hbWUsIG9uU3VjY2Vzcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zXzFbXCJkZWZhdWx0XCJdLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvbmFtZScsIHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ05hbWUgdXBkYXRlZCcpKTtcbiAgICAgICAgICAgIGlmIChvblN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2UuZGF0YS5lcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nIHVwZGF0aW5nIHVzZXIgbmFtZScsIGVycik7XG4gICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gdXBkYXRlIHlvdXIgbmFtZS4nKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59O1xuZXhwb3J0cy51cGRhdGVFbWFpbCA9IGZ1bmN0aW9uIChlbWFpbCwgb25TdWNjZXNzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gYXhpb3NfMVtcImRlZmF1bHRcIl0ucG9zdCgnL2FwaS92MS91c2VyL3VwZGF0ZS9lbWFpbCcsIHtcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnRW1haWwgdXBkYXRlZCcpKTtcbiAgICAgICAgICAgIGlmIChvblN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2UuZGF0YS5lcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nIHVwZGF0aW5nIHVzZXIgZW1haWwnLCBlcnIpO1xuICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIHVwZGF0ZSB5b3VyIGVtYWlsLicpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5leHBvcnRzLnVwZGF0ZVBhc3N3b3JkID0gZnVuY3Rpb24gKG9sZFBhc3MsIG5ld1Bhc3MsIG9uU3VjY2Vzcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zXzFbXCJkZWZhdWx0XCJdLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvcGFzc3dvcmQnLCB7XG4gICAgICAgICAgICBvbGRQYXNzOiBvbGRQYXNzLFxuICAgICAgICAgICAgbmV3UGFzczogbmV3UGFzc1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnUGFzc3dvcmQgdXBkYXRlZCcpKTtcbiAgICAgICAgICAgIGlmIChvblN1Y2Nlc3MpXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzKCk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2UuZGF0YS5lcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nIHVwZGF0aW5nIHVzZXIgcGFzc3dvcmQnLCBlcnIpO1xuICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIHVwZGF0ZSB5b3VyIHBhc3N3b3JkLicpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5leHBvcnRzLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAobmFtZSwgZW1haWwsIHJvbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgICAgIHJldHVybiBheGlvc18xW1wiZGVmYXVsdFwiXS5wb3N0KCcvYXBpL3YxL3VzZXIvY3JlYXRlJywge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRJbmZvKCdOZXcgdXNlciBjcmVhdGVkJykpO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IpXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJykpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTtcbmV4cG9ydHMuZWRpdFVzZXIgPSBmdW5jdGlvbiAob3JpZ2luYWxFbWFpbCwgbmV3TmFtZSwgbmV3RW1haWwsIG5ld1JvbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgICAgIHJldHVybiBheGlvc18xW1wiZGVmYXVsdFwiXS5wdXQoJy9hcGkvdjEvdXNlci91cGRhdGUnLCB7XG4gICAgICAgICAgICBlbWFpbDogb3JpZ2luYWxFbWFpbCxcbiAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXdOYW1lLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBuZXdFbWFpbCxcbiAgICAgICAgICAgICAgICByb2xlOiBuZXdSb2xlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRJbmZvKCdDaGFuZ2VzIHNhdmVkJykpO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IpXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcihlcnIucmVzcG9uc2UuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJykpO1xuICAgICAgICB9KTtcbiAgICB9O1xufTtcbmV4cG9ydHMuZGVsZXRlVXNlciA9IGZ1bmN0aW9uIChlbWFpbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScsXG4gICAgICAgICAgICB1cmw6ICcvYXBpL3YxL3VzZXIvZGVsZXRlJyxcbiAgICAgICAgICAgIGRhdGE6IHsgZW1haWw6IGVtYWlsIH1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ1VzZXIgZGVsZXRlZCcpKTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlICYmIGVyci5yZXNwb25zZS5kYXRhLmVycm9yKVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZycpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG5leHBvcnRzLnJlc3RvcmVVc2VyID0gZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gYXhpb3NfMVtcImRlZmF1bHRcIl0ucHV0KCcvYXBpL3YxL3VzZXIvcmVzdG9yZScsIHtcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnVXNlciByZXN0b3JlZCcpKTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlICYmIGVyci5yZXNwb25zZS5kYXRhLmVycm9yKVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEuZXJyb3IpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZycpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkWE5sY2tGamRHbHZibk11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTl6Y21NdmQyVmlMMkZqZEdsdmJuTXZkWE5sY2tGamRHbHZibk11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3dyUWtGQmVVUTdRVUZGZWtRc2NVUkJRVzlFTzBGQlEzQkVMQ3RFUVVGNVJEdEJRVVUxUXl4UlFVRkJMR05CUVdNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXp0QlFVTnNReXhSUVVGQkxGRkJRVkVzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZEZEVJc1VVRkJRU3hYUVVGWExFZEJRVWNzWVVGQllTeERRVUZETzBGQlF6VkNMRkZCUVVFc1QwRkJUeXhIUVVGSExGTkJRVk1zUTBGQlF6dEJRVVZ3UWl4UlFVRkJMR0ZCUVdFc1IwRkJSeXhWUVVGRExGVkJRVzFDTzBsQlF6ZERMRTlCUVZFN1VVRkRTaXhKUVVGSkxFVkJRVVVzYzBKQlFXTTdVVUZEY0VJc1NVRkJTU3hGUVVGRkxGVkJRVlU3UzBGRGJrSXNRMEZCUXp0QlFVTk9MRU5CUVVNc1EwRkJRVHRCUVVWWkxGRkJRVUVzVDBGQlR5eEhRVUZITEZWQlFVTXNTVUZCWlR0SlFVTnVReXhQUVVGUE8xRkJRMGdzU1VGQlNTeEZRVUZGTEdkQ1FVRlJPMUZCUTJRc1NVRkJTU3hGUVVGRkxFbEJRVWs3UzBGRFlpeERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hWUVVGVkxFZEJRVWM3U1VGRGRFSXNUMEZCVHp0UlFVTklMRWxCUVVrc1JVRkJSU3h0UWtGQlZ6dExRVU53UWl4RFFVRkRPMEZCUTA0c1EwRkJReXhEUVVGQk8wRkJSVmtzVVVGQlFTeE5RVUZOTEVkQlFVY3NWVUZCUXl4TFFVRmhPMGxCUTJoRExFOUJRVTg3VVVGRFNDeEpRVUZKTEVWQlFVVXNaVUZCVHp0UlFVTmlMRWxCUVVrc1JVRkJSU3hMUVVGTE8wdEJRMlFzUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1RVRkJUU3hIUVVGSE8wbEJRMnhDTEU5QlFVOHNWVUZCUXl4UlFVRmhPMUZCUTJwQ0xGRkJRVkVzUTBGQlF5eHJRa0ZCVlN4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMlFpeFBRVUZQTEZGQlFWRXNRMEZCUXl4dFEwRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEZWtNc1EwRkJReXhEUVVGQk8wRkJSVXdzUTBGQlF5eERRVUZCTzBGQlIxa3NVVUZCUVN4VlFVRlZMRWRCUVVjc1ZVRkJReXhKUVVGWkxFVkJRVVVzVTBGQmIwSTdTVUZEZWtRc1QwRkJUeXhWUVVGRExGRkJRV0U3VVVGRGFrSXNUMEZCVHl4clFrRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSVHRaUVVNeFF5eEpRVUZKTEVWQlFVVXNTVUZCU1R0VFFVTmlMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eEhRVUZyUWp0WlFVTjJRaXhSUVVGUkxFTkJRVU1zT0VKQlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMnhETEVsQlFVa3NVMEZCVXp0blFrRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU12UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eFZRVUZETEVkQlFXVTdXVUZEY2tJc1NVRkJTU3hIUVVGSExFTkJRVU1zVVVGQlVTeEpRVUZKTEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXM3WjBKQlEzWkRMRTlCUVU4c1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEhsRFFVRjVReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlF6VkVMRkZCUVZFc1EwRkJReXdyUWtGQlVTeERRVUZETEhkRVFVRjNSQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUml4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU1zUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1YwRkJWeXhIUVVGSExGVkJRVU1zUzBGQllTeEZRVUZGTEZOQlFXOUNPMGxCUXpORUxFOUJRVThzVlVGQlF5eFJRVUZoTzFGQlEycENMRTlCUVU4c2EwSkJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVU3V1VGRE0wTXNTMEZCU3l4RlFVRkZMRXRCUVVzN1UwRkRaaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNSMEZCYTBJN1dVRkRka0lzVVVGQlVTeERRVUZETERoQ1FVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4SlFVRkpMRk5CUVZNN1owSkJRVVVzVTBGQlV5eEZRVUZGTEVOQlFVTTdVVUZETDBJc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlN5eERRVUZCTEVOQlFVTXNWVUZCUXl4SFFVRmxPMWxCUTNKQ0xFbEJRVWtzUjBGQlJ5eERRVUZETEZGQlFWRXNTVUZCU1N4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTzJkQ1FVTjJReXhQUVVGUExGRkJRVkVzUTBGQlF5d3JRa0ZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRka1FzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl3d1EwRkJNRU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTTNSQ3hSUVVGUkxFTkJRVU1zSzBKQlFWRXNRMEZCUXl4NVJFRkJlVVFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVZc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETEVOQlFVTTdRVUZEVGl4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxHTkJRV01zUjBGQlJ5eFZRVUZETEU5QlFXVXNSVUZCUlN4UFFVRmxMRVZCUVVVc1UwRkJiMEk3U1VGRGFrWXNUMEZCVHl4VlFVRkRMRkZCUVdFN1VVRkRha0lzVDBGQlR5eHJRa0ZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXc0UWtGQk9FSXNSVUZCUlR0WlFVTTVReXhQUVVGUExFVkJRVVVzVDBGQlR6dFpRVU5vUWl4UFFVRlBMRVZCUVVVc1QwRkJUenRUUVVOdVFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVNc1IwRkJhMEk3V1VGRGRrSXNVVUZCVVN4RFFVRkRMRGhDUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM1JETEVsQlFVa3NVMEZCVXp0blFrRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU12UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eFZRVUZETEVkQlFXVTdXVUZEY2tJc1NVRkJTU3hIUVVGSExFTkJRVU1zVVVGQlVTeEpRVUZKTEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXM3WjBKQlEzWkRMRTlCUVU4c1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETERaRFFVRTJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEyaEZMRkZCUVZFc1EwRkJReXdyUWtGQlVTeERRVUZETERSRVFVRTBSQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU55Uml4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU1zUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1ZVRkJWU3hIUVVGSExGVkJRVU1zU1VGQldTeEZRVUZGTEV0QlFXRXNSVUZCUlN4SlFVRlpPMGxCUTJoRkxFOUJRVThzVlVGQlF5eFJRVUZoTzFGQlEycENMRTlCUVU4c2EwSkJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVU3V1VGRGNrTXNTVUZCU1N4RlFVRkZMRWxCUVVrN1dVRkRWaXhMUVVGTExFVkJRVVVzUzBGQlN6dFpRVU5hTEVsQlFVa3NSVUZCUlN4SlFVRkpPMU5CUTJJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFXdENPMWxCUTNaQ0xGRkJRVkVzUTBGQlF5dzRRa0ZCVHl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZMTEVOQlFVRXNRMEZCUXl4VlFVRkRMRWRCUVZFN1dVRkRaQ3hKUVVGSkxFZEJRVWNzUTBGQlF5eFJRVUZSTEVsQlFVa3NSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN6dG5Ra0ZEZGtNc1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXpzN1owSkJSVFZETEZGQlFWRXNRMEZCUXl3clFrRkJVU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOdVJDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNc1EwRkJRenRCUVVOT0xFTkJRVU1zUTBGQlF6dEJRVVZYTEZGQlFVRXNVVUZCVVN4SFFVRkhMRlZCUVVNc1lVRkJjVUlzUlVGQlJTeFBRVUZuUWl4RlFVRkZMRkZCUVdsQ0xFVkJRVVVzVDBGQlowSTdTVUZEYWtjc1QwRkJUeXhWUVVGRExGRkJRV0U3VVVGRGFrSXNUMEZCVHl4clFrRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRaUVVOd1F5eExRVUZMTEVWQlFVVXNZVUZCWVR0WlFVTndRaXhKUVVGSkxFVkJRVVU3WjBKQlEwWXNTVUZCU1N4RlFVRkZMRTlCUVU4N1owSkJRMklzUzBGQlN5eEZRVUZGTEZGQlFWRTdaMEpCUTJZc1NVRkJTU3hGUVVGRkxFOUJRVTg3WVVGRGFFSTdVMEZEU2l4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVU1zUjBGQmEwSTdXVUZEZGtJc1VVRkJVU3hEUVVGRExEaENRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOMlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhWUVVGRExFZEJRVkU3V1VGRFpDeEpRVUZKTEVkQlFVY3NRMEZCUXl4UlFVRlJMRWxCUVVrc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkRka01zVVVGQlVTeERRVUZETEN0Q1FVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenM3WjBKQlJUVkRMRkZCUVZFc1EwRkJReXdyUWtGQlVTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU51UkN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU1zUTBGQlF6dEJRVU5PTEVOQlFVTXNRMEZCUXp0QlFVVlhMRkZCUVVFc1ZVRkJWU3hIUVVGSExGVkJRVU1zUzBGQllUdEpRVU53UXl4UFFVRlBMRlZCUVVNc1VVRkJZVHRSUVVkcVFpeFBRVUZQTEd0Q1FVRkxMRU5CUVVNN1dVRkRWQ3hOUVVGTkxFVkJRVVVzVVVGQlVUdFpRVU5vUWl4SFFVRkhMRVZCUVVVc2NVSkJRWEZDTzFsQlF6RkNMRWxCUVVrc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdVMEZEZWtJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFXdENPMWxCUTNaQ0xGRkJRVkVzUTBGQlF5dzRRa0ZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRFTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zVlVGQlF5eEhRVUZSTzFsQlEyUXNTVUZCU1N4SFFVRkhMRU5CUVVNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzN1owSkJRM1pETEZGQlFWRXNRMEZCUXl3clFrRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03TzJkQ1FVVTFReXhSUVVGUkxFTkJRVU1zSzBKQlFWRXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYmtRc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETEVOQlFVTTdRVUZEVGl4RFFVRkRMRU5CUVVNN1FVRkZWeXhSUVVGQkxGZEJRVmNzUjBGQlJ5eFZRVUZETEV0QlFXRTdTVUZEY2tNc1QwRkJUeXhWUVVGRExGRkJRV0U3VVVGRGFrSXNUMEZCVHl4clFrRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eHpRa0ZCYzBJc1JVRkJSVHRaUVVOeVF5eExRVUZMTEVWQlFVVXNTMEZCU3p0VFFVTm1MRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eEhRVUZyUWp0WlFVTjJRaXhSUVVGUkxFTkJRVU1zT0VKQlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM1pETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExGVkJRVU1zUjBGQlVUdFpRVU5rTEVsQlFVa3NSMEZCUnl4RFFVRkRMRkZCUVZFc1NVRkJTU3hIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxPMmRDUVVOMlF5eFJRVUZSTEVOQlFVTXNLMEpCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE96dG5Ra0ZGTlVNc1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyNUVMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF5eERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGlvID0gcmVxdWlyZShcInNvY2tldC5pby1jbGllbnRcIik7XG5leHBvcnRzLklOSVRfV0VCU09DS0VUID0gJ0lOSVRfV0VCU09DS0VUJztcbmV4cG9ydHMuU0VUX1NPQ0tFVF9DT05ORUNURUQgPSAnU0VUX1NPQ0tFVF9DT05ORUNURUQnO1xuZXhwb3J0cy5TRVRfU09DS0VUX0NPTk5FQ1RFRF9VU0VSUyA9ICdTRVRfU09DS0VUX0NPTk5FQ1RFRF9VU0VSUyc7XG5leHBvcnRzLmluaXRXZWJzb2NrZXQgPSBmdW5jdGlvbiAoaW8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLklOSVRfV0VCU09DS0VULFxuICAgICAgICBkYXRhOiB7IGlvOiBpbyB9XG4gICAgfTtcbn07XG5leHBvcnRzLnNldFNvY2tldENvbm5lY3RlZCA9IGZ1bmN0aW9uIChjb25uZWN0ZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlNFVF9TT0NLRVRfQ09OTkVDVEVELFxuICAgICAgICBkYXRhOiB7IGNvbm5lY3RlZDogY29ubmVjdGVkIH1cbiAgICB9O1xufTtcbmV4cG9ydHMuc2V0U29ja2V0Q29ubmVjdGVkVXNlcnMgPSBmdW5jdGlvbiAodXNlckVtYWlscykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuU0VUX1NPQ0tFVF9DT05ORUNURURfVVNFUlMsXG4gICAgICAgIGRhdGE6IHsgdXNlckVtYWlsczogdXNlckVtYWlscyB9XG4gICAgfTtcbn07XG5leHBvcnRzLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUpIHtcbiAgICAgICAgdmFyIHNvY2tldCA9IGlvKCk7XG4gICAgICAgIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGV4cG9ydHMuc2V0U29ja2V0Q29ubmVjdGVkKHRydWUpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhdXRob3JpemVkIFsnICsgc29ja2V0LmlkICsgJ10nKTtcbiAgICAgICAgICAgIHNvY2tldC5vbignY29ubmVjdGVkIHVzZXJzJywgZnVuY3Rpb24gKHVzZXJFbWFpbHMpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChleHBvcnRzLnNldFNvY2tldENvbm5lY3RlZFVzZXJzKHVzZXJFbWFpbHMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc29ja2V0Lm9uKCdkaXNjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goZXhwb3J0cy5zZXRTb2NrZXRDb25uZWN0ZWQoZmFsc2UpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEaXNjb25uZWN0ZWQgZnJvbSB3ZWJzb2NrZXQgc2VydmVyLCBhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGV4cG9ydHMuaW5pdFdlYnNvY2tldChzb2NrZXQpKTtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyOWphMlYwUVdOMGFXOXVjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMM055WXk5M1pXSXZZV04wYVc5dWN5OXpiMk5yWlhSQlkzUnBiMjV6TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzY1VOQlFYVkRPMEZCU3pGQ0xGRkJRVUVzWTBGQll5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8wRkJRMnhETEZGQlFVRXNiMEpCUVc5Q0xFZEJRVWNzYzBKQlFYTkNMRU5CUVVNN1FVRkRPVU1zVVVGQlFTd3dRa0ZCTUVJc1IwRkJSeXcwUWtGQk5FSXNRMEZCUXp0QlFVVXhSQ3hSUVVGQkxHRkJRV0VzUjBGQlJ5eFZRVUZETEVWQlFYbENPMGxCUTI1RUxFOUJRVTg3VVVGRFNDeEpRVUZKTEVWQlFVVXNjMEpCUVdNN1VVRkRjRUlzU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSVHRMUVVOdVFpeERRVUZETzBGQlEwNHNRMEZCUXl4RFFVRkJPMEZCUlZrc1VVRkJRU3hyUWtGQmEwSXNSMEZCUnl4VlFVRkRMRk5CUVd0Q08wbEJRMnBFTEU5QlFVODdVVUZEU0N4SlFVRkpMRVZCUVVVc05FSkJRVzlDTzFGQlF6RkNMRWxCUVVrc1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFRRVUZUTEVWQlFVVTdTMEZEYWtNc1EwRkJRVHRCUVVOTUxFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNkVUpCUVhWQ0xFZEJRVWNzVlVGQlF5eFZRVUZ2UWp0SlFVTjRSQ3hQUVVGUE8xRkJRMGdzU1VGQlNTeEZRVUZGTEd0RFFVRXdRanRSUVVOb1F5eEpRVUZKTEVWQlFVVXNSVUZCUlN4VlFVRlZMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wdEJRMjVETEVOQlFVRTdRVUZEVEN4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxFbEJRVWtzUjBGQlJ6dEpRVU5vUWl4UFFVRlBMRlZCUVVNc1VVRkJhMElzUlVGQlJTeFJRVUZyUWp0UlFVTXhReXhKUVVGSkxFMUJRVTBzUjBGQk1FSXNSVUZCUlN4RlFVRkZMRU5CUVVNN1VVRkRla01zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkRha0lzVVVGQlVTeERRVUZETERCQ1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYmtNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU01UXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRlZCUVVNc1ZVRkJiMEk3WjBKQlF6bERMRkZCUVZFc1EwRkJReXdyUWtGQmRVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMnhFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRlNDeE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmxCUVZrc1JVRkJSVHRaUVVOd1FpeFJRVUZSTEVOQlFVTXNNRUpCUVd0Q0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTndReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETERCRVFVRXdSQ3hEUVVGRExFTkJRVU03VVVGRE5VVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hQUVVGUExGRkJRVkVzUTBGQlF5eHhRa0ZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE0wTXNRMEZCUXl4RFFVRkJPMEZCUTB3c1EwRkJReXhEUVVGQkluMD0iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbnZhciBub3RpZmljYXRpb25zQWN0aW9uc18xID0gcmVxdWlyZShcIi4vbm90aWZpY2F0aW9uc0FjdGlvbnNcIik7XG5leHBvcnRzLlVQREFURV9DSEFUX1VTRVJTID0gJ1VQREFURV9DSEFUX1VTRVJTJztcbmV4cG9ydHMuQUREX0NIQVRfVVNFUiA9ICdBRERfVVNFUic7XG5leHBvcnRzLlJFTU9WRV9DSEFUX1VTRVIgPSAnUkVNT1ZFX1VTRVInO1xuZXhwb3J0cy51cGRhdGVVc2VycyA9IGZ1bmN0aW9uICh1c2Vycykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuVVBEQVRFX0NIQVRfVVNFUlMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHVzZXJzOiB1c2Vyc1xuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLmFkZFVzZXIgPSBmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuQUREX0NIQVRfVVNFUixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdXNlcjogdXNlclxuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLnJlbW92ZVVzZXIgPSBmdW5jdGlvbiAoZW1haWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBleHBvcnRzLlJFTU9WRV9DSEFUX1VTRVIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGVtYWlsOiBlbWFpbFxuICAgICAgICB9XG4gICAgfTtcbn07XG5leHBvcnRzLmZldGNoQWxsVXNlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gYXhpb3NfMVtcImRlZmF1bHRcIl0uZ2V0KCcvYXBpL3YxL3VzZXJzJykudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICB2YXIgdXNlcnMgPSB7fTtcbiAgICAgICAgICAgIHJlcy5kYXRhLnVzZXJzLmZvckVhY2goZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgICAgICB1c2Vyc1t1LmVtYWlsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogdS5yb2xlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB1Lm5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXNwYXRjaChleHBvcnRzLnVwZGF0ZVVzZXJzKHVzZXJzKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ0ZldGNoaW5nIGFsbCB1c2VycyBmYWlsZWQnKSk7XG4gICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9KTtcbiAgICB9O1xufTtcbmV4cG9ydHMuY3JlYXRlTmV3VXNlciA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgICAgICByZXR1cm4gYXhpb3NfMVtcImRlZmF1bHRcIl0uZ2V0KCcvYXBpL3YxLycpO1xuICAgIH07XG59O1xuZXhwb3J0cy5lZGl0VXNlciA9IGZ1bmN0aW9uIChlbWFpbCwgdXNlcikge1xufTtcbmV4cG9ydHMuZGVsZXRlVXNlciA9IGZ1bmN0aW9uIChlbWFpbCkge1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGhkRlZ6WlhKelFXTjBhVzl1Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDNOeVl5OTNaV0l2WVdOMGFXOXVjeTlqYUdGMFZYTmxjbk5CWTNScGIyNXpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNLMEpCUVhsRU8wRkJTWHBFTEN0RVFVRnJSRHRCUVVWeVF5eFJRVUZCTEdsQ1FVRnBRaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMEZCUTNoRExGRkJRVUVzWVVGQllTeEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTXpRaXhSUVVGQkxHZENRVUZuUWl4SFFVRkhMR0ZCUVdFc1EwRkJRenRCUVVWcVF5eFJRVUZCTEZkQlFWY3NSMEZCUnl4VlFVRlRMRXRCUVZrN1NVRkROVU1zVDBGQlR6dFJRVU5JTEVsQlFVa3NSVUZCUlN4NVFrRkJhVUk3VVVGRGRrSXNTVUZCU1N4RlFVRkZPMWxCUTBZc1MwRkJTeXhGUVVGRkxFdEJRVXM3VTBGRFpqdExRVU5LTEVOQlFVRTdRVUZEVEN4RFFVRkRMRU5CUVVFN1FVRkZXU3hSUVVGQkxFOUJRVThzUjBGQlJ5eFZRVUZUTEVsQlFXTTdTVUZETVVNc1QwRkJUenRSUVVOSUxFbEJRVWtzUlVGQlJTeHhRa0ZCWVR0UlFVTnVRaXhKUVVGSkxFVkJRVVU3V1VGRFJpeEpRVUZKTEVWQlFVVXNTVUZCU1R0VFFVTmlPMHRCUTBvc1EwRkJRVHRCUVVOTUxFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNWVUZCVlN4SFFVRkhMRlZCUVZNc1MwRkJZVHRKUVVNMVF5eFBRVUZQTzFGQlEwZ3NTVUZCU1N4RlFVRkZMSGRDUVVGblFqdFJRVU4wUWl4SlFVRkpMRVZCUVVVN1dVRkRSaXhMUVVGTExFVkJRVVVzUzBGQlN6dFRRVU5tTzB0QlEwb3NRMEZCUVR0QlFVTk1MRU5CUVVNc1EwRkJRVHRCUVVkWkxGRkJRVUVzWVVGQllTeEhRVUZITzBsQlEzcENMRTlCUVU4c1ZVRkJReXhSUVVGclFqdFJRVU4wUWl4UFFVRlBMR3RDUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGRExFZEJRV3RDTzFsQlEzUkVMRWxCUVVrc1MwRkJTeXhIUVVGVkxFVkJRVVVzUTBGQlF6dFpRVU4wUWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUXl4RFFVRlhPMmRDUVVNdlFpeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSE8yOUNRVU5pTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1NVRkJTVHR2UWtGRFdpeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrN2FVSkJRMllzUTBGQlF6dFpRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBnc1VVRkJVU3hEUVVGRExHMUNRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1FpeFBRVUZQTEVkQlFVY3NRMEZCUXp0UlFVTm1MRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEZWQlFVTXNSMEZCWlR0WlFVTnlRaXhSUVVGUkxFTkJRVU1zSzBKQlFWRXNRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYUVRc1QwRkJUeXhIUVVGSExFTkJRVU03VVVGRFppeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNc1EwRkJRVHRCUVVOTUxFTkJRVU1zUTBGQlFUdEJRVVZaTEZGQlFVRXNZVUZCWVN4SFFVRkhMRlZCUVVNc1NVRkJZenRKUVVONFF5eFBRVUZQTEZWQlFVTXNVVUZCYTBJN1VVRkRkRUlzVDBGQlR5eHJRa0ZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlFUdEpRVU5vUXl4RFFVRkRMRU5CUVVFN1FVRkRUQ3hEUVVGRExFTkJRVUU3UVVGRldTeFJRVUZCTEZGQlFWRXNSMEZCUnl4VlFVRkRMRXRCUVdFc1JVRkJSU3hKUVVGak8wRkJSWFJFTEVOQlFVTXNRMEZCUVR0QlFVVlpMRkZCUVVFc1ZVRkJWU3hIUVVGSExGVkJRVU1zUzBGQllUdEJRVVY0UXl4RFFVRkRMRU5CUVVFaWZRPT0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwYXRoXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImpzb253ZWJ0b2tlblwiKTsiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIganNvbndlYnRva2VuXzEgPSByZXF1aXJlKFwianNvbndlYnRva2VuXCIpO1xudmFyIGVudiA9IHJlcXVpcmUoJy4uLy4uLy4uL2VudicpO1xuZnVuY3Rpb24gZGVmYXVsdF8xKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIHRva2VuID0gcmVxLnNlc3Npb24udG9rZW4gfHwgcmVxLmhlYWRlcnNbJ3gtYWNjZXNzLXRva2VuJ107XG4gICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdOb3QgYXV0aG9yaXplZCcgfSk7XG4gICAganNvbndlYnRva2VuXzEudmVyaWZ5KHRva2VuLCBlbnYuc2VjcmV0LCBmdW5jdGlvbiAoZXJyLCBkZWNvZGVkKSB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBlcnJvcjogJ05vdCBhdXRob3JpemVkJyB9KTtcbiAgICAgICAgcmVxLnVzZXIgPSBkZWNvZGVkO1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0pO1xufVxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFYwYUc5eWFYcGxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMM055WXk5elpYSjJaWEl2Yldsa1pHeGxkMkZ5WlM5aGRYUm9iM0pwZW1Wa0xuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc05rTkJRWE5ETzBGQlIzUkRMRWxCUVUwc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0QlFVTndReXh0UWtGQmQwSXNSMEZCV1N4RlFVRkZMRWRCUVcxQ0xFVkJRVVVzU1VGQll6dEpRVU55UlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NTVUZCU1N4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1NVRkRMMFFzU1VGQlNTeERRVUZETEV0QlFVczdVVUZEVGl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVVM1JDeHhRa0ZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFVTXNSMEZCVlN4RlFVRkZMRTlCUVdNN1VVRkRha1FzU1VGQlNTeEhRVUZITzFsQlFVVXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRiRVVzUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNN1VVRkRia0lzVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXp0SlFVTnNRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5RTEVOQlFVTTdRVUZXUkN3clFrRlZReUo5IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidmFsaWRhdG9yXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBtb25nb29zZV8xID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xudmFyIG1lc3NhZ2VTY2hlbWEgPSBuZXcgbW9uZ29vc2VfMS5TY2hlbWEoe1xuICAgIGNoYW5uZWw6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHRleHQ6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHVzZXJFbWFpbDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBsb3dlcmNhc2U6IHRydWUsXG4gICAgfVxufSwge1xuICAgIHRpbWVzdGFtcHM6IHRydWVcbn0pO1xudmFyIE1lc3NhZ2UgPSBtb25nb29zZV8xLm1vZGVsKCdNZXNzYWdlJywgbWVzc2FnZVNjaGVtYSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IE1lc3NhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lUV1Z6YzJGblpTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTl6WlhKMlpYSXZiVzlrWld4ekwwMWxjM05oWjJVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4eFEwRkJkMFE3UVVGVmVFUXNTVUZCVFN4aFFVRmhMRWRCUVZjc1NVRkJTU3hwUWtGQlRTeERRVUZETzBsQlEzSkRMRTlCUVU4c1JVRkJSVHRSUVVOTUxFbEJRVWtzUlVGQlJTeE5RVUZOTzFGQlExb3NVVUZCVVN4RlFVRkZMRWxCUVVrN1MwRkZha0k3U1VGRFJDeEpRVUZKTEVWQlFVVTdVVUZEUml4SlFVRkpMRVZCUVVVc1RVRkJUVHRSUVVOYUxGRkJRVkVzUlVGQlJTeEpRVUZKTzB0QlEycENPMGxCUTBRc1UwRkJVeXhGUVVGRk8xRkJRMUFzU1VGQlNTeEZRVUZGTEUxQlFVMDdVVUZEV2l4UlFVRlJMRVZCUVVVc1NVRkJTVHRSUVVOa0xGTkJRVk1zUlVGQlJTeEpRVUZKTzB0QlJXeENPME5CUTBvc1JVRkJSVHRKUVVORExGVkJRVlVzUlVGQlJTeEpRVUZKTzBOQlEyNUNMRU5CUVVNc1EwRkJRenRCUVVWSUxFbEJRVTBzVDBGQlR5eEhRVUZ2UWl4blFrRkJTeXhEUVVGRExGTkJRVk1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTnFSU3h4UWtGQlpTeFBRVUZQTEVOQlFVTWlmUT09IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9jaGFcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic29ja2V0LmlvLWNsaWVudFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC10aHVua1wiKTsiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlRPR0dMRV9TSURFQkFSX09QRU4gPSAnVE9HR0xFX1NJREVCQVJfT1BFTic7XG5leHBvcnRzLnRvZ2dsZVNpZGViYXJPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGV4cG9ydHMuVE9HR0xFX1NJREVCQVJfT1BFTlxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJsa1pXSmhja0ZqZEdsdmJuTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOXpjbU12ZDJWaUwyRmpkR2x2Ym5NdmMybGtaV0poY2tGamRHbHZibk11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJZU3hSUVVGQkxHMUNRVUZ0UWl4SFFVRkhMSEZDUVVGeFFpeERRVUZETzBGQlJUVkRMRkZCUVVFc2FVSkJRV2xDTEVkQlFVYzdTVUZETjBJc1QwRkJUenRSUVVOSUxFbEJRVWtzUlVGQlJTd3lRa0ZCYlVJN1MwRkROVUlzUTBGQlFUdEJRVU5NTEVOQlFVTXNRMEZCUVNKOSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN1cGVydGVzdFwiKTsiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xudmFyIGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbnZhciBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG52YXIgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XG52YXIgY3NyZiA9IHJlcXVpcmUoXCJjc3VyZlwiKTtcbnZhciBjb29raWVQYXJzZXIgPSByZXF1aXJlKFwiY29va2llLXBhcnNlclwiKTtcbnZhciBzZXNzaW9uID0gcmVxdWlyZShcImV4cHJlc3Mtc2Vzc2lvblwiKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xudmFyIGJjcnlwdCA9IHJlcXVpcmUoXCJiY3J5cHRqc1wiKTtcbnZhciBoZWxtZXQgPSByZXF1aXJlKFwiaGVsbWV0XCIpO1xudmFyIGNvbXByZXNzaW9uID0gcmVxdWlyZShcImNvbXByZXNzaW9uXCIpO1xudmFyIGpzb253ZWJ0b2tlbl8xID0gcmVxdWlyZShcImpzb253ZWJ0b2tlblwiKTtcbnZhciBtdXN0YWNoZUV4cHJlc3MgPSByZXF1aXJlKCdtdXN0YWNoZS1leHByZXNzJyk7XG52YXIgTW9uZ29TdG9yZSA9IHJlcXVpcmUoJ2Nvbm5lY3QtbW9uZ28nKShzZXNzaW9uKTtcbnZhciByb3V0ZXNfMSA9IHJlcXVpcmUoXCIuL3JvdXRlc1wiKTtcbnZhciBpbmRleF8xID0gcmVxdWlyZShcIi4vc29ja2V0LmlvL2luZGV4XCIpO1xudmFyIFVzZXJfMSA9IHJlcXVpcmUoXCIuL21vZGVscy9Vc2VyXCIpO1xudmFyIGVudiA9IHJlcXVpcmUoJy4uLy4uL2VudicpO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcbmV4cG9ydHMuYXBwID0gYXBwO1xudmFyIHBvcnQgPSBlbnYucG9ydDtcbnZhciBzZXJ2ZXI7XG52YXIgc29ja2V0U2VydmVyO1xuZXhwb3J0cy5zb2NrZXRTZXJ2ZXIgPSBzb2NrZXRTZXJ2ZXI7XG5hcHAuZW5naW5lKCdodG1sJywgbXVzdGFjaGVFeHByZXNzKCkpO1xuYXBwLnNldCgndmlldyBlbmdpbmUnLCAnaHRtbCcpO1xuYXBwLnVzZShjb21wcmVzc2lvbigpKTtcbnZhciBzZXNzaW9uTWlkZGxld2FyZSA9IHNlc3Npb24oe1xuICAgIHNlY3JldDogZW52LnNlY3JldCxcbiAgICBjb29raWU6IHtcbiAgICAgICAgbWF4QWdlOiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgICAgICBzYW1lU2l0ZTogdHJ1ZSxcbiAgICAgICAgc2VjdXJlOiBlbnYucHJvZHVjdGlvbixcbiAgICAgICAgaHR0cE9ubHk6IHRydWVcbiAgICB9LFxuICAgIHNhdmVVbmluaXRpYWxpemVkOiB0cnVlLFxuICAgIHJlc2F2ZTogZmFsc2UsXG4gICAgc3RvcmU6IG5ldyBNb25nb1N0b3JlKHtcbiAgICAgICAgbW9uZ29vc2VDb25uZWN0aW9uOiBtb25nb29zZS5jb25uZWN0aW9uXG4gICAgfSlcbn0pO1xudmFyIGNzcmZNaWRkbGV3YXJlID0gY3NyZih7XG4gICAgY29va2llOiB7XG4gICAgICAgIG1heEFnZTogMjQgKiA2MCAqIDYwICogMTAwMCxcbiAgICAgICAgc2FtZVNpdGU6IHRydWUsXG4gICAgICAgIHNlY3VyZTogZW52LnByb2R1Y3Rpb24sXG4gICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICBrZXk6ICdfY3NyZidcbiAgICB9XG59KTtcbm1vbmdvb3NlLmNvbm5lY3QoZW52LnVzZVRlc3REYiA/IGVudi5tb25nb2RiVGVzdENvbm5lY3Rpb25VcmkgOiBlbnYubW9uZ29kYkNvbm5lY3Rpb25VcmksIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlIH0pO1xubW9uZ29vc2UuY29ubmVjdGlvbi5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignTW9uZ29vc2UgY29ubmVjdGlvbiBlcnJvcicsIGVycik7XG59KTtcbnByb2Nlc3Mub24oJ1NJR0lOVCcsIGZ1bmN0aW9uICgpIHtcbiAgICBtb25nb29zZS5jb25uZWN0aW9uLmNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ01vbmdvb3NlIGRlZmF1bHQgY29ubmVjdGlvbiBkaXNjb25uZWN0ZWQgdGhyb3VnaCBhcHAgdGVybWluYXRpb24nKTtcbiAgICAgICAgc2VydmVyLmNsb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbmFwcC51c2Uoc2Vzc2lvbk1pZGRsZXdhcmUpO1xuYXBwLnVzZShjb29raWVQYXJzZXIoZW52LnNlY3JldCkpO1xuaWYgKGVudi5kaXNhYmxlQ3NyZikge1xuICAgIGNvbnNvbGUubG9nKCdDU1JGIGRpc2FibGVkJyk7XG4gICAgYXBwLnVzZShmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgcmVxLmNzcmZUb2tlbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyB9O1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0pO1xufVxuZWxzZSB7XG4gICAgYXBwLnVzZShjc3JmTWlkZGxld2FyZSk7XG59XG52YXIgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xuYXBwLnVzZShmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICByZXEuZGIgPSBkYjtcbiAgICByZXR1cm4gbmV4dCgpO1xufSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuYXBwLnVzZShoZWxtZXQoKSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9kaXN0L3B1YmxpYy8nKSkpO1xuYXBwLnVzZSgnL2FwaScsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIHJldHVybiBuZXh0KCk7XG59KTtcbmFwcC51c2UoZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgcmVxLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uIChlbWFpbCwgcGFzc3dvcmQsIGRvbmUpIHtcbiAgICAgICAgVXNlcl8xW1wiZGVmYXVsdFwiXS5maW5kQnlFbWFpbChlbWFpbCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgaWYgKHVzZXIgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZmFsc2UsIG51bGwpO1xuICAgICAgICAgICAgaWYgKCFiY3J5cHQuY29tcGFyZVN5bmMocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGZhbHNlLCBuZXcgRXJyb3IoJ0ludmFsaWQgcGFzc3dvcmQnKSk7XG4gICAgICAgICAgICB2YXIgdXNlckRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICAgICAgICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZG9uZSh1c2VyRGV0YWlscywgbnVsbCk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgZG9uZShmYWxzZSwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXEubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXEuc2Vzc2lvbi50b2tlbiA9IG51bGw7XG4gICAgfTtcbiAgICByZXEuaXNzdWVOZXdUb2tlbiA9IGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IGpzb253ZWJ0b2tlbl8xLnNpZ24oe1xuICAgICAgICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgICAgICAgcm9sZTogdXNlci5yb2xlLFxuICAgICAgICAgICAgZW1haWw6IHVzZXIuZW1haWxcbiAgICAgICAgfSwgZW52LnNlY3JldCwge1xuICAgICAgICAgICAgZXhwaXJlc0luOiA4NjQwMFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNldEhlYWRlcigneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbik7XG4gICAgICAgIHJlcS5zZXNzaW9uLnRva2VuID0gdG9rZW47XG4gICAgfTtcbiAgICBuZXh0KCk7XG59KTtcbnJvdXRlc18xW1wiZGVmYXVsdFwiXShhcHApO1xuc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcbnNlcnZlci5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIHNlcnZlci5jbG9zZSgpO1xufSk7XG5pZiAoIWVudi5kaXNhYmxlQXV0b1N0YXJ0KSB7XG4gICAgZXhwb3J0cy5zb2NrZXRTZXJ2ZXIgPSBzb2NrZXRTZXJ2ZXIgPSBpbmRleF8xW1wiZGVmYXVsdFwiXShzZXJ2ZXIsIGRiLCBzZXNzaW9uTWlkZGxld2FyZSk7XG4gICAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbignY29ubmVjdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIE1vbmdvREIgdmlhIE1vbmdvb3NlJyk7XG4gICAgICAgIHNlcnZlci5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJMaXN0ZW5pbmcgb24gcG9ydCBcIiArIHBvcnQgKyBcIiFcIik7XG4gICAgICAgICAgICBhcHAuZW1pdCgnc2VydmVyIHN0YXJ0ZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHNlcnZlcjtcbmV4cG9ydHMuY29ubiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMlZ5ZG1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwzTmxjblpsY2k5elpYSjJaWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkZRU3d5UWtGQk5rSTdRVUZETjBJc2FVTkJRVzFETzBGQlEyNURMREpDUVVFMlFqdEJRVVUzUWl4dFEwRkJjVU03UVVGRGNrTXNORUpCUVRoQ08wRkJRemxDTERSRFFVRTRRenRCUVVNNVF5eDVRMEZCTWtNN1FVRkRNME1zZDBOQlFUQkRPMEZCUXpGRExHbERRVUZ0UXp0QlFVTnVReXdyUWtGQmFVTTdRVUZGYWtNc2VVTkJRVEpETzBGQlF6TkRMRFpEUVVGdlF6dEJRVU53UXl4SlFVRk5MR1ZCUVdVc1IwRkJSeXhQUVVGUExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRCUVVOd1JDeEpRVUZOTEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZGY2tRc2JVTkJRVGhDTzBGQlF6bENMREpEUVVFd1F6dEJRVVV4UXl4elEwRkJORU03UVVGRE5VTXNTVUZCVFN4SFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBGQlJXcERMRWxCUVUwc1IwRkJSeXhIUVVGUkxFOUJRVThzUlVGQlJTeERRVUZETzBGQmMwbHNRaXhyUWtGQlJ6dEJRWEpKV2l4SlFVRk5MRWxCUVVrc1IwRkJiMElzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTjJReXhKUVVGSkxFMUJRVzFDTEVOQlFVTTdRVUZEZUVJc1NVRkJTU3haUVVFMlFpeERRVUZETzBGQmJVbHdRaXh2UTBGQldUdEJRV3BKTVVJc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNaVUZCWlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOMFF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVVV2UWl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZGZGtJc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl4UFFVRlBMRU5CUVVNN1NVRkRPVUlzVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4TlFVRk5PMGxCUTJ4Q0xFMUJRVTBzUlVGQlJUdFJRVU5LTEUxQlFVMHNSVUZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTzFGQlF6TkNMRkZCUVZFc1JVRkJSU3hKUVVGSk8xRkJRMlFzVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4VlFVRlZPMUZCUTNSQ0xGRkJRVkVzUlVGQlJTeEpRVUZKTzB0QlEycENPMGxCUTBRc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0SlFVTjJRaXhOUVVGTkxFVkJRVVVzUzBGQlN6dEpRVU5pTEV0QlFVc3NSVUZCUlN4SlFVRkpMRlZCUVZVc1EwRkJRenRSUVVOc1FpeHJRa0ZCYTBJc1JVRkJSU3hSUVVGUkxFTkJRVU1zVlVGQlZUdExRVU14UXl4RFFVRkRPME5CUTB3c1EwRkJReXhEUVVGRE8wRkJSVWdzU1VGQlRTeGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNoQ0xFMUJRVTBzUlVGQlJUdFJRVU5LTEUxQlFVMHNSVUZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTzFGQlF6TkNMRkZCUVZFc1JVRkJSU3hKUVVGSk8xRkJRMlFzVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4VlFVRlZPMUZCUTNSQ0xGRkJRVkVzUlVGQlJTeEpRVUZKTzFGQlEyUXNSMEZCUnl4RlFVRkZMRTlCUVU4N1MwRkRaanREUVVOS0xFTkJRVU1zUTBGQlFUdEJRVVZHTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNSVUZCUlN4bFFVRmxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU55U0N4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVXl4SFFVRkhPMGxCUTNoRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY0VRc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRlNDeFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSVHRKUVVOcVFpeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVOMFFpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR3RGUVVGclJTeERRVUZETEVOQlFVTTdVVUZEYUVZc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFpRVU5VTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNFSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlVnc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wRkJRek5DTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUld4RExFbEJRVWNzUjBGQlJ5eERRVUZETEZkQlFWY3NSVUZCUlR0SlFVTm9RaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMGxCUXpkQ0xFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWs3VVVGRGJrSXNSMEZCUnl4RFFVRkRMRk5CUVZNc1IwRkJSeXhqUVVGakxFOUJRVThzUlVGQlJTeERRVUZCTEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTNwRExFOUJRVThzU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEYkVJc1EwRkJReXhEUVVGRExFTkJRVU03UTBGRFRqdExRVUZOTzBsQlEwZ3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dERRVU16UWp0QlFVVkVMRWxCUVVrc1JVRkJSU3hIUVVGM1FpeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRPMEZCUTJ4RUxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUXl4SFFVRlpMRVZCUVVVc1IwRkJZU3hGUVVGRkxFbEJRV003U1VGRGFFUXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRFdpeFBRVUZQTEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUTJ4Q0xFTkJRVU1zUTBGQlF5eERRVUZCTzBGQlEwWXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTXpRaXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCU1c1RUxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVWc1FpeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRVZCUVVVc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZka1VzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hIUVVGWkxFVkJRVVVzUjBGQllTeEZRVUZGTEVsQlFXTTdTVUZGYWtVc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU5zUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOSUxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUXl4SFFVRlpMRVZCUVVVc1IwRkJZU3hGUVVGRkxFbEJRV003U1VGRGFFUXNSMEZCUnl4RFFVRkRMRmxCUVZrc1IwRkJSeXhWUVVGRExFdEJRV0VzUlVGRFlpeFJRVUZuUWl4RlFVTm9RaXhKUVVFd1JEdFJRVU14UlN4cFFrRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhKUVVGWE8xbEJRM0pETEVsQlFVa3NTVUZCU1N4TFFVRkxMRWxCUVVrN1owSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRelZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMmRDUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRjRWNzU1VGQlNTeFhRVUZYTEVkQlFWRTdaMEpCUTI1Q0xFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkRha0lzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMmRDUVVObUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1R0aFFVTnNRaXhEUVVGQk8xbEJRMFFzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMjVETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExGVkJRVU1zUjBGQlZUdFpRVU5vUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlEzSkNMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF5eERRVUZCTzBsQlEwUXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSenRSUVVOVUxFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVNM1FpeERRVUZETEVOQlFVRTdTVUZEUkN4SFFVRkhMRU5CUVVNc1lVRkJZU3hIUVVGSExGVkJRVU1zU1VGQlZ6dFJRVU0xUWl4SlFVRkpMRXRCUVVzc1IwRkJWeXh0UWtGQlNTeERRVUZETzFsQlEzSkNMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU5tTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVObUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3p0VFFVTndRaXhGUVVGRkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVTdXVUZEV0N4VFFVRlRMRVZCUVVVc1MwRkJTenRUUVVOdVFpeERRVUZETEVOQlFVTTdVVUZEU0N4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRM1pETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dEpRVU01UWl4RFFVRkRMRU5CUVVFN1NVRkRSQ3hKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUlVnc2JVSkJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTmFMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVVNc1IwRkJWVHRKUVVNeFFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMjVDTEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVOdVFpeERRVUZETEVOQlFVTXNRMEZCUVR0QlFVVkdMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1NVRkRka0lzZFVKQlFVRXNXVUZCV1N4SFFVRkhMR3RDUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eERRVUZETzBsQlEzaEVMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlR0UlFVTm9ReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEcxRFFVRnRReXhEUVVGRExFTkJRVU03VVVGRGFrUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRGFFSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXgxUWtGQmNVSXNTVUZCU1N4TlFVRkhMRU5CUVVNc1EwRkJRenRaUVVNeFF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdVVUZETDBJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTk9PMEZCUlVRc2NVSkJRV1VzVFVGQlRTeERRVUZETzBGQlExUXNVVUZCUVN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5SjkiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV4cHJlc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3N1cmZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29va2llLXBhcnNlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJleHByZXNzLXNlc3Npb25cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaGVsbWV0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvbXByZXNzaW9uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm11c3RhY2hlLWV4cHJlc3NcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29ubmVjdC1tb25nb1wiKTsiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xudmFyIGF1dGhvcml6ZWRfMSA9IHJlcXVpcmUoXCIuL21pZGRsZXdhcmUvYXV0aG9yaXplZFwiKTtcbnZhciBhZG1pbl8xID0gcmVxdWlyZShcIi4vbWlkZGxld2FyZS9hZG1pblwiKTtcbnZhciBhdXRoQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vY29udHJvbGxlcnMvYXV0aENvbnRyb2xsZXJcIik7XG52YXIgdXNlckNvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2NvbnRyb2xsZXJzL3VzZXJDb250cm9sbGVyXCIpO1xudmFyIG1lc3NhZ2VDb250cm9sbGVyXzEgPSByZXF1aXJlKFwiLi9jb250cm9sbGVycy9tZXNzYWdlQ29udHJvbGxlclwiKTtcbnZhciBjaGFubmVsQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vY29udHJvbGxlcnMvY2hhbm5lbENvbnRyb2xsZXJcIik7XG5mdW5jdGlvbiBkZWZhdWx0XzEoYXBwKSB7XG4gICAgYXBwLmdldCgnLycsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXR1cm4gcmVzLnJlbmRlcihwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vZGlzdC9wdWJsaWMvaW5kZXguaHRtbCcpLCB7IGNzcmZUb2tlbjogcmVxLmNzcmZUb2tlbigpIH0pO1xuICAgIH0pO1xuICAgIGFwcC5nZXQoJy93aWRnZXQnLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5yZW5kZXIocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL2Rpc3QvcHVibGljL3dpZGdldC9pbmRleC5odG1sJykpO1xuICAgIH0pO1xuICAgIGFwcC5nZXQoJy93aWRnZXQvZGVtbycsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXR1cm4gcmVzLnJlbmRlcihwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vLi4vZGlzdC9wdWJsaWMvd2lkZ2V0L2RlbW8uaHRtbCcpKTtcbiAgICB9KTtcbiAgICBhcHAucG9zdCgnL2FwaS92MS9sb2dpbicsIGF1dGhDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLmxvZ2luKTtcbiAgICBhcHAucG9zdCgnL2FwaS92MS9yZWdpc3RlcicsIGF1dGhDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLnJlZ2lzdGVyKTtcbiAgICBhcHAuZ2V0KCcvYXBpL3YxL2xvZ291dCcsIGF1dGhDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLmxvZ291dCk7XG4gICAgYXBwLmdldCgnL2FwaS92MS92ZXJpZnlFbWFpbC86aWQnLCBhdXRoQ29udHJvbGxlcl8xW1wiZGVmYXVsdFwiXS52ZXJpZnlFbWFpbCk7XG4gICAgYXBwLnVzZSgnL2FwaS92MS91c2VyKicsIGF1dGhvcml6ZWRfMVtcImRlZmF1bHRcIl0pO1xuICAgIGFwcC5nZXQoJy9hcGkvdjEvdXNlcicsIHVzZXJDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLnVzZXIpO1xuICAgIGFwcC5nZXQoJy9hcGkvdjEvdXNlcnMnLCB1c2VyQ29udHJvbGxlcl8xW1wiZGVmYXVsdFwiXS51c2Vycyk7XG4gICAgYXBwLmdldCgnL2FwaS92MS91c2VyLzp1c2VyJywgdXNlckNvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0udXNlckJ5RW1haWwpO1xuICAgIGFwcC5wb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL2VtYWlsJywgdXNlckNvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0udXBkYXRlRW1haWwpO1xuICAgIGFwcC5wb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL25hbWUnLCB1c2VyQ29udHJvbGxlcl8xW1wiZGVmYXVsdFwiXS51cGRhdGVOYW1lKTtcbiAgICBhcHAucG9zdCgnL2FwaS92MS91c2VyL3VwZGF0ZS9wYXNzd29yZCcsIHVzZXJDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLnVwZGF0ZVBhc3N3b3JkKTtcbiAgICBhcHAucG9zdCgnL2FwaS92MS91c2VyL3Jlc2V0X3Bhc3N3b3JkJywgdXNlckNvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0ucmVzZXRQYXNzd29yZCk7XG4gICAgYXBwLnBvc3QoJy9hcGkvdjEvdXNlci9jcmVhdGUnLCBhZG1pbl8xW1wiZGVmYXVsdFwiXSwgdXNlckNvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0uY3JlYXRlVXNlcik7XG4gICAgYXBwLnB1dCgnL2FwaS92MS91c2VyL3VwZGF0ZScsIGFkbWluXzFbXCJkZWZhdWx0XCJdLCB1c2VyQ29udHJvbGxlcl8xW1wiZGVmYXVsdFwiXS5lZGl0VXNlcik7XG4gICAgYXBwW1wiZGVsZXRlXCJdKCcvYXBpL3YxL3VzZXIvZGVsZXRlJywgYWRtaW5fMVtcImRlZmF1bHRcIl0sIHVzZXJDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLmRlbGV0ZVVzZXIpO1xuICAgIGFwcC5wdXQoJy9hcGkvdjEvdXNlci9yZXN0b3JlJywgYWRtaW5fMVtcImRlZmF1bHRcIl0sIHVzZXJDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdLnJlc3RvcmVVc2VyKTtcbiAgICBhcHAudXNlKCcvYXBpL3YxL21lc3NhZ2UqJywgYXV0aG9yaXplZF8xW1wiZGVmYXVsdFwiXSk7XG4gICAgYXBwLmdldCgnL2FwaS92MS9tZXNzYWdlcy86Y2hhbm5lbC86b2Zmc2V0JywgbWVzc2FnZUNvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0ubWVzc2FnZXMpO1xuICAgIGFwcC51c2UoJy9hcGkvdjEvY2hhbm5lbCcsIGF1dGhvcml6ZWRfMVtcImRlZmF1bHRcIl0pO1xuICAgIGFwcC5nZXQoJy9hcGkvdjEvY2hhbm5lbHMnLCBjaGFubmVsQ29udHJvbGxlcl8xW1wiZGVmYXVsdFwiXS5jaGFubmVscyk7XG4gICAgYXBwLnBvc3QoJy9hcGkvdjEvY2hhbm5lbHMvZGVsZXRlJywgYWRtaW5fMVtcImRlZmF1bHRcIl0sIGNoYW5uZWxDb250cm9sbGVyXzFbXCJkZWZhdWx0XCJdW1wiZGVsZXRlXCJdKTtcbiAgICBhcHAucG9zdCgnL2FwaS92MS9jaGFubmVscy9jcmVhdGUnLCBhZG1pbl8xW1wiZGVmYXVsdFwiXSwgY2hhbm5lbENvbnRyb2xsZXJfMVtcImRlZmF1bHRcIl0uY3JlYXRlKTtcbiAgICBhcHAuZ2V0KCcqJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJldHVybiByZXMucmVuZGVyKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9kaXN0L3B1YmxpYy9pbmRleC5odG1sJyksIHsgY3NyZlRva2VuOiByZXEuY3NyZlRva2VuKCkgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGRlZmF1bHRfMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNtOTFkR1Z6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNObGNuWmxjaTl5YjNWMFpYTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTd3lRa0ZCTmtJN1FVRkZOMElzYzBSQlFXbEVPMEZCUTJwRUxEUkRRVUYxUXp0QlFVTjJReXdyUkVGQk1FUTdRVUZETVVRc0swUkJRVEJFTzBGQlF6RkVMSEZGUVVGblJUdEJRVU5vUlN4eFJVRkJaMFU3UVVGRmFFVXNiVUpCUVhkQ0xFZEJRVkU3U1VGSE5VSXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzVlVGQlZTeEhRVUZaTEVWQlFVVXNSMEZCWVR0UlFVTTVReXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlEySXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFVkJRVVVzT0VKQlFUaENMRU5CUVVNc1JVRkRka1FzUlVGQlJTeFRRVUZUTEVWQlFVVXNSMEZCUnl4RFFVRkRMRk5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRMnBETEVOQlFVTTdTVUZEVGl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVWSUxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRlZCUVZVc1IwRkJVU3hGUVVGRkxFZEJRVkU3VVVGRE0wTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVOaUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RlFVRkZMSGREUVVGM1F5eERRVUZETEVOQlEzQkZMRU5CUVVNN1NVRkRUaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVZJTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1kwRkJZeXhGUVVGRkxGVkJRVlVzUjBGQlVTeEZRVUZGTEVkQlFWRTdVVUZEYUVRc1QwRkJUeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVU5pTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRkxIVkRRVUYxUXl4RFFVRkRMRU5CUTI1RkxFTkJRVU03U1VGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVbElMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTERKQ1FVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRGFFUXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN3eVFrRkJZeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzUkVMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc01rSkJRV01zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTnFSQ3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEhsQ1FVRjVRaXhGUVVGRkxESkNRVUZqTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkZMMFFzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRmxMRVZCUVVVc2RVSkJRVlVzUTBGQlF5eERRVUZETzBsQlEzSkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zWTBGQll5eEZRVUZGTERKQ1FVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE4wTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhsUVVGbExFVkJRVVVzTWtKQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNNVF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRzlDUVVGdlFpeEZRVUZGTERKQ1FVRmpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03U1VGRE1VUXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXd5UWtGQk1rSXNSVUZCUlN3eVFrRkJZeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBsQlEyeEZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRVZCUVVVc01rSkJRV01zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVTm9SU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETERoQ1FVRTRRaXhGUVVGRkxESkNRVUZqTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1NVRkRlRVVzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUlVGQlJTd3lRa0ZCWXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8wbEJRM1JGTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNhMEpCUVVzc1JVRkJSU3d5UWtGQll5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMGxCUTJ4RkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzYTBKQlFVc3NSVUZCUlN3eVFrRkJZeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF5OUVMRWRCUVVjc1EwRkJReXhSUVVGTkxFTkJRVUVzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hyUWtGQlN5eEZRVUZGTERKQ1FVRmpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03U1VGRGNFVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4clFrRkJTeXhGUVVGRkxESkNRVUZqTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkZia1VzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeDFRa0ZCVlN4RFFVRkRMRU5CUVVNN1NVRkRlRU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4dFEwRkJiVU1zUlVGQlJTdzRRa0ZCYVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVVY2UlN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMSFZDUVVGVkxFTkJRVU1zUTBGQlF6dEpRVU4yUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRGhDUVVGcFFpeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTNoRUxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzYTBKQlFVc3NSVUZCUlN3NFFrRkJhVUlzUTBGQlF5eFJRVUZOTEVOQlFVRXNRMEZCUXl4RFFVRkRPMGxCUTNKRkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzYTBKQlFVc3NSVUZCUlN3NFFrRkJhVUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVZHlSU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4VlFVRlZMRWRCUVZrc1JVRkJSU3hIUVVGaE8xRkJRemxETEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkRZaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSVUZCUlN3NFFrRkJPRUlzUTBGQlF5eEZRVU4yUkN4RlFVRkZMRk5CUVZNc1JVRkJSU3hIUVVGSExFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVXNRMEZEYWtNc1EwRkJRenRKUVVOT0xFTkJRVU1zUTBGQlF5eERRVUZETzBGQlExQXNRMEZCUXp0QlFYcEVSQ3dyUWtGNVJFTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gZGVmYXVsdF8xKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgaWYgKHJlcS51c2VyICYmIHJlcS51c2VyLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdOb3QgYXV0aG9yaXplZCBhcyBhZG1pbicgfSk7XG59XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGRlZmF1bHRfMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlXUnRhVzR1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTl6Y21NdmMyVnlkbVZ5TDIxcFpHUnNaWGRoY21VdllXUnRhVzR1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3h0UWtGQmQwSXNSMEZCVVN4RlFVRkZMRWRCUVZFc1JVRkJSU3hKUVVGak8wbEJRM1JFTEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4UFFVRlBMRVZCUVVVN1VVRkRka01zVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXp0TFFVTnFRanRKUVVORUxFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzUkZMRU5CUVVNN1FVRk1SQ3dyUWtGTFF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwidmFsaWRhdG9yXCIpO1xudmFyIGJjcnlwdGpzXzEgPSByZXF1aXJlKFwiYmNyeXB0anNcIik7XG52YXIgVXNlcl8xID0gcmVxdWlyZShcIi4uL21vZGVscy9Vc2VyXCIpO1xudmFyIGVudiA9IHJlcXVpcmUoJy4uLy4uLy4uL2VudicpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gICAgbG9naW46IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICBpZiAodmFsaWRhdG9yXzEuaXNFbXB0eShyZXEuYm9keS5lbWFpbCB8fCAnJykgfHwgdmFsaWRhdG9yXzEuaXNFbXB0eShyZXEuYm9keS5wYXNzd29yZCB8fCAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnUGxlYXNlIHN1cHBseSBhbiBlbWFpbCBhbmQgcGFzc3dvcmQnIH0pLmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsaWRhdG9yXzEuaXNFbWFpbChyZXEuYm9keS5lbWFpbCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTm90IGEgdmFsaWQgZW1haWwgYWRkcmVzcycgfSkuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxLmF1dGhlbnRpY2F0ZShyZXEuYm9keS5lbWFpbCwgcmVxLmJvZHkucGFzc3dvcmQsIGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICBpZiAoIXVzZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkJyB9KS5lbmQoKTtcbiAgICAgICAgICAgIHJlcS5pc3N1ZU5ld1Rva2VuKHVzZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKVxuICAgICAgICAgICAgICAgIC5qc29uKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgICAgICAgICBuYW1lOiB1c2VyLm5hbWVcbiAgICAgICAgICAgIH0pLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRvcl8xLmlzRW1wdHkocmVxLmJvZHkuZW1haWwgfHwgJycpIHx8IHZhbGlkYXRvcl8xLmlzRW1wdHkocmVxLmJvZHkucGFzc3dvcmQgfHwgJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ1BsZWFzZSBzdXBwbHkgYW4gZW1haWwgYW5kIHBhc3N3b3JkJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRvcl8xLmlzRW1haWwocmVxLmJvZHkuZW1haWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ05vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKHJlcS5ib2R5LmVtYWlsKS5jb3VudERvY3VtZW50cygpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICAgICAgaWYgKGNvdW50ICE9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnRW1haWwgYWRkcmVzcyBpbiB1c2UnIH0pO1xuICAgICAgICAgICAgdmFyIHBhc3N3b3JkSGFzaCA9IGJjcnlwdGpzXzEuaGFzaFN5bmMocmVxLmJvZHkucGFzc3dvcmQpO1xuICAgICAgICAgICAgVXNlcl8xW1wiZGVmYXVsdFwiXS5jb3VudERvY3VtZW50cygpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciByb2xlID0gJ3VzZXInO1xuICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcm9sZSA9ICdhZG1pbic7XG4gICAgICAgICAgICAgICAgdmFyIHVzZXIgPSBuZXcgVXNlcl8xW1wiZGVmYXVsdFwiXSh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogcmVxLmJvZHkuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZEhhc2gsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHVzZXIuc2F2ZSgpLnRoZW4oZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHRyeWluZyB0byBjcmVhdGUgYSBuZXcgdXNlcicgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBsb2dvdXQ6IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXEubG9nb3V0KCk7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdsb2dnZWQgb3V0JyB9KTtcbiAgICB9LFxuICAgIHZlcmlmeUVtYWlsOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhWMGFFTnZiblJ5YjJ4c1pYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOXpjbU12YzJWeWRtVnlMMk52Ym5SeWIyeHNaWEp6TDJGMWRHaERiMjUwY205c2JHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNkVU5CUVRaRE8wRkJRemRETEhGRFFVRnZRenRCUVVWd1F5eDFRMEZCTmtNN1FVRkROME1zU1VGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJSWEJETEhGQ1FVRmxPMGxCUTFnc1MwRkJTeXhGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZETDBJc1NVRkJTU3h0UWtGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEcxQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkRia1VzVDBGQlR5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN4eFEwRkJjVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1UwRkRka1k3VVVGRFJDeEpRVUZKTEVOQlFVTXNiVUpCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMWxCUXpGQ0xFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNNa0pCUVRKQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMU5CUXpkRk8xRkJRMFFzUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGRExFbEJRVzFDTzFsQlEzQkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yZENRVU5NTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc01rSkJRVEpDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRemxGTEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGVFSXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dHBRa0ZEYWtJc1NVRkJTU3hEUVVGRE8yZENRVU5HTEU5QlFVOHNSVUZCUlN4SlFVRkpPMmRDUVVOaUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkRha0lzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMmRDUVVObUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1R0aFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU53UXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRFJDeFJRVUZSTEVWQlFVVXNWVUZCUXl4SFFVRlpMRVZCUVVVc1IwRkJZVHRSUVVOc1F5eEpRVUZKTEcxQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc2JVSkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU51UlN4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxIRkRRVUZ4UXl4RlFVRkZMRU5CUVVNc1EwRkJRenRUUVVOcVJqdFJRVU5FTEVsQlFVa3NRMEZCUXl4dFFrRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRNVUlzVDBGQlR5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN3eVFrRkJNa0lzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZEZGtVN1VVRkRSQ3hQUVVGUExHbENRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNTMEZCWVR0WlFVTXZSU3hKUVVGSkxFdEJRVXNzUzBGQlN5eERRVUZETzJkQ1FVTllMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJReXhMUVVGTExFVkJRVVVzYzBKQlFYTkNMRVZCUVVNc1EwRkJReXhEUVVGRE8xbEJRMnBGTEVsQlFVa3NXVUZCV1N4SFFVRkhMRzFDUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRaUVVVdlF5eHBRa0ZCU1N4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRXRCUVdFN1owSkJRelZETEVsQlFVa3NTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJRenRuUWtGRGJFSXNTVUZCU1N4TFFVRkxMRXRCUVVzc1EwRkJRenR2UWtGRFdDeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRPMmRDUVVOdVFpeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMR2xDUVVGSkxFTkJRVU03YjBKQlEyaENMRWxCUVVrc1JVRkJSU3hGUVVGRk8yOUNRVU5TTEV0QlFVc3NSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXM3YjBKQlEzSkNMRkZCUVZFc1JVRkJSU3haUVVGWk8yOUNRVU4wUWl4SlFVRkpMRVZCUVVVc1NVRkJTVHR2UWtGRFZpeGhRVUZoTEVWQlFVVXNTMEZCU3p0cFFrRkRka0lzUTBGQlF5eERRVUZETzJkQ1FVTklMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4RFFVRlJPMjlDUVVOMFFpeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJReXhEUVVGRExFTkJRVU03WjBKQlEycEVMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEZWQlFVTXNSMEZCVlR0dlFrRkRhRUlzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenR2UWtGRGJrSXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkRMRXRCUVVzc1JVRkJSU3hyUkVGQmEwUXNSVUZCUXl4RFFVRkRMRU5CUVVNN1owSkJRemRHTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFBc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVVlFMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0UlFVTm9ReXhIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdVVUZEWWl4UFFVRlBMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSU3haUVVGWkxFVkJRVU1zUTBGQlF5eERRVUZETzBsQlF6VkVMRU5CUVVNN1NVRkRSQ3hYUVVGWExFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0SlFVTjZReXhEUVVGRE8wTkJRMG9zUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwidmFsaWRhdG9yXCIpO1xudmFyIFVzZXJfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHMvVXNlclwiKTtcbnZhciBiY3J5cHRqc18xID0gcmVxdWlyZShcImJjcnlwdGpzXCIpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gICAgdXNlcjogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZW5kKHJlcS51c2VyKTtcbiAgICB9LFxuICAgIHVzZXJzOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZCh7fSkuc2VsZWN0KCduYW1lIGVtYWlsIHJvbGUgZGVsZXRlZCcpLnRoZW4oZnVuY3Rpb24gKHVzZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlLCB1c2VyczogdXNlcnMgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSByZXRyaWV2aW5nIHVzZXJzJyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICB1c2VyQnlFbWFpbDogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIGlmICghdmFsaWRhdG9yXzEuaXNFbWFpbChyZXEucGFyYW1zLnVzZXIpKVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdQbGVhc2Ugc3VwcGx5IGEgdmFsaWQgZW1haWwnIH0pO1xuICAgICAgICByZXR1cm4gVXNlcl8xW1wiZGVmYXVsdFwiXS5maW5kQnlFbWFpbChyZXEucGFyYW1zLnVzZXIpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICBpZiAodXNlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2lkOiB1c2VyLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IHVzZXIuY3JlYXRlZEF0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTm8gdXNlciBmb3VuZCB3aXRoIHRoYXQgZW1haWwnIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcgdHJ5aW5nIHRvIGZpbmQgdGhlIHVzZXInIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZUVtYWlsOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgaWYgKCF2YWxpZGF0b3JfMS5pc0VtYWlsKHJlcS5ib2R5LmVtYWlsKSlcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTm90IGEgdmFsaWQgZW1haWwnIH0pO1xuICAgICAgICByZXR1cm4gVXNlcl8xW1wiZGVmYXVsdFwiXS5jb3VudERvY3VtZW50cyh7IGVtYWlsOiByZXEuYm9keS5lbWFpbCB9KS5leGVjKCkudGhlbihmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCAhPT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0VtYWlsIGFkZHJlc3MgYWxyZWFkeSBpbiB1c2UnIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwocmVxLnVzZXIuZW1haWwpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgdXNlci5lbWFpbCA9IHJlcS5ib2R5LmVtYWlsO1xuICAgICAgICAgICAgICAgIHVzZXIuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIHJlcS5pc3N1ZU5ld1Rva2VuKE9iamVjdC5hc3NpZ24oe30sIHJlcS51c2VyLCB7IGVtYWlsOiByZXEuYm9keS5lbWFpbCB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHRyeWluZyB0byBmZXRjaCB0aGUgdXNlcicgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVOYW1lOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwocmVxLnVzZXIuZW1haWwpXG4gICAgICAgICAgICAuZXhlYygpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICAgIHVzZXIubmFtZSA9IHJlcS5ib2R5Lm5hbWU7XG4gICAgICAgICAgICB1c2VyLnNhdmUoKTtcbiAgICAgICAgICAgIHJlcS5pc3N1ZU5ld1Rva2VuKE9iamVjdC5hc3NpZ24oe30sIHJlcS51c2VyLCB7IG5hbWU6IHJlcS5ib2R5Lm5hbWUgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHRyeWluZyB0byB1cGRhdGUgdGhlIHVzZXInIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZVBhc3N3b3JkOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRvcl8xLmlzRW1wdHkocmVxLmJvZHkubmV3UGFzcykgfHwgdmFsaWRhdG9yXzEuaXNFbXB0eShyZXEuYm9keS5vbGRQYXNzKSlcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnTXVzdCBzdXBwbHkgdGhlIGN1cnJlbnQgYW5kIG5ldyBwYXNzd29yZCcgfSk7XG4gICAgICAgIHJldHVybiBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKHJlcS51c2VyLmVtYWlsKS5leGVjKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgaWYgKCFiY3J5cHRqc18xLmNvbXBhcmVTeW5jKHJlcS5ib2R5Lm9sZFBhc3MsIHVzZXIucGFzc3dvcmQpKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnQ3VycmVudCBwYXNzd29yZCBpcyBpbmNvcnJlY3QnIH0pO1xuICAgICAgICAgICAgdXNlci5wYXNzd29yZCA9IGJjcnlwdGpzXzEuaGFzaFN5bmMocmVxLmJvZHkubmV3UGFzcyk7XG4gICAgICAgICAgICB1c2VyLnNhdmUoKTtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVzZXRQYXNzd29yZDogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnTm90IGltcGxlbWVudGVkJyB9KTtcbiAgICB9LFxuICAgIGNyZWF0ZVVzZXI6IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICBpZiAodmFsaWRhdG9yXzEuaXNFbXB0eShyZXEuYm9keS5lbWFpbCkgfHwgIXZhbGlkYXRvcl8xLmlzRW1haWwocmVxLmJvZHkuZW1haWwpIHx8XG4gICAgICAgICAgICB2YWxpZGF0b3JfMS5pc0VtcHR5KHJlcS5ib2R5LnJvbGUpIHx8IChyZXEuYm9keS5yb2xlICE9PSAndXNlcicgJiYgcmVxLmJvZHkucm9sZSAhPT0gJ2FkbWluJykpXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ011c3Qgc3VwcGx5IHZhbGlkIGVtYWlsIGFuZCByb2xlJyB9KTtcbiAgICAgICAgcmV0dXJuIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwocmVxLmJvZHkuZW1haWwpLmNvdW50RG9jdW1lbnRzKGZ1bmN0aW9uIChlcnIsIGMpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB0cnlpbmcgdG8gY291bnQgdXNlcnMgd2l0aCBlbWFpbCAnICsgcmVxLmJvZHkuZW1haWwsIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyAhPT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0VtYWlsIGFkZHJlc3MgaW4gdXNlJyB9KTtcbiAgICAgICAgICAgIHZhciB1ID0gbmV3IFVzZXJfMVtcImRlZmF1bHRcIl0oe1xuICAgICAgICAgICAgICAgIGVtYWlsOiByZXEuYm9keS5lbWFpbCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXEuYm9keS5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgIHJvbGU6IHJlcS5ib2R5LnJvbGUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICd0ZW1wJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHUuc2F2ZShmdW5jdGlvbiAoZXJyLCB1KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB0cnlpbmcgdG8gc2F2ZSB1c2VyJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBlZGl0VXNlcjogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIGlmICghcmVxLmJvZHkuZW1haWwgfHwgIXZhbGlkYXRvcl8xLmlzRW1haWwocmVxLmJvZHkuZW1haWwpKVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdQbGVhc2Ugc3VwcGx5IGEgdmFsaWQgZW1haWwnIH0pO1xuICAgICAgICBpZiAocmVxLmJvZHkudXNlci5lbWFpbCAmJiAhdmFsaWRhdG9yXzEuaXNFbWFpbChyZXEuYm9keS51c2VyLmVtYWlsKSlcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnUGxlYXNlIHN1cHBseSBhIHZhbGlkIGVtYWlsJyB9KTtcbiAgICAgICAgaWYgKHJlcS5ib2R5LnVzZXIucm9sZSAmJiAhdmFsaWRhdG9yXzEuaXNFbXB0eShyZXEuYm9keS51c2VyLnJvbGUpICYmIChyZXEuYm9keS51c2VyLnJvbGUgIT09ICd1c2VyJyAmJiByZXEuYm9keS51c2VyLnJvbGUgIT09ICdhZG1pbicpKVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIHJvbGUnIH0pO1xuICAgICAgICByZXR1cm4gVXNlcl8xW1wiZGVmYXVsdFwiXS5maW5kQnlFbWFpbChyZXEuYm9keS5lbWFpbCkuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVXNlciBkb2VzIG5vdCBleGlzdCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxLmJvZHkudXNlci5lbWFpbClcbiAgICAgICAgICAgICAgICB1c2VyLmVtYWlsID0gcmVxLmJvZHkudXNlci5lbWFpbDtcbiAgICAgICAgICAgIGlmIChyZXEuYm9keS51c2VyLm5hbWUpXG4gICAgICAgICAgICAgICAgdXNlci5uYW1lID0gcmVxLmJvZHkudXNlci5uYW1lO1xuICAgICAgICAgICAgaWYgKHJlcS5ib2R5LnVzZXIucm9sZSlcbiAgICAgICAgICAgICAgICB1c2VyLnJvbGUgPSByZXEuYm9keS51c2VyLnJvbGU7XG4gICAgICAgICAgICByZXR1cm4gdXNlci5zYXZlKGZ1bmN0aW9uIChlcnIsIHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlVXNlcjogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIGlmICghcmVxLmJvZHkuZW1haWwgfHwgIXZhbGlkYXRvcl8xLmlzRW1haWwocmVxLmJvZHkuZW1haWwpKVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIGRhdGEgZm9yIHBhcmFtZXRlciBcImVtYWlsXCInIH0pO1xuICAgICAgICByZXR1cm4gVXNlcl8xW1wiZGVmYXVsdFwiXS5maW5kQnlFbWFpbChyZXEuYm9keS5lbWFpbCkuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdXNlcilcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ1VzZXIgZG9lcyBub3QgZXhpc3QnIH0pO1xuICAgICAgICAgICAgaWYgKHVzZXIuZGVsZXRlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ1VzZXIgYWxyZWFkeSBkZWxldGVkJyB9KTtcbiAgICAgICAgICAgIGlmIChyZXEudXNlci5lbWFpbCA9PT0gcmVxLmJvZHkuZW1haWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdDYW5ub3QgZGVsZXRlIGN1cnJlbnQgdXNlcicgfSk7XG4gICAgICAgICAgICB1c2VyLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHVzZXIuc2F2ZShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHJlc3RvcmVVc2VyOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgaWYgKCFyZXEuYm9keS5lbWFpbCB8fCAhdmFsaWRhdG9yXzEuaXNFbWFpbChyZXEuYm9keS5lbWFpbCkpXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgZGF0YSBmb3IgcGFyYW1ldGVyIFwiZW1haWxcIicgfSk7XG4gICAgICAgIHJldHVybiBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKHJlcS5ib2R5LmVtYWlsKS5leGVjKGZ1bmN0aW9uIChlcnIsIHVzZXIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF1c2VyKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAnVXNlciBkb2VzIG5vdCBleGlzdCcgfSk7XG4gICAgICAgICAgICBpZiAoIXVzZXIuZGVsZXRlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ1VzZXIgYWxyZWFkeSBhY3RpdmUnIH0pO1xuICAgICAgICAgICAgdXNlci5kZWxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdXNlci5zYXZlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkWE5sY2tOdmJuUnliMnhzWlhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZjMlZ5ZG1WeUwyTnZiblJ5YjJ4c1pYSnpMM1Z6WlhKRGIyNTBjbTlzYkdWeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc2RVTkJRVEpETzBGQlJUTkRMSFZEUVVGNVJEdEJRVU42UkN4eFEwRkJLME03UVVGRkwwTXNjVUpCUVdVN1NVRkRXQ3hKUVVGSkxFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0UlFVTTVRaXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOMlFpeERRVUZETzBsQlEwUXNTMEZCU3l4RlFVRkZMRlZCUVVNc1IwRkJXU3hGUVVGRkxFZEJRV0U3VVVGREwwSXNUMEZCVHl4cFFrRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhMUVVGak8xbEJRM1pGTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRlZCUVVNc1IwRkJWVHRaUVVOb1FpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMjVDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc05rTkJRVFpETEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNoR0xFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEwNHNRMEZCUXp0SlFVTkVMRmRCUVZjc1JVRkJSU3hWUVVGRExFZEJRVmtzUlVGQlJTeEhRVUZoTzFGQlEzSkRMRWxCUVVjc1EwRkJReXh0UWtGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRM2hDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc05rSkJRVFpDTEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhoRkxFOUJRVThzYVVKQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eEpRVUZYTzFsQlF6ZEVMRWxCUVVrc1NVRkJTU3hMUVVGTExFbEJRVWtzUlVGQlJUdG5Ra0ZEWml4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVONFFpeEpRVUZKTEVWQlFVVTdkMEpCUTBZc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTzNkQ1FVTnFRaXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVYzdkMEpCUTJJc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0M1FrRkRja0lzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPM2RDUVVObUxFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXp0eFFrRkRNVUk3YVVKQlEwb3NRMEZCUXl4RFFVRkRPMkZCUTA0N1dVRkRSQ3hQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVU1zUzBGQlN5eEZRVUZGTEN0Q1FVRXJRaXhGUVVGRExFTkJRVU1zUTBGQlF6dFJRVVV4UlN4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eFZRVUZETEVkQlFWVTdXVUZEYUVJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTnVRaXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVU1zUzBGQlN5eEZRVUZGTERoRFFVRTRReXhGUVVGRExFTkJRVU1zUTBGQlF6dFJRVU42Uml4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRFJDeFhRVUZYTEVWQlFVVXNWVUZCUXl4SFFVRlpMRVZCUVVVc1IwRkJZVHRSUVVOeVF5eEpRVUZITEVOQlFVTXNiVUpCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0WlFVTjJRaXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5vUlN4UFFVRlBMR2xDUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eExRVUZoTzFsQlF6RkZMRWxCUVVrc1MwRkJTeXhMUVVGTExFTkJRVU03WjBKQlExZ3NUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3c0UWtGQk9FSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRNMFVzVDBGQlR5eHBRa0ZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVsQlFWYzdaMEpCUXpWRUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03WjBKQlF6VkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEV2l4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoRkxFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVOdVJDeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhWUVVGRExFZEJRVlU3WjBKQlEyaENMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTI1Q0xFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNLME5CUVN0RExFVkJRVVVzUTBGQlF5eERRVUZETzFsQlF6VkdMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRPMGxCUTBRc1ZVRkJWU3hGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZEY0VNc1QwRkJUeXhwUWtGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dGhRVU5zUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eEpRVUZYTzFsQlEzSkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRNVUlzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFvc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNoRkxFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkRMRU5CUVVNc1EwRkJRenRSUVVOcVJDeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhWUVVGRExFZEJRVlU3V1VGRGFFSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU51UWl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxHZEVRVUZuUkN4RlFVRkRMRU5CUVVNc1EwRkJRenRSUVVNdlJpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkRSQ3hqUVVGakxFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0UlFVTjRReXhKUVVGSkxHMUNRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeHRRa0ZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzFsQlEzUkVMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzTUVOQlFUQkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM1pHTEU5QlFVOHNhVUpCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4SlFVRlhPMWxCUXpWRUxFbEJRVWtzUTBGQlF5eHpRa0ZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1owSkJRemRETEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc0swSkJRU3RDTEVWQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NiVUpCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUXpORExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTmFMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5PTEVOQlFVTTdTVUZEUkN4aFFVRmhMRVZCUVVVc1ZVRkJReXhIUVVGWkxFVkJRVVVzUjBGQllUdFJRVU4yUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxHbENRVUZwUWl4RlFVRkRMRU5CUVVNc1EwRkJRenRKUVVNMVJDeERRVUZETzBsQlQwUXNWVUZCVlN4RlFVRkZMRlZCUVVNc1IwRkJXU3hGUVVGRkxFZEJRV0U3VVVGRGNFTXNTVUZCUnl4dFFrRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8xbEJRMjVFTEcxQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEUxQlFVMHNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eFBRVUZQTEVOQlFVTTdXVUZEYUVZc1QwRkJUeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeHJRMEZCYTBNc1JVRkJReXhEUVVGRExFTkJRVU03VVVGRE9VVXNUMEZCVHl4cFFrRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eFZRVUZETEVkQlFWRXNSVUZCUlN4RFFVRlRPMWxCUTNaRkxFbEJRVWtzUjBGQlJ5eEZRVUZGTzJkQ1FVTk1MRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zZDBSQlFYZEVMRWRCUVVjc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRemxHTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc2MwSkJRWE5DTEVWQlFVTXNRMEZCUXl4RFFVRkRPMkZCUTJoRk8xbEJRMFFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRVQ3hQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVU1zUzBGQlN5eEZRVUZGTEhOQ1FVRnpRaXhGUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxHbENRVUZKTEVOQlFVTTdaMEpCUTJJc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkRja0lzU1VGQlNTeEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFVkJRVVU3WjBKQlEzcENMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVazdaMEpCUlc1Q0xGRkJRVkVzUlVGQlJTeE5RVUZOTzJGQlEyNUNMRU5CUVVNc1EwRkJRVHRaUVVOR0xFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hEUVVGUk8yZENRVU0zUWl4SlFVRkpMRWRCUVVjc1JVRkJSVHR2UWtGRFRDeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMREJEUVVFd1F5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMjlDUVVNdlJDeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMSE5DUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0cFFrRkRiRVU3WjBKQlEwUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVU1zUTBGQlF5eERRVUZETzFsQlEycEVMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVkFzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEVGl4RFFVRkRPMGxCVlVRc1VVRkJVU3hGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZEYkVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc2JVSkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVNelF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMRFpDUVVFMlFpeEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjRSU3hKUVVGSkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExHMUNRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFsQlEzQkVMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzTmtKQlFUWkNMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRekZGTEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNiVUpCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhOUVVGTkxFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVThzUTBGQlF6dFpRVU4yU0N4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxHTkJRV01zUlVGQlF5eERRVUZETEVOQlFVTTdVVUZEZWtRc1QwRkJUeXhwUWtGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hKUVVGWE8xbEJReTlFTEVsQlFVa3NSMEZCUnl4RlFVRkZPMmRDUVVOTUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTNwRExFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eExRVUZMTEVWQlFVVXNjMEpCUVhOQ0xFVkJRVU1zUTBGQlF5eERRVUZETzJGQlEyaEZPMWxCUTBRc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdG5Ra0ZEVUN4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxIRkNRVUZ4UWl4RlFVRkRMRU5CUVVNc1EwRkJRenRoUVVNdlJEdFpRVU5FTEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN6dG5Ra0ZEYmtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03V1VGRGNrTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzJkQ1FVTnNRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU51UXl4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVazdaMEpCUTJ4Q0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlEyNURMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFWRXNSVUZCUlN4SlFVRlhPMmRDUVVOdVF5eEpRVUZKTEVkQlFVY3NSVUZCUlR0dlFrRkRUQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMjlDUVVOcVFpeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMSE5DUVVGelFpeEZRVUZETEVOQlFVTXNRMEZCUXp0cFFrRkRhRVU3WjBKQlEwUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVU1zUTBGQlF5eERRVUZETzFsQlEycEVMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRPMGxCUTBRc1ZVRkJWU3hGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZEY0VNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc2JVSkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRaUVVNelF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMRzlEUVVGdlF5eEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXZSU3hQUVVGUExHbENRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVNc1IwRkJVU3hGUVVGRkxFbEJRVmM3V1VGREwwUXNTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMHdzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4elFrRkJjMElzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRla01zVDBGQlR5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZETEV0QlFVc3NSVUZCUlN4elFrRkJjMElzUlVGQlF5eERRVUZETEVOQlFVTTdZVUZEYUVVN1dVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNUdG5Ra0ZEVEN4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxIRkNRVUZ4UWl4RlFVRkRMRU5CUVVNc1EwRkJRenRaUVVOb1JTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBPMmRDUVVOYUxFOUJRVThzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eExRVUZMTEVWQlFVVXNjMEpCUVhOQ0xFVkJRVU1zUTBGQlF5eERRVUZETzFsQlEycEZMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEV0QlFVc3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTE8yZENRVU5xUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxEUkNRVUUwUWl4RlFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlJTeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVOd1FpeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhIUVVGUk8yZENRVU4wUWl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUlVGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtRc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFVDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkRSQ3hYUVVGWExFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0UlFVTnlReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXh0UWtGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8xbEJRek5ETEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc2IwTkJRVzlETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJwR0xFOUJRVThzYVVKQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhIUVVGUkxFVkJRVVVzU1VGQlZ6dFpRVU12UkN4SlFVRkpMRWRCUVVjc1JVRkJSVHRuUWtGRFRDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVONlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMSE5DUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0aFFVTnNSVHRaUVVORUxFbEJRVWtzUTBGQlF5eEpRVUZKTzJkQ1FVTk1MRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMnhGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUenRuUWtGRFlpeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTTVSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXp0WlFVTjZRaXhQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4SFFVRlJPMmRDUVVOMFFpeFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGJrUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTTdRMEZEU2l4RFFVRkJJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIE1lc3NhZ2VfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHMvTWVzc2FnZVwiKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0ge1xuICAgIG1lc3NhZ2VzOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmV0dXJuIE1lc3NhZ2VfMVtcImRlZmF1bHRcIl0uZmluZCh7IGNoYW5uZWw6IHJlcS5wYXJhbXMuY2hhbm5lbCB9KVxuICAgICAgICAgICAgLnNraXAocGFyc2VJbnQocmVxLnBhcmFtcy5vZmZlc3QpKVxuICAgICAgICAgICAgLnNvcnQoeyBfaWQ6IC0xIH0pXG4gICAgICAgICAgICAubGltaXQoMjApXG4gICAgICAgICAgICAuZXhlYygpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG0udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IG0uY3JlYXRlZEF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlckVtYWlsOiBtLnVzZXJFbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IG0uY2hhbm5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogbS5faWRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KS5yZXZlcnNlKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAnc29tZXRoaW5nIHdlbnQgd3JvbmcgdHJ5aW5nIHRvIGZldGNoIG1lc3NhZ2VzJyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZjMlZ5ZG1WeUwyTnZiblJ5YjJ4c1pYSnpMMjFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlEwRXNOa05CUVc5RU8wRkJRM0JFTEhGQ1FVRmxPMGxCUTFnc1VVRkJVU3hGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZEYkVNc1QwRkJUeXh2UWtGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUXl4RFFVRkRPMkZCUXpkRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dGhRVU5xUXl4SlFVRkpMRU5CUVVNc1JVRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVTXNRMEZCUXp0aFFVTm1MRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU03WVVGRFZDeEpRVUZKTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhSUVVGdlFqdFpRVU01UWl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVOMlFpeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGRExFTkJRVmM3YjBKQlEyaERMRTlCUVU4N2QwSkJRMGdzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpPM2RDUVVOYUxFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNVMEZCVXp0M1FrRkRjRUlzVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRPM2RDUVVOMFFpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4N2QwSkJRMnhDTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSenR4UWtGRFlpeERRVUZETzJkQ1FVTk1MRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJUdGhRVU5tTEVOQlFVTXNRMEZCUVR0UlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEZWQlFVTXNSMEZCVlR0WlFVTm9RaXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEN0RFFVRXJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU0xUml4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOT0xFTkJRVU03UTBGRFNpeERRVUZCSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBDaGFubmVsXzEgPSByZXF1aXJlKFwiLi4vbW9kZWxzL0NoYW5uZWxcIik7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHtcbiAgICBjaGFubmVsczogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJldHVybiBDaGFubmVsXzFbXCJkZWZhdWx0XCJdLmNvdW50RG9jdW1lbnRzKCkuZXhlYygpLnRoZW4oZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQ2hhbm5lbF8xW1wiZGVmYXVsdFwiXS5jcmVhdGUoW3sgbmFtZTogJ2dlbmVyYWwnIH0sIHsgbmFtZTogJ3JhbmRvbScgfV0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIENoYW5uZWxfMVtcImRlZmF1bHRcIl0uZmluZCgpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uIChjaGFubmVscykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oeyBjaGFubmVsczogY2hhbm5lbHMgfSk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIGZldGNoIGNoYW5uZWxzJyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIHRyeWluZyB0byBjcmVhdGUgZGVmYXVsdCBjaGFubmVscycgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGNvdW50aW5nIGNoYW5uZWxzJyB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBcImRlbGV0ZVwiOiBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyaGhibTVsYkVOdmJuUnliMnhzWlhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTh1TGk5emNtTXZjMlZ5ZG1WeUwyTnZiblJ5YjJ4c1pYSnpMMk5vWVc1dVpXeERiMjUwY205c2JHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlEwRXNOa05CUVc5RU8wRkJSWEJFTEhGQ1FVRmxPMGxCUTFnc1VVRkJVU3hGUVVGRkxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZGYkVNc1QwRkJUeXh2UWtGQlR5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEV0QlFXRTdXVUZEZEVRc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeFBRVUZQTEVOQlFVTXNWVUZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUVHRuUWtGRGFFTXNTVUZCU1N4TFFVRkxMRXRCUVVzc1EwRkJReXhGUVVGRk8yOUNRVU5pTEU5QlFVOHNUMEZCVHl4RlFVRkZMRU5CUVVNN2FVSkJRM0JDTzJkQ1FVTkVMRzlDUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhGUVVGRExFVkJRVVVzUlVGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEZGtRc1QwRkJUeXhQUVVGUExFVkJRVVVzUTBGQlF6dG5Ra0ZEY2tJc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlN5eERRVUZCTEVOQlFVTXNWVUZCUXl4SFFVRlZPMjlDUVVOb1FpeFBRVUZQTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRFZpeHZRa0ZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRkZCUVc5Q08yOUNRVU0xUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNSRUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRlZCUVVNc1IwRkJWVHR2UWtGRGFFSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dHZRa0ZEYWtJc1QwRkJUeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeHhSRUZCY1VRc1JVRkJSU3hEUVVGRExFTkJRVU03WjBKQlEyeEhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMUFzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1ZVRkJReXhIUVVGVk8yZENRVU5vUWl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTnVRaXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVU1zUzBGQlN5eEZRVUZGTERoRVFVRTRSQ3hGUVVGRExFTkJRVU1zUTBGQlF6dFpRVU42Unl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRlZCUVVNc1IwRkJWVHRaUVVOb1FpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMjVDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc09FTkJRVGhETEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNwR0xFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVTkVMRkZCUVUwc1JVRkJSU3hWUVVGRExFZEJRVmtzUlVGQlJTeEhRVUZoTzBsQlJYQkRMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFVkJRVVVzVlVGQlF5eEhRVUZaTEVWQlFVVXNSMEZCWVR0SlFVVndReXhEUVVGRE8wTkJRMG9zUTBGQlFTSjkiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgbW9uZ29vc2VfMSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcbnZhciBjaGFubmVsU2NoZW1hID0gbmV3IG1vbmdvb3NlXzEuU2NoZW1hKHtcbiAgICBuYW1lOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGxvd2VyY2FzZTogdHJ1ZSxcbiAgICB9LFxufSwge1xuICAgIHRpbWVzdGFtcHM6IHRydWVcbn0pO1xudmFyIENoYW5uZWwgPSBtb25nb29zZV8xLm1vZGVsKCdDaGFubmVsJywgY2hhbm5lbFNjaGVtYSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IENoYW5uZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lRMmhoYm01bGJDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTl6WlhKMlpYSXZiVzlrWld4ekwwTm9ZVzV1Wld3dWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4eFEwRkJkMFE3UVVGUmVFUXNTVUZCVFN4aFFVRmhMRWRCUVZjc1NVRkJTU3hwUWtGQlRTeERRVUZETzBsQlEzSkRMRWxCUVVrc1JVRkJSVHRSUVVOR0xFbEJRVWtzUlVGQlJTeE5RVUZOTzFGQlExb3NVVUZCVVN4RlFVRkZMRWxCUVVrN1VVRkRaQ3hUUVVGVExFVkJRVVVzU1VGQlNUdExRVU5zUWp0RFFVTktMRVZCUVVVN1NVRkRReXhWUVVGVkxFVkJRVVVzU1VGQlNUdERRVU51UWl4RFFVRkRMRU5CUVVNN1FVRkZTQ3hKUVVGTkxFOUJRVThzUjBGQmIwSXNaMEpCUVVzc1EwRkJReXhUUVVGVExFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdRVUZEYWtVc2NVSkJRV1VzVDBGQlR5eERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBzb2NrZXRpbyA9IHJlcXVpcmUoXCJzb2NrZXQuaW9cIik7XG52YXIgTWVzc2FnZV8xID0gcmVxdWlyZShcIi4uL21vZGVscy9NZXNzYWdlXCIpO1xudmFyIGF1dGhvcml6ZWRfMSA9IHJlcXVpcmUoXCIuLi9taWRkbGV3YXJlL2F1dGhvcml6ZWRcIik7XG52YXIgZW52ID0gcmVxdWlyZSgnLi4vLi4vLi4vZW52Jyk7XG52YXIgaW5pdCA9IGZ1bmN0aW9uIChzZXJ2ZXIsIGRiLCBzZXNzaW9uTWlkZGxld2FyZSkge1xuICAgIHZhciBpbyA9IHNvY2tldGlvKHNlcnZlcik7XG4gICAgdmFyIGNvbm5lY3RlZFVzZXJFbWFpbHMgPSBbXTtcbiAgICBpby51c2UoZnVuY3Rpb24gKHNvY2tldCwgbmV4dCkge1xuICAgICAgICBzZXNzaW9uTWlkZGxld2FyZShzb2NrZXQucmVxdWVzdCwge30sIG5leHQpO1xuICAgIH0pO1xuICAgIGlvLnVzZShmdW5jdGlvbiAoc29ja2V0LCBuZXh0KSB7XG4gICAgICAgIGF1dGhvcml6ZWRfMVtcImRlZmF1bHRcIl0oc29ja2V0LnJlcXVlc3QsIHt9LCBuZXh0KTtcbiAgICB9KTtcbiAgICBpby5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgICAgICAgY29ubmVjdGVkVXNlckVtYWlscy5wdXNoKHNvY2tldC5yZXF1ZXN0LnVzZXIuZW1haWwpO1xuICAgICAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHVzZXJzJywgY29ubmVjdGVkVXNlckVtYWlscyk7XG4gICAgICAgIGlvLmVtaXQoJ2Nvbm5lY3RlZCB1c2VycycsIGNvbm5lY3RlZFVzZXJFbWFpbHMpO1xuICAgICAgICBzb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25uZWN0ZWRVc2VyRW1haWxzLnNwbGljZShjb25uZWN0ZWRVc2VyRW1haWxzLmluZGV4T2Yoc29ja2V0LnJlcXVlc3QudXNlci5lbWFpbCksIDEpO1xuICAgICAgICAgICAgaW8uZW1pdCgnY29ubmVjdGVkIHVzZXJzJywgY29ubmVjdGVkVXNlckVtYWlscyk7XG4gICAgICAgIH0pO1xuICAgICAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyBNZXNzYWdlXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICBjaGFubmVsOiBtZXNzYWdlLmNoYW5uZWwsXG4gICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZS50ZXh0LFxuICAgICAgICAgICAgICAgIHVzZXJFbWFpbDogc29ja2V0LnJlcXVlc3QudXNlci5lbWFpbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtLnNhdmUoKS50aGVuKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgaW8uZW1pdCgnbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgX2lkOiBtLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgdXNlckVtYWlsOiBtLnVzZXJFbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogbS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiBtLmNoYW5uZWwsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IG0uY3JlYXRlZEF0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ21lc3NhZ2UgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnbWVzc2FnZSByZWNlaXZlIGVycm9yJywgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW87XG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpbml0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOXpjbU12YzJWeWRtVnlMM052WTJ0bGRDNXBieTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxHOURRVUZ6UXp0QlFVZDBReXcyUTBGQmMwUTdRVUZGZEVRc2RVUkJRVFJFTzBGQlJUVkVMRWxCUVUwc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0QlFVMXdReXhKUVVGTkxFbEJRVWtzUjBGQlJ5eFZRVUZETEUxQlFXTXNSVUZCUlN4RlFVRmpMRVZCUVVVc2FVSkJRWE5DTzBsQlEyaEZMRWxCUVUwc1JVRkJSU3hIUVVGdlFpeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkROME1zU1VGQlNTeHRRa0ZCYlVJc1IwRkJZU3hGUVVGRkxFTkJRVU03U1VGRmRrTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTzFGQlEyaENMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyaEVMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMGdzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSk8xRkJSV2hDTEhWQ1FVRnZRaXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMjVFTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUjBZc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVXNWVUZCUXl4TlFVRmpPMUZCUXk5Q0xHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOd1JDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRExFTkJRVU03VVVGRGNFUXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4dFFrRkJiVUlzUTBGQlF5eERRVUZETzFGQlJXaEVMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zV1VGQldTeEZRVUZGTzFsQlEzQkNMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRkRVlzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRM0JFTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlVnc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVWQlFVVXNWVUZCUXl4UFFVRXdRenRaUVVNMVJDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xbEJRM0pDTEVsQlFVa3NRMEZCUXl4SFFVRmhMRWxCUVVrc2IwSkJRVThzUTBGQlF6dG5Ra0ZETVVJc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eFBRVUZQTzJkQ1FVTjRRaXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVazdaMEpCUTJ4Q0xGTkJRVk1zUlVGQlJTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTE8yRkJRM1pETEVOQlFVTXNRMEZCUXp0WlFVTklMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUXl4RFFVRlhPMmRDUVVOMFFpeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHR2UWtGRFppeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjN2IwSkJRMVlzVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRPMjlDUVVOMFFpeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrN2IwSkJRMW9zVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBPMjlDUVVOc1FpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRk5CUVZNN2FVSkJRM1pDTEVOQlFVTXNRMEZCUXp0blFrRkRTQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03V1VGRGNFTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zVlVGQlF5eEhRVUZWTzJkQ1FVTm9RaXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVOdVFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUXpsRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTJRc1EwRkJReXhEUVVGQk8wRkJSVVFzY1VKQlFXVXNTVUZCU1N4RFFVRkRJbjA9IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic29ja2V0LmlvXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjaGFpXzEgPSByZXF1aXJlKFwiY2hhaVwiKTtcbnJlcXVpcmUoXCJtb2NoYVwiKTtcbnZhciBzb2NrZXRpb2NsaWVudCA9IHJlcXVpcmUoXCJzb2NrZXQuaW8tY2xpZW50XCIpO1xudmFyIHN0b3JlXzEgPSByZXF1aXJlKFwiLi4vLi4vc3JjL3dlYi9zdG9yZVwiKTtcbnZhciByZWR1eF8xID0gcmVxdWlyZShcInJlZHV4XCIpO1xudmFyIHVzZXJBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vc3JjL3dlYi9hY3Rpb25zL3VzZXJBY3Rpb25zXCIpO1xudmFyIGNoYW5uZWxzQWN0aW9uc18xID0gcmVxdWlyZShcIi4uLy4uL3NyYy93ZWIvYWN0aW9ucy9jaGFubmVsc0FjdGlvbnNcIik7XG52YXIgbm90aWZpY2F0aW9uc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvbm90aWZpY2F0aW9uc0FjdGlvbnNcIik7XG52YXIgc2lkZWJhckFjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvc2lkZWJhckFjdGlvbnNcIik7XG52YXIgc29ja2V0QWN0aW9uc18xID0gcmVxdWlyZShcIi4uLy4uL3NyYy93ZWIvYWN0aW9ucy9zb2NrZXRBY3Rpb25zXCIpO1xudmFyIGNoYXRVc2Vyc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvY2hhdFVzZXJzQWN0aW9uc1wiKTtcbmZ1bmN0aW9uIGdldFN0b3JlKCkge1xuICAgIHJldHVybiByZWR1eF8xLmNyZWF0ZVN0b3JlKHN0b3JlXzEucm9vdFJlZHVjZXIsIHN0b3JlXzEubWlkZGxld2FyZSk7XG59XG5kZXNjcmliZSgnU3RvcmUgYW5kIFN5bmNocm9ub3VzIEFjdGlvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ1VzZXIgU3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdG9yZTtcbiAgICAgICAgdmFyIHVzZXI7XG4gICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcmUgPSBnZXRTdG9yZSgpO1xuICAgICAgICAgICAgdXNlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCkudXNlcjsgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgbm90IGJlIGF1dGhvcml6ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlcigpLmF1dGhvcml6ZWQpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5lbWFpbCk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlcigpLm5hbWUpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5yb2xlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmUgYXV0aG9yaXplZCBhZnRlciBzZXRBdXRob3JpemVkIGFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZSh1c2VyKCkuYXV0aG9yaXplZCk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLnNldEF1dGhvcml6ZWQodHJ1ZSkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc1RydWUodXNlcigpLmF1dGhvcml6ZWQpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2godXNlckFjdGlvbnNfMS5zZXRBdXRob3JpemVkKGZhbHNlKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlcigpLmF1dGhvcml6ZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIHVzZXIgZGF0YSBhZnRlciBzZXR0aW5nIHRoZSB1c2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5hdXRob3JpemVkKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZSh1c2VyKCkuZW1haWwpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5uYW1lKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZSh1c2VyKCkucm9sZSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLnNldFVzZXIoe1xuICAgICAgICAgICAgICAgIGF1dGhvcml6ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnSmFuZSBEb2UnLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdhZG1pbidcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNUcnVlKHVzZXIoKS5hdXRob3JpemVkKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwodXNlcigpLmVtYWlsLCAndGVzdEB0ZXN0LmNvbScpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbCh1c2VyKCkubmFtZSwgJ0phbmUgRG9lJyk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHVzZXIoKS5yb2xlLCAnYWRtaW4nKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEuc2V0VXNlcih7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXplZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZW1haWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJvbGU6IGZhbHNlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlcigpLmF1dGhvcml6ZWQpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5lbWFpbCk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlcigpLm5hbWUpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKHVzZXIoKS5yb2xlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgbm90IGhhdmUgdXNlciBkYXRhIGFmdGVyIGxvZ2dpbmcgb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2godXNlckFjdGlvbnNfMS5zZXRVc2VyKHtcbiAgICAgICAgICAgICAgICBhdXRob3JpemVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0phbmUgRG9lJyxcbiAgICAgICAgICAgICAgICByb2xlOiAnYWRtaW4nXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLmxvZ291dFVzZXIoKSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLnNldFVzZXIoe1xuICAgICAgICAgICAgICAgIGF1dGhvcml6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByb2xlOiBmYWxzZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnQ2hhbm5lbHMgU3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdG9yZTtcbiAgICAgICAgdmFyIGNoYW5uZWxzO1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlID0gZ2V0U3RvcmUoKTtcbiAgICAgICAgICAgIGNoYW5uZWxzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKS5jaGFubmVsczsgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYWRkIGNoYW5uZWxzIGZyb20gYW4gYXJyYXkgb2YgY2hhbm5lbCBuYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSkpO1xuICAgICAgICAgICAgdmFyIGMwID0gY2hhbm5lbHMoKVswXTtcbiAgICAgICAgICAgIHZhciBjMSA9IGNoYW5uZWxzKClbMV07XG4gICAgICAgICAgICB2YXIgYzIgPSBjaGFubmVscygpWzJdO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYzAsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZ2VuZXJhbCcsXG4gICAgICAgICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgICAgICAgIHJldHJpZXZlTWVzc2FnZXNPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgaGFzTW9yZU1lc3NhZ2VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZldGNoaW5nTmV3TWVzc2FnZXM6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChjMSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdyYW5kb20nLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIGhhc01vcmVNZXNzYWdlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmZXRjaGluZ05ld01lc3NhZ2VzOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYzIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnc29tZXRoaW5nIGVsc2UnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIGhhc01vcmVNZXNzYWdlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmZXRjaGluZ05ld01lc3NhZ2VzOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgZmV0Y2hpbmdOZXdNZXNzYWdlcyBhZnRlciBjYWxsaW5nIHNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzIGFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSkpO1xuICAgICAgICAgICAgY2hhbm5lbHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKGMuZmV0Y2hpbmdOZXdNZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuc2V0Q2hhbm5lbEZldGNoaW5nTmV3TWVzc2FnZXMoYy5uYW1lLCB0cnVlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNoYW5uZWxzKCkuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNUcnVlKGMuZmV0Y2hpbmdOZXdNZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuc2V0Q2hhbm5lbEZldGNoaW5nTmV3TWVzc2FnZXMoYy5uYW1lLCBmYWxzZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjaGFubmVscygpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UoYy5mZXRjaGluZ05ld01lc3NhZ2VzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBpbmNyZW1lbnQgdGhlIGNoYW5uZWwgb2Zmc2V0IGZvciByZXRyaWV2aW5nIG5ldyBtZXNzYWdlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ2dlbmVyYWwnOyB9KS5yZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0LCAwKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoY2hhbm5lbHMoKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5hbWUgPT09ICdyYW5kb20nOyB9KS5yZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0LCAwKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoY2hhbm5lbHMoKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5hbWUgPT09ICdzb21ldGhpbmcgZWxzZSc7IH0pLnJldHJpZXZlTWVzc2FnZXNPZmZzZXQsIDApO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuaW5jcmVtZW50Q2hhbm5lbFJldHJpZXZlTWVzc2FnZXNPZmZzZXQoJ2dlbmVyYWwnLCAyMCkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ2dlbmVyYWwnOyB9KS5yZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0LCAyMCk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5pbmNyZW1lbnRDaGFubmVsUmV0cmlldmVNZXNzYWdlc09mZnNldCgnZ2VuZXJhbCcsIDEpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoY2hhbm5lbHMoKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5hbWUgPT09ICdnZW5lcmFsJzsgfSkucmV0cmlldmVNZXNzYWdlc09mZnNldCwgMjEpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuaW5jcmVtZW50Q2hhbm5lbFJldHJpZXZlTWVzc2FnZXNPZmZzZXQoJ3JhbmRvbScsIDEpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoY2hhbm5lbHMoKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5hbWUgPT09ICdyYW5kb20nOyB9KS5yZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0LCAxKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmluY3JlbWVudENoYW5uZWxSZXRyaWV2ZU1lc3NhZ2VzT2Zmc2V0KCdzb21ldGhpbmcgZWxzZScsIDEpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoY2hhbm5lbHMoKS5maW5kKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5hbWUgPT09ICdzb21ldGhpbmcgZWxzZSc7IH0pLnJldHJpZXZlTWVzc2FnZXNPZmZzZXQsIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIGhhc01vcmVNZXNzYWdlcyBwcm9wZXJ0eSBvbiBhIGNoYW5uZWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRDaGFubmVscyhbJ2dlbmVyYWwnLCAncmFuZG9tJywgJ3NvbWV0aGluZyBlbHNlJ10pKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNUcnVlKGNoYW5uZWxzKCkuZmluZChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5uYW1lID09PSAnZ2VuZXJhbCc7IH0pLmhhc01vcmVNZXNzYWdlcyk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzVHJ1ZShjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ3JhbmRvbSc7IH0pLmhhc01vcmVNZXNzYWdlcyk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzVHJ1ZShjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ3NvbWV0aGluZyBlbHNlJzsgfSkuaGFzTW9yZU1lc3NhZ2VzKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLnNldENoYW5uZWxIYXNNb3JlTWVzc2FnZXMoJ2dlbmVyYWwnLCBmYWxzZSkpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuc2V0Q2hhbm5lbEhhc01vcmVNZXNzYWdlcygncmFuZG9tJywgZmFsc2UpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLnNldENoYW5uZWxIYXNNb3JlTWVzc2FnZXMoJ3NvbWV0aGluZyBlbHNlJywgZmFsc2UpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZShjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ2dlbmVyYWwnOyB9KS5oYXNNb3JlTWVzc2FnZXMpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc0ZhbHNlKGNoYW5uZWxzKCkuZmluZChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5uYW1lID09PSAncmFuZG9tJzsgfSkuaGFzTW9yZU1lc3NhZ2VzKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZShjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ3NvbWV0aGluZyBlbHNlJzsgfSkuaGFzTW9yZU1lc3NhZ2VzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYWRkIGEgcmVjZWl2ZWQgbWVzc2FnZSB0byB0aGUgYXBwcm9wcmlhdGUgY2hhbm5lbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSkpO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgdXNlckVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgY3JlYXRlZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIF9pZDogJzEnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICd0aGlzIGlzIHRoZSBtZXNzYWdlJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRSZWNlaXZlZENoYW5uZWxNZXNzYWdlKCdnZW5lcmFsJywgbWVzc2FnZSkpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmVjZWl2ZWRDaGFubmVsTWVzc2FnZSgncmFuZG9tJywgbWVzc2FnZSkpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmVjZWl2ZWRDaGFubmVsTWVzc2FnZSgncmFuZG9tJywgbWVzc2FnZSkpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmVjZWl2ZWRDaGFubmVsTWVzc2FnZSgnc29tZXRoaW5nIGVsc2UnLCBtZXNzYWdlKSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRSZWNlaXZlZENoYW5uZWxNZXNzYWdlKCdzb21ldGhpbmcgZWxzZScsIG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZFJlY2VpdmVkQ2hhbm5lbE1lc3NhZ2UoJ3NvbWV0aGluZyBlbHNlJywgbWVzc2FnZSkpO1xuICAgICAgICAgICAgdmFyIGdlbmVyYWxNZXNzYWdlcyA9IGNoYW5uZWxzKCkuZmluZChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5uYW1lID09PSAnZ2VuZXJhbCc7IH0pLm1lc3NhZ2VzO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoZ2VuZXJhbE1lc3NhZ2VzLmxlbmd0aCwgMSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChnZW5lcmFsTWVzc2FnZXMsIFttZXNzYWdlXSk7XG4gICAgICAgICAgICB2YXIgcmFuZG9tTWVzc2FnZXMgPSBjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ3JhbmRvbSc7IH0pLm1lc3NhZ2VzO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwocmFuZG9tTWVzc2FnZXMubGVuZ3RoLCAyKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKHJhbmRvbU1lc3NhZ2VzLCBbbWVzc2FnZSwgbWVzc2FnZV0pO1xuICAgICAgICAgICAgdmFyIG90aGVyTWVzc2FnZXMgPSBjaGFubmVscygpLmZpbmQoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmFtZSA9PT0gJ3NvbWV0aGluZyBlbHNlJzsgfSkubWVzc2FnZXM7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChvdGhlck1lc3NhZ2VzLmxlbmd0aCwgMyk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChvdGhlck1lc3NhZ2VzLCBbbWVzc2FnZSwgbWVzc2FnZSwgbWVzc2FnZV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBhZGQgcmV0cmVpdmVkIG1lc3NhZ2VzIHRvIHRoZSBhcHByb3ByaWF0ZSBjaGFubmVsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkQ2hhbm5lbHMoWydnZW5lcmFsJywgJ3JhbmRvbScsICdzb21ldGhpbmcgZWxzZSddKSk7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSBbXG4gICAgICAgICAgICAgICAgeyBcInRleHRcIjogXCJTb21ldGhpbmcgaGVyZVwiLCBcImNyZWF0ZWRcIjogXCIyMDE5LTA0LTEzVDE2OjQ1OjI4Ljk0NlpcIiwgXCJ1c2VyRW1haWxcIjogXCJhYmtvdGhtYW5AZ21haWwuY29tXCIsIFwiX2lkXCI6IFwiNWNiMjEyMjgxZDY0NWEyMmFiZWE4ZGJlXCIgfSxcbiAgICAgICAgICAgICAgICB7IFwidGV4dFwiOiBcIjEyMzQxMjM0XCIsIFwiY3JlYXRlZFwiOiBcIjIwMTktMDQtMTRUMjI6MzQ6MDYuNjg2WlwiLCBcInVzZXJFbWFpbFwiOiBcImFia290aG1hbkBnbWFpbC5jb21cIiwgXCJfaWRcIjogXCI1Y2IzYjU1ZWNiZjY4YzZhOTU0ZWFmYjNcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJ0ZXh0XCI6IFwidGVzdCBvbmUgdHdvIHRocmVlXCIsIFwiY3JlYXRlZFwiOiBcIjIwMTktMDQtMTRUMjI6MzQ6MTAuOTAzWlwiLCBcInVzZXJFbWFpbFwiOiBcImFia290aG1hbkBnbWFpbC5jb21cIiwgXCJfaWRcIjogXCI1Y2IzYjU2MmNiZjY4YzZhOTU0ZWFmYjRcIiB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmV0cmlldmVkQ2hhbm5lbE1lc3NhZ2VzKCdnZW5lcmFsJywgbWVzc2FnZXMpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZFJldHJpZXZlZENoYW5uZWxNZXNzYWdlcygncmFuZG9tJywgbWVzc2FnZXMpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmFkZFJldHJpZXZlZENoYW5uZWxNZXNzYWdlcygncmFuZG9tJywgbWVzc2FnZXMpKTtcbiAgICAgICAgICAgIHZhciBjaGFubmVsU3RhdGUgPSBjaGFubmVscygpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoY2hhbm5lbFN0YXRlXG4gICAgICAgICAgICAgICAgLmZpbmQoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubmFtZSA9PT0gJ2dlbmVyYWwnOyB9KVxuICAgICAgICAgICAgICAgIC5tZXNzYWdlcywgbWVzc2FnZXMpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoY2hhbm5lbFN0YXRlXG4gICAgICAgICAgICAgICAgLmZpbmQoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubmFtZSA9PT0gJ3JhbmRvbSc7IH0pXG4gICAgICAgICAgICAgICAgLm1lc3NhZ2VzLCBtZXNzYWdlcy5jb25jYXQobWVzc2FnZXMpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGNoYW5uZWxTdGF0ZVxuICAgICAgICAgICAgICAgIC5maW5kKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLm5hbWUgPT09ICdzb21ldGhpbmcgZWxzZSc7IH0pXG4gICAgICAgICAgICAgICAgLm1lc3NhZ2VzLCBbXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGNsZWFyIGFsbCBjaGFubmVsIGRhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRDaGFubmVscyhbJ2dlbmVyYWwnLCAncmFuZG9tJywgJ3NvbWV0aGluZyBlbHNlJ10pKTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlcyA9IFtcbiAgICAgICAgICAgICAgICB7IFwidGV4dFwiOiBcIlNvbWV0aGluZyBoZXJlXCIsIFwiY3JlYXRlZFwiOiBcIjIwMTktMDQtMTNUMTY6NDU6MjguOTQ2WlwiLCBcInVzZXJFbWFpbFwiOiBcImFia290aG1hbkBnbWFpbC5jb21cIiwgXCJfaWRcIjogXCI1Y2IyMTIyODFkNjQ1YTIyYWJlYThkYmVcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJ0ZXh0XCI6IFwiMTIzNDEyMzRcIiwgXCJjcmVhdGVkXCI6IFwiMjAxOS0wNC0xNFQyMjozNDowNi42ODZaXCIsIFwidXNlckVtYWlsXCI6IFwiYWJrb3RobWFuQGdtYWlsLmNvbVwiLCBcIl9pZFwiOiBcIjVjYjNiNTVlY2JmNjhjNmE5NTRlYWZiM1wiIH0sXG4gICAgICAgICAgICAgICAgeyBcInRleHRcIjogXCJ0ZXN0IG9uZSB0d28gdGhyZWVcIiwgXCJjcmVhdGVkXCI6IFwiMjAxOS0wNC0xNFQyMjozNDoxMC45MDNaXCIsIFwidXNlckVtYWlsXCI6IFwiYWJrb3RobWFuQGdtYWlsLmNvbVwiLCBcIl9pZFwiOiBcIjVjYjNiNTYyY2JmNjhjNmE5NTRlYWZiNFwiIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRSZXRyaWV2ZWRDaGFubmVsTWVzc2FnZXMoJ2dlbmVyYWwnLCBtZXNzYWdlcykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmV0cmlldmVkQ2hhbm5lbE1lc3NhZ2VzKCdyYW5kb20nLCBtZXNzYWdlcykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkUmV0cmlldmVkQ2hhbm5lbE1lc3NhZ2VzKCdyYW5kb20nLCBtZXNzYWdlcykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuY2xlYXJDaGFubmVsc0RhdGEoKSk7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbFN0YXRlID0gY2hhbm5lbHMoKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGNoYW5uZWxTdGF0ZSwgW10pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnTm90aWZpY2F0aW9ucyBTdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0b3JlO1xuICAgICAgICB2YXIgbm90aWZpY2F0aW9ucztcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZSA9IGdldFN0b3JlKCk7XG4gICAgICAgICAgICBub3RpZmljYXRpb25zID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKS5ub3RpZmljYXRpb25zOyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBhZGQgZXJyb3JzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmVycm9ycywgW10pO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignVGVzdCBlcnJvcicpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKG5vdGlmaWNhdGlvbnMoKS5lcnJvcnMsIFsnVGVzdCBlcnJvciddKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ0Fub3RoZXIgZXJyb3InKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChub3RpZmljYXRpb25zKCkuZXJyb3JzLCBbJ1Rlc3QgZXJyb3InLCAnQW5vdGhlciBlcnJvciddKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVtb3ZlIGVycm9ycyBnaXZlbiBhbiBpbmRleCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1Rlc3QgZXJyb3InKSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdBbm90aGVyIGVycm9yJykpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmVycm9ycywgWydUZXN0IGVycm9yJywgJ0Fub3RoZXIgZXJyb3InXSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLnJlbW92ZUVycm9yKDEpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKG5vdGlmaWNhdGlvbnMoKS5lcnJvcnMsIFsnVGVzdCBlcnJvciddKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEucmVtb3ZlRXJyb3IoMCkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmVycm9ycywgW10pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBjbGVhciBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdUZXN0IGVycm9yJykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignQW5vdGhlciBlcnJvcicpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuY2xlYXJFcnJvcnMoKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChub3RpZmljYXRpb25zKCkuZXJyb3JzLCBbXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGFkZCBpbmZvJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmluZm9zLCBbXSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ1Rlc3QgaW5mbycpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKG5vdGlmaWNhdGlvbnMoKS5pbmZvcywgWydUZXN0IGluZm8nXSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ0Fub3RoZXIgaW5mbycpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKG5vdGlmaWNhdGlvbnMoKS5pbmZvcywgWydUZXN0IGluZm8nLCAnQW5vdGhlciBpbmZvJ10pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgaW5mbyBnaXZlbiBhbiBpbmRleCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnVGVzdCBpbmZvJykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRJbmZvKCdBbm90aGVyIGluZm8nKSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLnJlbW92ZUluZm8oMSkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmluZm9zLCBbJ1Rlc3QgaW5mbyddKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEucmVtb3ZlSW5mbygwKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChub3RpZmljYXRpb25zKCkuaW5mb3MsIFtdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgY2xlYXIgaW5mb3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ1Rlc3QgaW5mbycpKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnQW5vdGhlciBpbmZvJykpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2gobm90aWZpY2F0aW9uc0FjdGlvbnNfMS5jbGVhckluZm9zKCkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwobm90aWZpY2F0aW9ucygpLmluZm9zLCBbXSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdTaWRlYmFyIFN0YXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RvcmU7XG4gICAgICAgIHZhciBzaWRlYmFyO1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlID0gZ2V0U3RvcmUoKTtcbiAgICAgICAgICAgIHNpZGViYXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpLnNpZGViYXI7IH07XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuIHN0YXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc1RydWUoc2lkZWJhcigpLm9wZW4pO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2lkZWJhckFjdGlvbnNfMS50b2dnbGVTaWRlYmFyT3BlbigpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZShzaWRlYmFyKCkub3Blbik7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzaWRlYmFyQWN0aW9uc18xLnRvZ2dsZVNpZGViYXJPcGVuKCkpO1xuICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc1RydWUoc2lkZWJhcigpLm9wZW4pO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2lkZWJhckFjdGlvbnNfMS50b2dnbGVTaWRlYmFyT3BlbigpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZShzaWRlYmFyKCkub3Blbik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdTb2NrZXQgU3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdG9yZTtcbiAgICAgICAgdmFyIHNvY2tldDtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdG9yZSA9IGdldFN0b3JlKCk7XG4gICAgICAgICAgICBzb2NrZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpLnNvY2tldDsgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc2V0IHRoZSBzb2NrZXQgZ2l2ZW4gYSBTb2NrZXRJT0NsaWVudCBTb2NrZXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzb2NrZXQoKSwge1xuICAgICAgICAgICAgICAgIGlvOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkVXNlckVtYWlsczogW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHNvY2tldGlvID0gc29ja2V0aW9jbGllbnQoKTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNvY2tldEFjdGlvbnNfMS5pbml0V2Vic29ja2V0KHNvY2tldGlvKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzb2NrZXQoKSwge1xuICAgICAgICAgICAgICAgIGlvOiBzb2NrZXRpbyxcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZFVzZXJFbWFpbHM6IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNvY2tldGlvLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgY29ubmVjdGVkIHN0YXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc29ja2V0QWN0aW9uc18xLnNldFNvY2tldENvbm5lY3RlZCh0cnVlKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzb2NrZXQoKSwge1xuICAgICAgICAgICAgICAgIGlvOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWRVc2VyRW1haWxzOiBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzb2NrZXRBY3Rpb25zXzEuc2V0U29ja2V0Q29ubmVjdGVkKGZhbHNlKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChzb2NrZXQoKSwge1xuICAgICAgICAgICAgICAgIGlvOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkVXNlckVtYWlsczogW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIGNvbm5lY3RlZCB1c2VycycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbWFpbHMgPSBbJ3Rlc3RAdGVzdC5jb20nLCAndGVzdDJAdGVzdC5jb20nXTtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNvY2tldEFjdGlvbnNfMS5zZXRTb2NrZXRDb25uZWN0ZWRVc2VycyhlbWFpbHMpKTtcbiAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKHNvY2tldCgpLCB7XG4gICAgICAgICAgICAgICAgaW86IG51bGwsXG4gICAgICAgICAgICAgICAgY29ubmVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWRVc2VyRW1haWxzOiBlbWFpbHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnQ2hhdCBVc2VycyBTdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0b3JlO1xuICAgICAgICB2YXIgY2hhdFVzZXJzO1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0b3JlID0gZ2V0U3RvcmUoKTtcbiAgICAgICAgICAgIGNoYXRVc2VycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCkuY2hhdFVzZXJzOyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdXNlcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdXNlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ3Rlc3RAdGVzdC5jb20nOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1Rlc3QgTmFtZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICd0ZXN0MkB0ZXN0LmNvbSc6IHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0Fub3RoZXIgdGVzdCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICd0ZXN0M0B0ZXN0LmNvbSc6IHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0xhc3QgdGVzdCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goY2hhdFVzZXJzQWN0aW9uc18xLnVwZGF0ZVVzZXJzKHVzZXJzKSk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChjaGF0VXNlcnMoKSwgdXNlcnMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEdWemRGTjBiM0psTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZkR1Z6ZEhNdmQyVmlMM1JsYzNSVGRHOXlaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRFpDUVVFNFFqdEJRVU01UWl4cFFrRkJaVHRCUVVObUxHbEVRVUZ0UkR0QlFVVnVSQ3cyUTBGQmJVVTdRVUZGYmtVc0swSkJRVEpETzBGQlF6TkRMR2xGUVVGMVJqdEJRVU4yUml4NVJVRkJhVkE3UVVGRmFsQXNiVVpCUVdsSk8wRkJRMnBKTEhWRlFVRjVSVHRCUVVONlJTeHhSVUZCYVVnN1FVRkRha2dzTWtWQlFUQkdPMEZCUnpGR0xGTkJRVk1zVVVGQlVUdEpRVU5pTEU5QlFVOHNiVUpCUVZjc1EwRkJReXh0UWtGQlZ5eEZRVUZGTEd0Q1FVRlZMRU5CUVVNc1EwRkJRenRCUVVOb1JDeERRVUZETzBGQlJVUXNVVUZCVVN4RFFVRkRMQ3RDUVVFclFpeEZRVUZGTzBsQlEzUkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFVkJRVVU3VVVGRGJrSXNTVUZCU1N4TFFVRnRRaXhEUVVGRE8xRkJRM2hDTEVsQlFVa3NTVUZCTWtJc1EwRkJRenRSUVVOb1F5eFZRVUZWTEVOQlFVTTdXVUZEVUN4TFFVRkxMRWRCUVVjc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGJrSXNTVUZCU1N4SFFVRkhMR05CUVUwc1QwRkJRU3hMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVRnlRaXhEUVVGeFFpeERRVUZETzFGQlEzWkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETERCQ1FVRXdRaXhGUVVGRk8xbEJRek5DTEdGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZEYkVNc1lVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVNM1FpeGhRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlF6VkNMR0ZCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRhRU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2FVUkJRV2xFTEVWQlFVVTdXVUZEYkVRc1lVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRaUVVOc1F5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMREpDUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTndReXhoUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xbEJRMnBETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc01rSkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRExHRkJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGRFTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zT0VOQlFUaERMRVZCUVVVN1dVRkRMME1zWVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFpRVU5zUXl4aFFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUXpkQ0xHRkJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRE5VSXNZVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTTFRaXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEhGQ1FVRlBMRU5CUVVNN1owSkJRMjVDTEZWQlFWVXNSVUZCUlN4SlFVRkpPMmRDUVVOb1FpeExRVUZMTEVWQlFVVXNaVUZCWlR0blFrRkRkRUlzU1VGQlNTeEZRVUZGTEZWQlFWVTdaMEpCUTJoQ0xFbEJRVWtzUlVGQlJTeFBRVUZQTzJGQlEyaENMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMG9zWVVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFpRVU5xUXl4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRenRaUVVOc1JDeGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0WlFVTTFReXhoUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dFpRVU42UXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExIRkNRVUZQTEVOQlFVTTdaMEpCUTI1Q0xGVkJRVlVzUlVGQlJTeExRVUZMTzJkQ1FVTnFRaXhMUVVGTExFVkJRVVVzUzBGQlN6dG5Ra0ZEV2l4SlFVRkpMRVZCUVVVc1MwRkJTenRuUWtGRFdDeEpRVUZKTEVWQlFVVXNTMEZCU3p0aFFVTmtMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMG9zWVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFpRVU5zUXl4aFFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUXpkQ0xHRkJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRE5VSXNZVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTm9ReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl3MlEwRkJOa01zUlVGQlJUdFpRVU01UXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExIRkNRVUZQTEVOQlFVTTdaMEpCUTI1Q0xGVkJRVlVzUlVGQlJTeEpRVUZKTzJkQ1FVTm9RaXhMUVVGTExFVkJRVVVzWlVGQlpUdG5Ra0ZEZEVJc1NVRkJTU3hGUVVGRkxGVkJRVlU3WjBKQlEyaENMRWxCUVVrc1JVRkJSU3hQUVVGUE8yRkJRMmhDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBvc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eDNRa0ZCVlN4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVNM1FpeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMSEZDUVVGUExFTkJRVU03WjBKQlEyNUNMRlZCUVZVc1JVRkJSU3hMUVVGTE8yZENRVU5xUWl4TFFVRkxMRVZCUVVVc1MwRkJTenRuUWtGRFdpeEpRVUZKTEVWQlFVVXNTMEZCU3p0blFrRkRXQ3hKUVVGSkxFVkJRVVVzUzBGQlN6dGhRVU5rTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFJc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTklMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0UlFVTjJRaXhKUVVGSkxFdEJRVzFDTEVOQlFVTTdVVUZEZUVJc1NVRkJTU3hSUVVGdFF5eERRVUZETzFGQlEzaERMRlZCUVZVc1EwRkJRenRaUVVOUUxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVWQlFVVXNRMEZCUXp0WlFVTnVRaXhSUVVGUkxFZEJRVWNzWTBGQlRTeFBRVUZCTEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRWHBDTEVOQlFYbENMRU5CUVVNN1VVRkRMME1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2IwUkJRVzlFTEVWQlFVVTdXVUZEY2tRc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5dzJRa0ZCVnl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxGRkJRVkVzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU55UlN4SlFVRkpMRVZCUVVVc1IwRkJlVUlzVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkROME1zU1VGQlNTeEZRVUZGTEVkQlFYbENMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZERMRWxCUVVrc1JVRkJSU3hIUVVGNVFpeFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1F5eGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRuUWtGRGRrSXNTVUZCU1N4RlFVRkZMRk5CUVZNN1owSkJRMllzVVVGQlVTeEZRVUZGTEVWQlFVVTdaMEpCUTFvc2MwSkJRWE5DTEVWQlFVVXNRMEZCUXp0blFrRkRla0lzWlVGQlpTeEZRVUZGTEVsQlFVazdaMEpCUTNKQ0xHMUNRVUZ0UWl4RlFVRkZMRXRCUVVzN1lVRkROMElzUTBGQlF5eERRVUZETzFsQlEwZ3NZVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhGUVVGRkxFVkJRVVU3WjBKQlEzWkNMRWxCUVVrc1JVRkJSU3hSUVVGUk8yZENRVU5rTEZGQlFWRXNSVUZCUlN4RlFVRkZPMmRDUVVOYUxITkNRVUZ6UWl4RlFVRkZMRU5CUVVNN1owSkJRM3BDTEdWQlFXVXNSVUZCUlN4SlFVRkpPMmRDUVVOeVFpeHRRa0ZCYlVJc1JVRkJSU3hMUVVGTE8yRkJRemRDTEVOQlFVTXNRMEZCUXp0WlFVTklMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTjJRaXhKUVVGSkxFVkJRVVVzWjBKQlFXZENPMmRDUVVOMFFpeFJRVUZSTEVWQlFVVXNSVUZCUlR0blFrRkRXaXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRPMmRDUVVONlFpeGxRVUZsTEVWQlFVVXNTVUZCU1R0blFrRkRja0lzYlVKQlFXMUNMRVZCUVVVc1MwRkJTenRoUVVNM1FpeERRVUZETEVOQlFVTTdVVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eHpSa0ZCYzBZc1JVRkJSVHRaUVVOMlJpeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRFpDUVVGWExFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNVVUZCVVN4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRkxGRkJRVkVzUlVGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkRMRU5CUVhWQ08yZENRVU4yUXl4aFFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8yZENRVU4wUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExDdERRVUUyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9SU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEZGQlFWRXNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGRExFTkJRWFZDTzJkQ1FVTjJReXhoUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzJkQ1FVTnlReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEN0RFFVRTJRaXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOcVJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTklMRkZCUVZFc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEVOQlFYVkNPMmRDUVVOMlF5eGhRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMWxCUXpGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zYVVWQlFXbEZMRVZCUVVVN1dVRkRiRVVzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl3MlFrRkJWeXhEUVVGRExFTkJRVU1zVTBGQlV5eEZRVUZGTEZGQlFWRXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlSU3hoUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGQkxFTkJRVU1zU1VGQlNTeFBRVUZCTEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1UwRkJVeXhGUVVGd1FpeERRVUZ2UWl4RFFVRkRMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla1lzWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExGRkJRVkVzUlVGQmJrSXNRMEZCYlVJc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM2hHTEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVRXNRMEZCUXl4SlFVRkpMRTlCUVVFc1EwRkJReXhEUVVGRExFbEJRVWtzUzBGQlN5eG5Ra0ZCWjBJc1JVRkJNMElzUTBGQk1rSXNRMEZCUXl4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoSExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMFJCUVhORExFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1dVRkRja1VzWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExGTkJRVk1zUlVGQmNFSXNRMEZCYjBJc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRekZHTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc2QwUkJRWE5ETEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3V1VGRGNFVXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4RFFVRkRMRWxCUVVrc1QwRkJRU3hEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEZOQlFWTXNSVUZCY0VJc1EwRkJiMElzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFsQlF6RkdMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zZDBSQlFYTkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdXVUZEYmtVc1lVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJRU3hEUVVGRExFbEJRVWtzVDBGQlFTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJia0lzUTBGQmJVSXNRMEZCUXl4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNoR0xFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNkMFJCUVhORExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFpRVU16UlN4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRU5CUVVNc1NVRkJTU3hQUVVGQkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NaMEpCUVdkQ0xFVkJRVE5DTEVOQlFUSkNMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOd1J5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXg1UkVGQmVVUXNSVUZCUlR0WlFVTXhSQ3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERaQ1FVRlhMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzVVVGQlVTeEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzSkZMR0ZCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4VFFVRlRMRVZCUVhCQ0xFTkJRVzlDTEVOQlFVTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRaUVVNeFJTeGhRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZCTEVOQlFVTXNTVUZCU1N4UFFVRkJMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVTeEZRVUZ1UWl4RFFVRnRRaXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdXVUZEZWtVc1lVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJRU3hEUVVGRExFbEJRVWtzVDBGQlFTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMR2RDUVVGblFpeEZRVUV6UWl4RFFVRXlRaXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdXVUZEYWtZc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5d3lRMEZCZVVJc1EwRkJReXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTFSQ3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERKRFFVRjVRaXhEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXpORUxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNNa05CUVhsQ0xFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UlN4aFFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRU5CUVVNc1NVRkJTU3hQUVVGQkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4RlFVRndRaXhEUVVGdlFpeERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1dVRkRNMFVzWVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlFTeERRVUZETEVsQlFVa3NUMEZCUVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExGRkJRVkVzUlVGQmJrSXNRMEZCYlVJc1EwRkJReXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzFsQlF6RkZMR0ZCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVFc1EwRkJReXhKUVVGSkxFOUJRVUVzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4blFrRkJaMElzUlVGQk0wSXNRMEZCTWtJc1EwRkJReXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzFGQlEzUkdMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETERCRVFVRXdSQ3hGUVVGRk8xbEJRek5FTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc05rSkJRVmNzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja1VzU1VGQlNTeFBRVUZQTEVkQlFWazdaMEpCUTI1Q0xGTkJRVk1zUlVGQlJTeGxRVUZsTzJkQ1FVTXhRaXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSVHRuUWtGRE9VSXNSMEZCUnl4RlFVRkZMRWRCUVVjN1owSkJRMUlzU1VGQlNTeEZRVUZGTEhGQ1FVRnhRanRoUVVNNVFpeERRVUZETzFsQlJVWXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXd5UTBGQmVVSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU01UkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExESkRRVUY1UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6ZEVMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zTWtOQlFYbENMRU5CUVVNc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETjBRc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5d3lRMEZCZVVJc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0pGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc01rTkJRWGxDTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlSU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERKRFFVRjVRaXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03V1VGRmNrVXNTVUZCU1N4bFFVRmxMRWRCUVdNc1VVRkJVU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVRXNRMEZCUXl4SlFVRkpMRTlCUVVFc1EwRkJReXhEUVVGRExFbEJRVWtzUzBGQlN5eFRRVUZUTEVWQlFYQkNMRU5CUVc5Q0xFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZEY2tZc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMnhFTEdGQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnVSQ3hKUVVGSkxHTkJRV01zUjBGQll5eFJRVUZSTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJRU3hEUVVGRExFbEJRVWtzVDBGQlFTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJia0lzUTBGQmJVSXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVOdVJpeGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtRc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU16UkN4SlFVRkpMR0ZCUVdFc1IwRkJZeXhSUVVGUkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCUVN4RFFVRkRMRWxCUVVrc1QwRkJRU3hEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEdkQ1FVRm5RaXhGUVVFelFpeERRVUV5UWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRE8xbEJRekZHTEdGQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1lVRkJZU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9SQ3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl3d1JFRkJNRVFzUlVGQlJUdFpRVU16UkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExEWkNRVUZYTEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM0pGTEVsQlFVa3NVVUZCVVN4SFFVRmpPMmRDUVVOMFFpeEZRVUZGTEUxQlFVMHNSVUZCUlN4blFrRkJaMElzUlVGQlJTeFRRVUZUTEVWQlFVVXNNRUpCUVRCQ0xFVkJRVVVzVjBGQlZ5eEZRVUZGTEhGQ1FVRnhRaXhGUVVGRkxFdEJRVXNzUlVGQlJTd3dRa0ZCTUVJc1JVRkJSVHRuUWtGRE1Va3NSVUZCUlN4TlFVRk5MRVZCUVVVc1ZVRkJWU3hGUVVGRkxGTkJRVk1zUlVGQlJTd3dRa0ZCTUVJc1JVRkJSU3hYUVVGWExFVkJRVVVzY1VKQlFYRkNMRVZCUVVjc1MwRkJTeXhGUVVGRkxEQkNRVUV3UWl4RlFVRkZPMmRDUVVOeVNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeFRRVUZUTEVWQlFVVXNNRUpCUVRCQ0xFVkJRVVVzVjBGQlZ5eEZRVUZGTEhGQ1FVRnhRaXhGUVVGRkxFdEJRVXNzUlVGQlJTd3dRa0ZCTUVJc1JVRkJSVHRoUVVGRExFTkJRVU03V1VGRGNFb3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXcyUTBGQk1rSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUlN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExEWkRRVUV5UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaEZMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zTmtOQlFUSkNMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYUVVc1NVRkJTU3haUVVGWkxFZEJRVWNzVVVGQlVTeEZRVUZGTEVOQlFVTTdXVUZET1VJc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGRGJFSXNXVUZCV1R0cFFrRkRVQ3hKUVVGSkxFTkJRVU1zVlVGQlF5eERRVUZETEVsQlFVc3NUMEZCUVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExGTkJRVk1zUlVGQmNFSXNRMEZCYjBJc1EwRkJRenRwUWtGRGFrTXNVVUZCVVN4RlFVTmlMRkZCUVZFc1EwRkJReXhEUVVGRE8xbEJRMlFzWVVGQlRTeERRVUZETEdWQlFXVXNRMEZEYkVJc1dVRkJXVHRwUWtGRFVDeEpRVUZKTEVOQlFVTXNWVUZCUXl4RFFVRkRMRWxCUVVzc1QwRkJRU3hEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEZGQlFWRXNSVUZCYmtJc1EwRkJiVUlzUTBGQlF6dHBRa0ZEYUVNc1VVRkJVU3hGUVVOaUxGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNdlFpeGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVTnNRaXhaUVVGWk8ybENRVU5RTEVsQlFVa3NRMEZCUXl4VlFVRkRMRU5CUVVNc1NVRkJTeXhQUVVGQkxFTkJRVU1zUTBGQlF5eEpRVUZKTEV0QlFVc3NaMEpCUVdkQ0xFVkJRVE5DTEVOQlFUSkNMRU5CUVVNN2FVSkJRM2hETEZGQlFWRXNSVUZEWWl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOYUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMQ3RDUVVFclFpeEZRVUZGTzFsQlEyaERMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zTmtKQlFWY3NRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hSUVVGUkxFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNrVXNTVUZCU1N4UlFVRlJMRWRCUVdNN1owSkJRM1JDTEVWQlFVVXNUVUZCVFN4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEZOQlFWTXNSVUZCUlN3d1FrRkJNRUlzUlVGQlJTeFhRVUZYTEVWQlFVVXNjVUpCUVhGQ0xFVkJRVVVzUzBGQlN5eEZRVUZGTERCQ1FVRXdRaXhGUVVGRk8yZENRVU14U1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFVkJRVVVzVTBGQlV5eEZRVUZGTERCQ1FVRXdRaXhGUVVGRkxGZEJRVmNzUlVGQlJTeHhRa0ZCY1VJc1JVRkJSU3hMUVVGTExFVkJRVVVzTUVKQlFUQkNMRVZCUVVVN1owSkJRM0JKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEZOQlFWTXNSVUZCUlN3d1FrRkJNRUlzUlVGQlJTeFhRVUZYTEVWQlFVVXNjVUpCUVhGQ0xFVkJRVVVzUzBGQlN5eEZRVUZGTERCQ1FVRXdRaXhGUVVGRk8yRkJRVU1zUTBGQlF6dFpRVU53U2l4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExEWkRRVUV5UWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycEZMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zTmtOQlFUSkNMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYUVVc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5dzJRMEZCTWtJc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9SU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEcxRFFVRnBRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU53UXl4SlFVRkpMRmxCUVZrc1IwRkJSeXhSUVVGUkxFVkJRVVVzUTBGQlF6dFpRVU01UWl4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTTNReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTBnc1VVRkJVU3hEUVVGRExIRkNRVUZ4UWl4RlFVRkZPMUZCUXpWQ0xFbEJRVWtzUzBGQmJVSXNRMEZCUXp0UlFVTjRRaXhKUVVGSkxHRkJRVFpETEVOQlFVTTdVVUZEYkVRc1ZVRkJWU3hEUVVGRE8xbEJRMUFzUzBGQlN5eEhRVUZITEZGQlFWRXNSVUZCUlN4RFFVRkRPMWxCUTI1Q0xHRkJRV0VzUjBGQlJ5eGpRVUZOTEU5QlFVRXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExHRkJRV0VzUlVGQk9VSXNRMEZCT0VJc1EwRkJRenRSUVVONlJDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVTkdMRVZCUVVVc1EwRkJReXh0UWtGQmJVSXNSVUZCUlR0WlFVTndRaXhoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU51UkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlF5eGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRMMFFzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl3clFrRkJVU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETVVNc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhaUVVGWkxFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTndSaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4eFEwRkJjVU1zUlVGQlJUdFpRVU4wUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMQ3RDUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXhReXhoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGQlJTeGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoR0xFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNhME5CUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF5OUNMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU12UkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExHdERRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRaUVVNNVFpeGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFpRVU4wUWl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExDdENRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMQ3RDUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTXhReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEd0RFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRemxDTEdGQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNaRUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzFsQlEyeENMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMnhFTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc09FSkJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRExHRkJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTNSQ3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERoQ1FVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UXl4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEdMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETEcxRFFVRnRReXhGUVVGRk8xbEJRM0JETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc09FSkJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNPRUpCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzaERMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zYVVOQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRemxDTEdGQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNM1JDeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2xEUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU4wUkN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSVHRaUVVOeVFpeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRGhDUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTnlReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERoQ1FVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExHbERRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUXpkQ0xHRkJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzUkVMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEU0N4UlFVRlJMRU5CUVVNc1pVRkJaU3hGUVVGRk8xRkJRM1JDTEVsQlFVa3NTMEZCYlVJc1EwRkJRenRSUVVONFFpeEpRVUZKTEU5QlFXbERMRU5CUVVNN1VVRkRkRU1zVlVGQlZTeERRVUZETzFsQlExQXNTMEZCU3l4SFFVRkhMRkZCUVZFc1JVRkJSU3hEUVVGRE8xbEJRMjVDTEU5QlFVOHNSMEZCUnl4alFVRk5MRTlCUVVFc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCZUVJc1EwRkJkMElzUTBGQlF6dFJRVU0zUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRSUVVOR0xFVkJRVVVzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSVHRaUVVNelFpeGhRVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlF6bENMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBOQlFXbENMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM0JETEdGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETDBJc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eHJRMEZCYVVJc1JVRkJSU3hEUVVGRExFTkJRVU03V1VGRGNFTXNZVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTTVRaXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEd0RFFVRnBRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU53UXl4aFFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTI1RExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRTQ3hSUVVGUkxFTkJRVU1zWTBGQll5eEZRVUZGTzFGQlEzSkNMRWxCUVVrc1MwRkJiVUlzUTBGQlF6dFJRVU40UWl4SlFVRkpMRTFCUVN0Q0xFTkJRVU03VVVGRGNFTXNWVUZCVlN4RFFVRkRPMWxCUTFBc1MwRkJTeXhIUVVGSExGRkJRVkVzUlVGQlJTeERRVUZETzFsQlEyNUNMRTFCUVUwc1IwRkJSeXhqUVVGTkxFOUJRVUVzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJka0lzUTBGQmRVSXNRMEZCUXp0UlFVTXpReXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU5HTEVWQlFVVXNRMEZCUXl4eFJFRkJjVVFzUlVGQlJUdFpRVU4wUkN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzJkQ1FVTTNRaXhGUVVGRkxFVkJRVVVzU1VGQlNUdG5Ra0ZEVWl4VFFVRlRMRVZCUVVVc1MwRkJTenRuUWtGRGFFSXNiVUpCUVcxQ0xFVkJRVVVzUlVGQlJUdGhRVU14UWl4RFFVRkRMRU5CUVVNN1dVRkRTQ3hKUVVGSkxGRkJRVkVzUjBGQk1FSXNZMEZCWXl4RlFVRkZMRU5CUVVNN1dVRkRka1FzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl3MlFrRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZUVNc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlR0blFrRkROMElzUlVGQlJTeEZRVUZGTEZGQlFWRTdaMEpCUTFvc1UwRkJVeXhGUVVGRkxFdEJRVXM3WjBKQlEyaENMRzFDUVVGdFFpeEZRVUZGTEVWQlFVVTdZVUZETVVJc1EwRkJReXhEUVVGRE8xbEJRMGdzVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUTNKQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMRzFEUVVGdFF5eEZRVUZGTzFsQlEzQkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBOQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU42UXl4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzJkQ1FVTTNRaXhGUVVGRkxFVkJRVVVzU1VGQlNUdG5Ra0ZEVWl4VFFVRlRMRVZCUVVVc1NVRkJTVHRuUWtGRFppeHRRa0ZCYlVJc1JVRkJSU3hGUVVGRk8yRkJRekZDTEVOQlFVTXNRMEZCUXp0WlFVTklMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zYTBOQlFXdENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU14UXl4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzJkQ1FVTTNRaXhGUVVGRkxFVkJRVVVzU1VGQlNUdG5Ra0ZEVWl4VFFVRlRMRVZCUVVVc1MwRkJTenRuUWtGRGFFSXNiVUpCUVcxQ0xFVkJRVVVzUlVGQlJUdGhRVU14UWl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4dFEwRkJiVU1zUlVGQlJUdFpRVU53UXl4SlFVRkpMRTFCUVUwc1IwRkJZU3hEUVVGRExHVkJRV1VzUlVGQlJTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xbEJRek5FTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc2RVTkJRWFZDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOb1JDeGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRk8yZENRVU0zUWl4RlFVRkZMRVZCUVVVc1NVRkJTVHRuUWtGRFVpeFRRVUZUTEVWQlFVVXNTMEZCU3p0blFrRkRhRUlzYlVKQlFXMUNMRVZCUVVVc1RVRkJUVHRoUVVNNVFpeERRVUZETEVOQlFVTTdVVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwZ3NVVUZCVVN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFGQlEzcENMRWxCUVVrc1MwRkJiVUlzUTBGQlF6dFJRVU40UWl4SlFVRkpMRk5CUVhGRExFTkJRVU03VVVGRE1VTXNWVUZCVlN4RFFVRkRPMWxCUTFBc1MwRkJTeXhIUVVGSExGRkJRVkVzUlVGQlJTeERRVUZETzFsQlEyNUNMRk5CUVZNc1IwRkJSeXhqUVVGTkxFOUJRVUVzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRk5CUVZNc1JVRkJNVUlzUTBGQk1FSXNRMEZCUXp0UlFVTnFSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU5HTEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFpRVU4wUWl4SlFVRkpMRXRCUVVzc1IwRkJiVUk3WjBKQlEzaENMR1ZCUVdVc1JVRkJSVHR2UWtGRFlpeEpRVUZKTEVWQlFVVXNUVUZCVFR0dlFrRkRXaXhKUVVGSkxFVkJRVVVzVjBGQlZ6dHBRa0ZEY0VJN1owSkJRMFFzWjBKQlFXZENMRVZCUVVVN2IwSkJRMlFzU1VGQlNTeEZRVUZGTEU5QlFVODdiMEpCUTJJc1NVRkJTU3hGUVVGRkxHTkJRV003YVVKQlEzWkNPMmRDUVVORUxHZENRVUZuUWl4RlFVRkZPMjlDUVVOa0xFbEJRVWtzUlVGQlJTeFBRVUZQTzI5Q1FVTmlMRWxCUVVrc1JVRkJSU3hYUVVGWE8ybENRVU53UWp0aFFVTktMRU5CUVVFN1dVRkRSQ3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETERoQ1FVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU51UXl4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExGTkJRVk1zUlVGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUXk5RExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgcmVkdXhfMSA9IHJlcXVpcmUoXCJyZWR1eFwiKTtcbnZhciByZWR1eF90aHVua18xID0gcmVxdWlyZShcInJlZHV4LXRodW5rXCIpO1xudmFyIHJlZHV4X2xvZ2dlcl8xID0gcmVxdWlyZShcInJlZHV4LWxvZ2dlclwiKTtcbnZhciB1c2VyXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2Vycy91c2VyXCIpO1xudmFyIGNoYW5uZWxzXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2Vycy9jaGFubmVsc1wiKTtcbnZhciBub3RpZmljYXRpb25zXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2Vycy9ub3RpZmljYXRpb25zXCIpO1xudmFyIHNpZGViYXJfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZXJzL3NpZGViYXJcIik7XG52YXIgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9yZWR1Y2Vycy9zb2NrZXRcIik7XG52YXIgY2hhdFVzZXJzXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2Vycy9jaGF0VXNlcnNcIik7XG52YXIgZW52ID0gcmVxdWlyZSgnLi4vLi4vZW52Jyk7XG5leHBvcnRzLnJvb3RSZWR1Y2VyID0gcmVkdXhfMS5jb21iaW5lUmVkdWNlcnMoe1xuICAgIHVzZXI6IHVzZXJfMVtcImRlZmF1bHRcIl0sXG4gICAgY2hhbm5lbHM6IGNoYW5uZWxzXzFbXCJkZWZhdWx0XCJdLFxuICAgIG5vdGlmaWNhdGlvbnM6IG5vdGlmaWNhdGlvbnNfMVtcImRlZmF1bHRcIl0sXG4gICAgc2lkZWJhcjogc2lkZWJhcl8xW1wiZGVmYXVsdFwiXSxcbiAgICBzb2NrZXQ6IHNvY2tldF8xW1wiZGVmYXVsdFwiXSxcbiAgICBjaGF0VXNlcnM6IGNoYXRVc2Vyc18xW1wiZGVmYXVsdFwiXSxcbn0pO1xuZXhwb3J0cy5taWRkbGV3YXJlID0gZW52LnByb2R1Y3Rpb24gfHwgZW52LmRpc2FibGVSZWR1eExvZ2dpbmcgP1xuICAgIHJlZHV4XzEuYXBwbHlNaWRkbGV3YXJlKHJlZHV4X3RodW5rXzFbXCJkZWZhdWx0XCJdKSA6IHJlZHV4XzEuYXBwbHlNaWRkbGV3YXJlKHJlZHV4X3RodW5rXzFbXCJkZWZhdWx0XCJdLCByZWR1eF9sb2dnZXJfMS5jcmVhdGVMb2dnZXIoKSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHJlZHV4XzEuY3JlYXRlU3RvcmUoZXhwb3J0cy5yb290UmVkdWNlciwgZXhwb3J0cy5taWRkbGV3YXJlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUnZjbVV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12ZDJWaUwzTjBiM0psTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzSzBKQlFUUkdPMEZCUXpWR0xESkRRVUZ4UXp0QlFVTnlReXcyUTBGQk1FTTdRVUZGTVVNc2QwTkJRV2RGTzBGQlEyaEZMR2RFUVVFMFJUdEJRVU0xUlN3d1JFRkJNa1k3UVVGRE0wWXNPRU5CUVhsRk8wRkJRM3BGTERSRFFVRnpSVHRCUVVOMFJTeHJSRUZCSzBVN1FVRkZMMFVzU1VGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJWM0JDTEZGQlFVRXNWMEZCVnl4SFFVRlpMSFZDUVVGbExFTkJRVU03U1VGRGFFUXNTVUZCU1N4RlFVRkZMR2xDUVVGWE8wbEJRMnBDTEZGQlFWRXNSVUZCUlN4eFFrRkJaVHRKUVVONlFpeGhRVUZoTEVWQlFVVXNNRUpCUVc5Q08wbEJRMjVETEU5QlFVOHNSVUZCUlN4dlFrRkJZenRKUVVOMlFpeE5RVUZOTEVWQlFVVXNiVUpCUVdFN1NVRkRja0lzVTBGQlV5eEZRVUZGTEhOQ1FVRm5RanREUVVNNVFpeERRVUZETEVOQlFVTTdRVUZGVlN4UlFVRkJMRlZCUVZVc1IwRkRia0lzUjBGQlJ5eERRVUZETEZWQlFWVXNTVUZCU1N4SFFVRkhMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0SlFVTXpReXgxUWtGQlpTeERRVUZETEhkQ1FVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zZFVKQlFXVXNRMEZCUXl4M1FrRkJWU3hGUVVGRkxESkNRVUZaTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUlRsRkxIRkNRVUZsTEcxQ1FVRlhMRU5CUVVNc2JVSkJRVmNzUlVGQlJTeHJRa0ZCVlN4RFFVRkRMRU5CUVVNaWZRPT0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC1sb2dnZXJcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHVzZXJBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9ucy91c2VyQWN0aW9uc1wiKTtcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgYXV0aG9yaXplZDogZmFsc2UsXG4gICAgZW1haWw6IGZhbHNlLFxuICAgIG5hbWU6IGZhbHNlLFxuICAgIHJvbGU6IGZhbHNlLFxuICAgIGp3dDogZmFsc2UsXG59O1xuZnVuY3Rpb24gZGVmYXVsdF8xKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkgeyBzdGF0ZSA9IGluaXRpYWxTdGF0ZTsgfVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSB1c2VyQWN0aW9uc18xLlNFVF9BVVRIT1JJWkVEOlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24uZGF0YSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRGF0YSBtdXN0IGJlIGJvb2xlYW4gZm9yIFNFVF9BVVRIT1JJWkVEIGFjdGlvbicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhY3Rpb24uZGF0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGF1dGhvcml6ZWQ6IGZhbHNlLCBlbWFpbDogZmFsc2UgfSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgYXV0aG9yaXplZDogYWN0aW9uLmRhdGEgfSk7XG4gICAgICAgIGNhc2UgdXNlckFjdGlvbnNfMS5TRVRfVVNFUjpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgYWN0aW9uLmRhdGEpO1xuICAgICAgICBjYXNlIHVzZXJBY3Rpb25zXzEuTE9HT1VUX1VTRVI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGF1dGhvcml6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVtYWlsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByb2xlOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSB1c2VyQWN0aW9uc18xLlNFVF9KV1Q6XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgdG9rZW46IGFjdGlvbi5kYXRhIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVmYXVsdF8xO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZFhObGNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwzTnlZeTkzWldJdmNtVmtkV05sY25NdmRYTmxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMSE5FUVVGelJqdEJRV1YwUml4SlFVRkpMRmxCUVZrc1IwRkJWenRKUVVOMlFpeFZRVUZWTEVWQlFVVXNTMEZCU3p0SlFVTnFRaXhMUVVGTExFVkJRVVVzUzBGQlN6dEpRVU5hTEVsQlFVa3NSVUZCUlN4TFFVRkxPMGxCUTFnc1NVRkJTU3hGUVVGRkxFdEJRVXM3U1VGRFdDeEhRVUZITEVWQlFVVXNTMEZCU3p0RFFVTmlMRU5CUVVFN1FVRkhSQ3h0UWtGQmQwSXNTMEZCTWtJc1JVRkJSU3hOUVVGak8wbEJRVE5ETEhOQ1FVRkJMRVZCUVVFc2IwSkJRVEpDTzBsQlF5OURMRkZCUVZFc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVU5xUWl4TFFVRkxMRFJDUVVGak8xbEJRMllzU1VGQlNTeFBRVUZQTEUxQlFVMHNRMEZCUXl4SlFVRkpMRXRCUVVzc1UwRkJVeXhGUVVGRk8yZENRVU5zUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExHZEVRVUZuUkN4RFFVRkRMRU5CUVVNN1owSkJRMmhGTEU5QlFVOHNTMEZCU3l4RFFVRkRPMkZCUTJoQ08xbEJRMFFzU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4TFFVRkxMRXRCUVVzN1owSkJRM0pDTEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSU3hQUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRExGVkJRVlVzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkRMRU5CUVVNc1EwRkJRenRSUVVNdlJDeExRVUZMTEhOQ1FVRlJPMWxCUTFRc1QwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEycEVMRXRCUVVzc2VVSkJRVmM3V1VGRFdpeFBRVUZQTzJkQ1FVTklMRlZCUVZVc1JVRkJSU3hMUVVGTE8yZENRVU5xUWl4SlFVRkpMRVZCUVVVc1MwRkJTenRuUWtGRFdDeExRVUZMTEVWQlFVVXNTMEZCU3p0blFrRkRXaXhKUVVGSkxFVkJRVVVzUzBGQlN6dGhRVU5rTEVOQlFVRTdVVUZEVEN4TFFVRkxMSEZDUVVGUE8xbEJRMUlzVDBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1JVRkJReXhEUVVGRExFTkJRVU03VVVGRE1VUTdXVUZEU1N4UFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOd1FqdEJRVU5NTEVOQlFVTTdRVUY0UWtRc0swSkJkMEpESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjaGFubmVsc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9hY3Rpb25zL2NoYW5uZWxzQWN0aW9uc1wiKTtcbnZhciBpbml0aWFsU3RhdGUgPSBbXTtcbmV4cG9ydHMuY2hhbm5lbEV4aXN0cyA9IGZ1bmN0aW9uIChjaGFubmVscywgY2hhbm5lbE5hbWUpIHtcbiAgICB2YXIgY2hhbm5lbCA9IGNoYW5uZWxzLmZpbmQoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGMubmFtZSA9PT0gY2hhbm5lbE5hbWU7XG4gICAgfSk7XG4gICAgaWYgKCFjaGFubmVsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGNoYW5uZWw7XG59O1xuZnVuY3Rpb24gZGVmYXVsdF8xKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkgeyBzdGF0ZSA9IGluaXRpYWxTdGF0ZTsgfVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBjaGFubmVsc0FjdGlvbnNfMS5BRERfQ0hBTk5FTFM6XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmRhdGEuY2hhbm5lbHM7XG4gICAgICAgIGNhc2UgY2hhbm5lbHNBY3Rpb25zXzEuSU5DUkVNRU5UX0NIQU5ORUxfUkVUUklFVkVfTUVTU0FHRVNfT0ZGU0VUOiB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbF8xID0gZXhwb3J0cy5jaGFubmVsRXhpc3RzKHN0YXRlLCBhY3Rpb24uZGF0YS5jaGFubmVsKTtcbiAgICAgICAgICAgIHZhciBpbmNyZW1lbnRfMSA9IGFjdGlvbi5kYXRhLmluY3JlbWVudDtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbF8xKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Vua25vd24gY2hhbm5lbCB3aGlsZSBpbmNyZW1lbnRpbmcgbWVzc2FnZXMgb2Zmc2V0JywgYWN0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3Q2hhbm5lbHNfMSA9IHN0YXRlLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT09IGNoYW5uZWxfMS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGMucmV0cmlldmVNZXNzYWdlc09mZnNldCArPSBpbmNyZW1lbnRfMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXdDaGFubmVsc18xO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY2hhbm5lbHNBY3Rpb25zXzEuU0VUX0NIQU5ORUxfRkVUQ0hJTkdfTkVXX01FU1NBR0VTOlxuICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSBleHBvcnRzLmNoYW5uZWxFeGlzdHMoc3RhdGUsIGFjdGlvbi5kYXRhLmNoYW5uZWxOYW1lKTtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmtub3duIGNoYW5uZWwgd2hpbGUgZmV0Y2hpbmcgbmV3IG1lc3NhZ2VzJywgYWN0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3Q2hhbm5lbHMgPSBzdGF0ZS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYy5uYW1lID09PSBhY3Rpb24uZGF0YS5jaGFubmVsTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBjLmZldGNoaW5nTmV3TWVzc2FnZXMgPSBhY3Rpb24uZGF0YS5pc0ZldGNoaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0NoYW5uZWxzO1xuICAgICAgICBjYXNlIGNoYW5uZWxzQWN0aW9uc18xLlNFVF9DSEFOTkVMX0hBU19NT1JFX01FU1NBR0VTOiB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbF8yID0gZXhwb3J0cy5jaGFubmVsRXhpc3RzKHN0YXRlLCBhY3Rpb24uZGF0YS5jaGFubmVsTmFtZSk7XG4gICAgICAgICAgICB2YXIgaGFzTW9yZV8xID0gYWN0aW9uLmRhdGEuaGFzTW9yZTtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbF8yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Vua25vd24gY2hhbm5lbCB3aGlsZSBzZXR0aW5nIGhhc01vcmUgbWVzc2FnZXMnLCBhY3Rpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdDaGFubmVsc18yID0gc3RhdGUubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PT0gYWN0aW9uLmRhdGEuY2hhbm5lbE5hbWUpXG4gICAgICAgICAgICAgICAgICAgIGMuaGFzTW9yZU1lc3NhZ2VzID0gaGFzTW9yZV8xO1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3Q2hhbm5lbHNfMjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGNoYW5uZWxzQWN0aW9uc18xLkFERF9SRVRSSUVWRURfQ0hBTk5FTF9NRVNTQUdFUzoge1xuICAgICAgICAgICAgdmFyIHJldHJpZXZlZE1lc3NhZ2VzXzEgPSBhY3Rpb24uZGF0YS5tZXNzYWdlcztcbiAgICAgICAgICAgIHZhciBjaGFubmVsTmFtZV8xID0gYWN0aW9uLmRhdGEuY2hhbm5lbE5hbWU7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbF8zID0gZXhwb3J0cy5jaGFubmVsRXhpc3RzKHN0YXRlLCBjaGFubmVsTmFtZV8xKTtcbiAgICAgICAgICAgIGlmICghY2hhbm5lbF8zKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Vua25vd24gY2hhbm5lbCB3aGlsZSBhZGRpbmcgcmV0cmlldmVkIGNoYW5uZWwgbWVzc2FnZXMnLCBhY3Rpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdDaGFubmVsc18zID0gc3RhdGUubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMubmFtZSA9PT0gY2hhbm5lbE5hbWVfMSlcbiAgICAgICAgICAgICAgICAgICAgYy5tZXNzYWdlcyA9IHJldHJpZXZlZE1lc3NhZ2VzXzEuY29uY2F0KGMubWVzc2FnZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3Q2hhbm5lbHNfMztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGNoYW5uZWxzQWN0aW9uc18xLkFERF9SRUNFSVZFRF9DSEFOTkVMX01FU1NBR0U6IHtcbiAgICAgICAgICAgIHZhciByZWNlaXZlZE1lc3NhZ2VfMSA9IGFjdGlvbi5kYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbE5hbWVfMiA9IGFjdGlvbi5kYXRhLmNoYW5uZWxOYW1lO1xuICAgICAgICAgICAgdmFyIGNoYW5uZWxfNCA9IGV4cG9ydHMuY2hhbm5lbEV4aXN0cyhzdGF0ZSwgY2hhbm5lbE5hbWVfMik7XG4gICAgICAgICAgICBpZiAoIWNoYW5uZWxfNCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmtub3duIGNoYW5uZWwgd2hpbGUgYWRkaW5nIHJlY2VpdmVkIG1lc3NhZ2UnLCBzdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3Q2hhbm5lbHNfNCA9IHN0YXRlLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT09IGNoYW5uZWxOYW1lXzIpXG4gICAgICAgICAgICAgICAgICAgIGMubWVzc2FnZXMgPSBjLm1lc3NhZ2VzLmNvbmNhdChbcmVjZWl2ZWRNZXNzYWdlXzFdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0NoYW5uZWxzXzQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBjaGFubmVsc0FjdGlvbnNfMS5DTEVBUl9DSEFOTkVMU19EQVRBOlxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVmYXVsdF8xO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJoaGJtNWxiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTl6Y21NdmQyVmlMM0psWkhWalpYSnpMMk5vWVc1dVpXeHpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNPRVJCVDNORE8wRkJNRUowUXl4SlFVRkpMRmxCUVZrc1IwRkJWU3hGUVVGRkxFTkJRVU03UVVGRmFFSXNVVUZCUVN4aFFVRmhMRWRCUVVjc1ZVRkJReXhSUVVFeVFpeEZRVUZGTEZkQlFXMUNPMGxCUXpGRkxFbEJRVWtzVDBGQlR5eEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVVc1ZVRkJReXhEUVVGVk8xRkJRM0JETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1MwRkJTeXhYUVVGWExFTkJRVU03U1VGRGJFTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRTQ3hKUVVGSkxFTkJRVU1zVDBGQlR6dFJRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGxCUXpOQ0xFOUJRVThzVDBGQlR5eERRVUZETzBGQlEyNUNMRU5CUVVNc1EwRkJRVHRCUVVWRUxHMUNRVUY1UWl4TFFVRXlRaXhGUVVGRkxFMUJRV003U1VGQk0wTXNjMEpCUVVFc1JVRkJRU3h2UWtGQk1rSTdTVUZEYUVRc1VVRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlEyaENMRXRCUVVzc09FSkJRVms3V1VGRFlpeFBRVUZQTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8xRkJRMmhETEV0QlFVc3NORVJCUVRCRExFTkJRVU1zUTBGQlF6dFpRVU0zUXl4SlFVRkpMRk5CUVU4c1IwRkJXU3h4UWtGQllTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFsQlEycEZMRWxCUVVrc1YwRkJVeXhIUVVGWExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMWxCUXpsRExFbEJRVWtzUTBGQlF5eFRRVUZQTEVWQlFVVTdaMEpCUTFZc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eHZSRUZCYjBRc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dG5Ra0ZETVVVc1QwRkJUeXhMUVVGTExFTkJRVU03WVVGRGFFSTdXVUZEUkN4SlFVRkpMR0ZCUVZjc1IwRkJZeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZGTEZWQlFVTXNRMEZCVlR0blFrRkRMME1zU1VGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRk5CUVU4c1EwRkJReXhKUVVGSkxFVkJRVVU3YjBKQlEzaENMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNTVUZCU1N4WFFVRlRMRU5CUVVNN2FVSkJRM3BETzJkQ1FVTkVMRTlCUVU4c1EwRkJReXhEUVVGRE8xbEJRMklzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEU0N4UFFVRlBMR0ZCUVZjc1EwRkJRenRUUVVOMFFqdFJRVU5FTEV0QlFVc3NiVVJCUVdsRE8xbEJRMnhETEVsQlFVa3NUMEZCVHl4SFFVRlpMSEZDUVVGaExFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRGNrVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHRuUWtGRFZpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRFpEUVVFMlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVOdVJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0aFFVTm9RanRaUVVORUxFbEJRVWtzVjBGQlZ5eEhRVUZqTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVVc1ZVRkJReXhEUVVGVk8yZENRVU12UXl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN2IwSkJRM0JETEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRwUWtGRGJFUTdaMEpCUTBRc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRFlpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTklMRTlCUVU4c1YwRkJWeXhEUVVGRE8xRkJRM1pDTEV0QlFVc3NLME5CUVRaQ0xFTkJRVU1zUTBGQlF6dFpRVU5vUXl4SlFVRkpMRk5CUVU4c1IwRkJXU3h4UWtGQllTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlEzSkZMRWxCUVVrc1UwRkJUeXhIUVVGWkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRPMWxCUXpORExFbEJRVWtzUTBGQlF5eFRRVUZQTEVWQlFVVTdaMEpCUTFZc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eG5SRUZCWjBRc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dG5Ra0ZEZEVVc1QwRkJUeXhMUVVGTExFTkJRVU03WVVGRGFFSTdXVUZEUkN4SlFVRkpMR0ZCUVZjc1IwRkJZeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZGTEZWQlFVTXNRMEZCVlR0blFrRkRMME1zU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ6dHZRa0ZEYkVNc1EwRkJReXhEUVVGRExHVkJRV1VzUjBGQlJ5eFRRVUZQTEVOQlFVTTdaMEpCUTJoRExFOUJRVThzUTBGQlF5eERRVUZETzFsQlEySXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRTQ3hQUVVGUExHRkJRVmNzUTBGQlF6dFRRVU4wUWp0UlFVTkVMRXRCUVVzc1owUkJRVGhDTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhKUVVGSkxHMUNRVUZwUWl4SFFVRmpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFsQlEzaEVMRWxCUVVrc1lVRkJWeXhIUVVGWExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRPMWxCUTJ4RUxFbEJRVWtzVTBGQlR5eEhRVUZaTEhGQ1FVRmhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHRkJRVmNzUTBGQlF5eERRVUZETzFsQlEzcEVMRWxCUVVjc1EwRkJReXhUUVVGUExFVkJRVVU3WjBKQlExUXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXg1UkVGQmVVUXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRuUWtGREwwVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1lVRkRhRUk3V1VGRFJDeEpRVUZKTEdGQlFWY3NSMEZCWXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRkxGVkJRVU1zUTBGQlZUdG5Ra0ZETDBNc1NVRkJTU3hEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEdGQlFWYzdiMEpCUTNSQ0xFTkJRVU1zUTBGQlF5eFJRVUZSTEVkQlFVY3NiVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRuUWtGRGRFUXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRZaXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEU5QlFVOHNZVUZCVnl4RFFVRkRPMU5CUTNSQ08xRkJRMFFzUzBGQlN5dzRRMEZCTkVJc1EwRkJReXhEUVVGRE8xbEJReTlDTEVsQlFVa3NhVUpCUVdVc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXp0WlFVTXhReXhKUVVGSkxHRkJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRaUVVNeFF5eEpRVUZKTEZOQlFVOHNSMEZCV1N4eFFrRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJTeGhRVUZYTEVOQlFVTXNRMEZCUXp0WlFVTjZSQ3hKUVVGSkxFTkJRVU1zVTBGQlR5eEZRVUZGTzJkQ1FVTldMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zSzBOQlFTdERMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzJkQ1FVTTFSU3hQUVVGUExFdEJRVXNzUTBGQlF6dGhRVU5vUWp0WlFVTkVMRWxCUVVrc1lVRkJWeXhIUVVGakxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCUXl4RFFVRlZPMmRDUVVNNVF5eEpRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1lVRkJWenR2UWtGRGNrSXNRMEZCUXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMR2xDUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTjBSQ3hQUVVGUExFTkJRVU1zUTBGQlF6dFpRVU5pTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTBZc1QwRkJUeXhoUVVGWExFTkJRVU03VTBGRGRFSTdVVUZEUkN4TFFVRkxMSEZEUVVGdFFqdFpRVU53UWl4UFFVRlBMRVZCUVVVc1EwRkJRenRSUVVOa08xbEJRMGtzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEY0VJN1FVRkRUQ3hEUVVGRE8wRkJha1pFTEN0Q1FXbEdReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9ucy9ub3RpZmljYXRpb25zQWN0aW9uc1wiKTtcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICBpbmZvczogW11cbn07XG5mdW5jdGlvbiBkZWZhdWx0XzEoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gaW5pdGlhbFN0YXRlOyB9XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQUREX0VSUk9SOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGVycm9yczogc3RhdGUuZXJyb3JzLmNvbmNhdChbYWN0aW9uLmRhdGFdKSB9KTtcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25zQWN0aW9uc18xLlJFTU9WRV9FUlJPUjpcbiAgICAgICAgICAgIHZhciBuZXdFcnJvcnNBcnJheSA9IHN0YXRlLmVycm9ycy5zbGljZSgpO1xuICAgICAgICAgICAgbmV3RXJyb3JzQXJyYXkuc3BsaWNlKGFjdGlvbi5kYXRhLCAxKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBlcnJvcnM6IG5ld0Vycm9yc0FycmF5IH0pO1xuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQ0xFQVJfRVJST1JTOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGVycm9yczogW10gfSk7XG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5BRERfSU5GTzpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBpbmZvczogc3RhdGUuaW5mb3MuY29uY2F0KFthY3Rpb24uZGF0YV0pIH0pO1xuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuUkVNT1ZFX0lORk86XG4gICAgICAgICAgICB2YXIgbmV3SW5mb3NBcnJheSA9IHN0YXRlLmluZm9zLnNsaWNlKCk7XG4gICAgICAgICAgICBuZXdJbmZvc0FycmF5LnNwbGljZShhY3Rpb24uZGF0YSwgMSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgaW5mb3M6IG5ld0luZm9zQXJyYXkgfSk7XG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5DTEVBUl9JTkZPUzpcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBpbmZvczogW10gfSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2libTkwYVdacFkyRjBhVzl1Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDNOeVl5OTNaV0l2Y21Wa2RXTmxjbk12Ym05MGFXWnBZMkYwYVc5dWN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxIZEZRVU15UXp0QlFWY3pReXhKUVVGSkxGbEJRVmtzUjBGQlZUdEpRVU4wUWl4TlFVRk5MRVZCUVVVc1JVRkJSVHRKUVVOV0xFdEJRVXNzUlVGQlJTeEZRVUZGTzBOQlExb3NRMEZCUVR0QlFVVkVMRzFDUVVGM1FpeExRVUV5UWl4RlFVRkZMRTFCUVdNN1NVRkJNME1zYzBKQlFVRXNSVUZCUVN4dlFrRkJNa0k3U1VGREwwTXNVVUZCVHl4TlFVRk5MRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMmhDTEV0QlFVc3NaME5CUVZNN1dVRkRWaXhQUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkRMRU5CUVVNc1EwRkJRenRSUVVOc1JpeExRVUZMTEcxRFFVRlpPMWxCUTJJc1NVRkJTU3hqUVVGakxFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRaUVVNeFF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEZEVNc1QwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJReXhOUVVGTkxFVkJRVVVzWTBGQll5eEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3hMUVVGTExHMURRVUZaTzFsQlEySXNUMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVY3NSVUZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hGUVVGRExFTkJRVU1zUTBGQlF6dFJRVU51UkN4TFFVRkxMQ3RDUVVGUk8xbEJRMVFzVDBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJReXhEUVVGRExFTkJRVU03VVVGRGFFWXNTMEZCU3l4clEwRkJWenRaUVVOYUxFbEJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGVFTXNZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRExFOUJRVThzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRPVVFzUzBGQlN5eHJRMEZCVnp0WlFVTmFMRTlCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUlVGQlF5eERRVUZETEVOQlFVTTdVVUZEYWtRN1dVRkRTU3hQUVVGUExFdEJRVXNzUTBGQlF6dExRVU53UWp0QlFVTk1MRU5CUVVNN1FVRnlRa1FzSzBKQmNVSkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHNpZGViYXJBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vYWN0aW9ucy9zaWRlYmFyQWN0aW9uc1wiKTtcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgb3BlbjogdHJ1ZVxufTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBpbml0aWFsU3RhdGU7IH1cbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2Ugc2lkZWJhckFjdGlvbnNfMS5UT0dHTEVfU0lERUJBUl9PUEVOOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IG9wZW46ICFzdGF0ZS5vcGVuIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVmYXVsdF8xO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJsa1pXSmhjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMM055WXk5M1pXSXZjbVZrZFdObGNuTXZjMmxrWldKaGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVOQkxEUkVRVUZuUlR0QlFVMW9SU3hKUVVGSkxGbEJRVmtzUjBGQlZUdEpRVU4wUWl4SlFVRkpMRVZCUVVVc1NVRkJTVHREUVVOaUxFTkJRVUU3UVVGRlJDeHRRa0ZCZDBJc1MwRkJNa0lzUlVGQlJTeE5RVUZqTzBsQlFUTkRMSE5DUVVGQkxFVkJRVUVzYjBKQlFUSkNPMGxCUXk5RExGRkJRVkVzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTnFRaXhMUVVGTExHOURRVUZ0UWp0WlFVTndRaXhQUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BFTzFsQlEwa3NUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRjRUk3UVVGRFRDeERRVUZETzBGQlVFUXNLMEpCVDBNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgc29ja2V0QWN0aW9uc18xID0gcmVxdWlyZShcIi4uL2FjdGlvbnMvc29ja2V0QWN0aW9uc1wiKTtcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgaW86IG51bGwsXG4gICAgY29ubmVjdGVkOiBmYWxzZSxcbiAgICBjb25uZWN0ZWRVc2VyRW1haWxzOiBbXVxufTtcbmZ1bmN0aW9uIGRlZmF1bHRfMShzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBpbml0aWFsU3RhdGU7IH1cbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2Ugc29ja2V0QWN0aW9uc18xLklOSVRfV0VCU09DS0VUOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGlvOiBhY3Rpb24uZGF0YS5pbyB9KTtcbiAgICAgICAgY2FzZSBzb2NrZXRBY3Rpb25zXzEuU0VUX1NPQ0tFVF9DT05ORUNURUQ6XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgY29ubmVjdGVkOiBhY3Rpb24uZGF0YS5jb25uZWN0ZWQgfSk7XG4gICAgICAgIGNhc2Ugc29ja2V0QWN0aW9uc18xLlNFVF9TT0NLRVRfQ09OTkVDVEVEX1VTRVJTOlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IGNvbm5lY3RlZFVzZXJFbWFpbHM6IGFjdGlvbi5kYXRhLnVzZXJFbWFpbHMgfSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljMjlqYTJWMExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2TGk0dmMzSmpMM2RsWWk5eVpXUjFZMlZ5Y3k5emIyTnJaWFF1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkhRU3d3UkVGSGIwTTdRVUZSY0VNc1NVRkJTU3haUVVGWkxFZEJRVlU3U1VGRGRFSXNSVUZCUlN4RlFVRkZMRWxCUVVrN1NVRkRVaXhUUVVGVExFVkJRVVVzUzBGQlN6dEpRVU5vUWl4dFFrRkJiVUlzUlVGQlJTeEZRVUZGTzBOQlF6RkNMRU5CUVVFN1FVRkZSQ3h0UWtGQmQwSXNTMEZCTWtJc1JVRkJSU3hOUVVGcFFqdEpRVUU1UXl4elFrRkJRU3hGUVVGQkxHOUNRVUV5UWp0SlFVTXZReXhSUVVGUExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEYUVJc1MwRkJTeXc0UWtGQll6dFpRVU5tTEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVTXNSVUZCUlN4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZETEVOQlFVTXNRMEZCUXp0UlFVTXhSQ3hMUVVGTExHOURRVUZ2UWp0WlFVTnlRaXhQUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRExGTkJRVk1zUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJReXhEUVVGRExFTkJRVU03VVVGRGVFVXNTMEZCU3l3d1EwRkJNRUk3V1VGRE0wSXNUMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUXl4dFFrRkJiVUlzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRGJrWTdXVUZEU1N4UFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOd1FqdEJRVU5NTEVOQlFVTTdRVUZZUkN3clFrRlhReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGNoYXRVc2Vyc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi9hY3Rpb25zL2NoYXRVc2Vyc0FjdGlvbnNcIik7XG52YXIgaW5pdGlhbFN0YXRlID0ge307XG5mdW5jdGlvbiBkZWZhdWx0XzEoc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gaW5pdGlhbFN0YXRlOyB9XG4gICAgdmFyIF9hO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBjaGF0VXNlcnNBY3Rpb25zXzEuVVBEQVRFX0NIQVRfVVNFUlM6XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmRhdGEudXNlcnM7XG4gICAgICAgIGNhc2UgY2hhdFVzZXJzQWN0aW9uc18xLkFERF9DSEFUX1VTRVI6XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW2FjdGlvbi5kYXRhLnVzZXIuZW1haWxdID0ge1xuICAgICAgICAgICAgICAgICAgICByb2xlOiBhY3Rpb24uZGF0YS51c2VyLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdGlvbi5kYXRhLnVzZXIubmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF9hKSk7XG4gICAgICAgIGNhc2UgY2hhdFVzZXJzQWN0aW9uc18xLlJFTU9WRV9DSEFUX1VTRVI6XG4gICAgICAgICAgICB2YXIgY2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSk7XG4gICAgICAgICAgICBkZWxldGUgY2xvbmVbYWN0aW9uLmRhdGEuZW1haWxdO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZGVmYXVsdF8xO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJoaGRGVnpaWEp6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZMaTR2YzNKakwzZGxZaTl5WldSMVkyVnljeTlqYUdGMFZYTmxjbk11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkRRU3huUlVGRGRVTTdRVUZsZGtNc1NVRkJTU3haUVVGWkxFZEJRVlVzUlVGRmVrSXNRMEZCUVR0QlFVVkVMRzFDUVVGM1FpeExRVUV5UWl4RlFVRkZMRTFCUVdsQ08wbEJRVGxETEhOQ1FVRkJMRVZCUVVFc2IwSkJRVEpDT3p0SlFVTXZReXhSUVVGUExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEYUVJc1MwRkJTeXh2UTBGQmFVSTdXVUZEYkVJc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTTNRaXhMUVVGTExHZERRVUZoTzFsQlEyUXNUMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeExRVUZMTzJkQ1FVTXhRaXhIUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJSenR2UWtGRGRFSXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVazdiMEpCUXpOQ0xFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSk8ybENRVU01UWp0dlFrRkRTQ3hEUVVGRE8xRkJRMUFzUzBGQlN5eHRRMEZCWjBJN1dVRkRha0lzU1VGQlNTeExRVUZMTEVkQlFWVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdXVUZETlVNc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRSUVVOdVF6dFpRVU5KTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTNCQ08wRkJRMHdzUTBGQlF6dEJRV3BDUkN3clFrRnBRa01pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnJlcXVpcmUoXCJtb2NoYVwiKTtcbnZhciBheGlvc18xID0gcmVxdWlyZShcImF4aW9zXCIpO1xudmFyIGNoYWlfMSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xudmFyIGF4aW9zX21vY2tfYWRhcHRlcl8xID0gcmVxdWlyZShcImF4aW9zLW1vY2stYWRhcHRlclwiKTtcbnZhciByZWR1eF9tb2NrX3N0b3JlXzEgPSByZXF1aXJlKFwicmVkdXgtbW9jay1zdG9yZVwiKTtcbnZhciByZWR1eF90aHVua18xID0gcmVxdWlyZShcInJlZHV4LXRodW5rXCIpO1xudmFyIHVzZXJBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vc3JjL3dlYi9hY3Rpb25zL3VzZXJBY3Rpb25zXCIpO1xudmFyIG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEgPSByZXF1aXJlKFwiLi4vLi4vc3JjL3dlYi9hY3Rpb25zL25vdGlmaWNhdGlvbnNBY3Rpb25zXCIpO1xudmFyIHNvY2tldEFjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvc29ja2V0QWN0aW9uc1wiKTtcbnZhciBjaGFubmVsc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvY2hhbm5lbHNBY3Rpb25zXCIpO1xudmFyIGNoYXRVc2Vyc0FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zcmMvd2ViL2FjdGlvbnMvY2hhdFVzZXJzQWN0aW9uc1wiKTtcbnZhciBtb2NrU3RvcmVDcmVhdG9yID0gcmVkdXhfbW9ja19zdG9yZV8xW1wiZGVmYXVsdFwiXShbcmVkdXhfdGh1bmtfMVtcImRlZmF1bHRcIl1dKTtcbmZ1bmN0aW9uIGdldFN0b3JlKHN0b3JlKSB7XG4gICAgaWYgKHN0b3JlID09PSB2b2lkIDApIHsgc3RvcmUgPSB7fTsgfVxuICAgIHJldHVybiBtb2NrU3RvcmVDcmVhdG9yKHN0b3JlKTtcbn1cbmRlc2NyaWJlKCdBc3luYyBBY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2NrU3RvcmU7XG4gICAgdmFyIG1vY2tBeGlvcztcbiAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICBtb2NrQXhpb3MgPSBuZXcgYXhpb3NfbW9ja19hZGFwdGVyXzFbXCJkZWZhdWx0XCJdKGF4aW9zXzFbXCJkZWZhdWx0XCJdKTtcbiAgICB9KTtcbiAgICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1vY2tBeGlvcy5yZXN0b3JlKCk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1VzZXIgYXN5bmMgYWN0aW9ucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb2NrU3RvcmUgPSBnZXRTdG9yZSgpO1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSgyMDAsIHt9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlc2NyaWJlKCd1cGRhdGVOYW1lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FsbGJhY2sgYW5kIHNldCBpbmZvICcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEudXBkYXRlTmFtZSgnQWRyaWFuJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmFtZSA9ICdBZHJpYW4nOyB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKG5hbWUsICdBZHJpYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQUREX0lORk8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJ05hbWUgdXBkYXRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgc2V0IGFuIGVycm9yIG9uIGZhaWxlZCByZXF1ZXN0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIG1vY2tBeGlvcy5vblBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvbmFtZScpLnJlcGx5KDUwMCwgeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyB9KTtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEudXBkYXRlTmFtZSgnQWRyaWFuJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmFtZSA9ICdBZHJpYW4nOyB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKG5hbWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQUREX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICdTb21ldGhpbmcgd2VudCB3cm9uZydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlc2NyaWJlKCd1cGRhdGVFbWFpbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgc2V0IGFuIGVycm9yIG9uIGZhaWxlZCByZXF1ZXN0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW1haWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3Mub25Qb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL2VtYWlsJykucmVwbHkoNTAwLCB7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnIH0pO1xuICAgICAgICAgICAgICAgIG1vY2tTdG9yZVxuICAgICAgICAgICAgICAgICAgICAuZGlzcGF0Y2godXNlckFjdGlvbnNfMS51cGRhdGVFbWFpbCgndGVzdEB0ZXN0LmNvbScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtYWlsID0gJ3Rlc3RAdGVzdC5jb20nOyB9KSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UoZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5BRERfRVJST1IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJ1NvbWV0aGluZyB3ZW50IHdyb25nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FsbGJhY2sgYW5kIHNldCBpbmZvJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW1haWwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEudXBkYXRlRW1haWwoJ3Rlc3RAdGVzdC5jb20nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbWFpbCA9ICd0ZXN0QHRlc3QuY29tJzsgfSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChlbWFpbCwgJ3Rlc3RAdGVzdC5jb20nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQUREX0lORk8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogJ0VtYWlsIHVwZGF0ZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZSgndXBkYXRlUGFzc3dvcmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHNldCBpbmZvJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1vY2tTdG9yZS5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLnVwZGF0ZVBhc3N3b3JkKCdhJywgJ2InLCBmdW5jdGlvbiAoKSB7IHJldHVybiB1cGRhdGVkID0gdHJ1ZTsgfSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc1RydWUodXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBub3RpZmljYXRpb25zQWN0aW9uc18xLkFERF9JTkZPLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICdQYXNzd29yZCB1cGRhdGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBzZXQgYW4gZXJyb3Igb24gZmFpbGVkIHJlcXVlc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgbW9ja0F4aW9zLm9uUG9zdCgnL2FwaS92MS91c2VyL3VwZGF0ZS9wYXNzd29yZCcpLnJlcGx5KDUwMCwgeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyB9KTtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmUuZGlzcGF0Y2godXNlckFjdGlvbnNfMS51cGRhdGVQYXNzd29yZCgnYScsICdiJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gdXBkYXRlZCA9IHRydWU7IH0pKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNGYWxzZSh1cGRhdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuQUREX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICdTb21ldGhpbmcgd2VudCB3cm9uZydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRlc2NyaWJlKCdjcmVhdGVVc2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBzZXQgaW5mbyBvbiBzdWNjZXNzJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEuY3JlYXRlVXNlcignTmFtZScsICdlbWFpbEB0ZXN0LmNvbScsICd1c2VyJykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRJbmZvKCdOZXcgdXNlciBjcmVhdGVkJyldKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgc2V0IGVycm9yIG9uIGZhaWx1cmUnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgIG1vY2tBeGlvcy5vbkFueSgpLnJlcGx5KDQwMCwgeyBlcnJvcjogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyB9KTtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEuY3JlYXRlVXNlcignTmFtZScsICdlbWFpbEB0ZXN0LmNvbScsICd1c2VyJykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnKV0pO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZGVzY3JpYmUoJ2VkaXRVc2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBzZXQgaW5mbyBvbiBzdWNjZXNzJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAgICAgLmRpc3BhdGNoKHVzZXJBY3Rpb25zXzEuZWRpdFVzZXIoJ29yaWdpbmFsQHRlc3QuY29tJywgJ05hbWUnLCAnZW1haWxAdGVzdC5jb20nLCAndXNlcicpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW25vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnQ2hhbmdlcyBzYXZlZCcpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHNldCBlcnJvciBvbiBmYWlsdXJlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSg0MDAsIHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgICAgIC5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLmVkaXRVc2VyKCdvcmlnaW5hbEB0ZXN0LmNvbScsICdOYW1lJywgJ2VtYWlsQHRlc3QuY29tJywgJ3VzZXInKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZycpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZSgnZGVsZXRlVXNlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGl0KCdzaG91bGQgc2V0IGluZm8gb24gc3VjY2VzcycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgICAgIC5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLmRlbGV0ZVVzZXIoJ3VzZXJAdGVzdC5jb20nKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ1VzZXIgZGVsZXRlZCcpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHNldCBlcnJvciBvbiBmYWlsdXJlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSg0MDAsIHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgICAgIC5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLmRlbGV0ZVVzZXIoJ3Rlc3RAdGVzdC5jb20nKSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZycpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkZXNjcmliZSgncmVzdG9yZVVzZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHNldCBpbmZvIG9uIHN1Y2Nlc3MnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIG1vY2tTdG9yZVxuICAgICAgICAgICAgICAgICAgICAuZGlzcGF0Y2godXNlckFjdGlvbnNfMS5yZXN0b3JlVXNlcigndXNlckB0ZXN0LmNvbScpKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW25vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkSW5mbygnVXNlciByZXN0b3JlZCcpXSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpdCgnc2hvdWxkIHNldCBlcnJvciBvbiBmYWlsdXJlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSg0MDAsIHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgICAgIC5kaXNwYXRjaCh1c2VyQWN0aW9uc18xLnJlc3RvcmVVc2VyKCd0ZXN0QHRlc3QuY29tJykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnKV0pO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnQ2hhbm5lbHMgYXN5bmMgYWN0aW9ucycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb2NrU3RvcmUgPSBtb2NrU3RvcmVDcmVhdG9yKHtcbiAgICAgICAgICAgICAgICBjaGFubmVsczogW1xuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdnZW5lcmFsJywgZmV0Y2hpbmdOZXdNZXNzYWdlczogZmFsc2UsIGhhc01vcmVNZXNzYWdlczogdHJ1ZSwgcmV0cmlldmVNZXNzYWdlc09mZnNldDogMCB9LFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdmZXRjaGluZyBuZXcgbWVzc2FnZXMnLCBmZXRjaGluZ05ld01lc3NhZ2VzOiB0cnVlLCBoYXNNb3JlTWVzc2FnZXM6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnbm8gbW9yZSBtZXNzYWdlcycsIGZldGNoaW5nTmV3TWVzc2FnZXM6IGZhbHNlLCBoYXNNb3JlTWVzc2FnZXM6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICAgICAgICAgICAgbW9ja0F4aW9zLm9uQW55KCkucmVwbHkoMjAwLCB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZldGNoIGNoYW5uZWxzIGFuZCBkaXNwYXRjaCBhZGRDaGFubmVscyB3aXRoIGFuIGFycmF5IG9mIGNoYW5uZWwgbmFtZXMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdmFyIGNoYW5uZWxzID0gW1xuICAgICAgICAgICAgICAgIHsgX2lkOiAnMScsIG5hbWU6ICdnZW5lcmFsJyB9LFxuICAgICAgICAgICAgICAgIHsgX2lkOiAnMicsIG5hbWU6ICdyYW5kb20nIH0sXG4gICAgICAgICAgICAgICAgeyBfaWQ6ICczJywgbmFtZTogJ3NvbWV0aGluZyBlbHNlJyB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3NcbiAgICAgICAgICAgICAgICAub25HZXQoJy9hcGkvdjEvY2hhbm5lbHMnKVxuICAgICAgICAgICAgICAgIC5yZXBseSgyMDAsIHsgY2hhbm5lbHM6IGNoYW5uZWxzIH0pO1xuICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmZldGNoQ2hhbm5lbHMoKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRDaGFubmVsc0FjdGlvbiA9IGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW2FkZENoYW5uZWxzQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZGlzcGF0Y2ggYWRkRXJyb3Igb24gZmFpbGVkIHJlcXVlc3QgdG8gL2FwaS92MS9jaGFubmVscycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgIG1vY2tBeGlvc1xuICAgICAgICAgICAgICAgIC5vbkdldCgnL2FwaS92MS9jaGFubmVscycpXG4gICAgICAgICAgICAgICAgLnJlcGx5KDUwMCk7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuZmV0Y2hDaGFubmVscygpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yQWN0aW9uID0gbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRFcnJvcignU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hpbGUgdHJ5aW5nIHRvIGZldGNoIHRoZSBjaGFubmVscycpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtlcnJvckFjdGlvbl0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGRpc3BhdGNoIGFuIGVycm9yIGlmIHJldHJpZXZpbmcgbWVzc2FnZXMgd2l0aCBpbnZhbGlkIGNoYW5uZWwgbmFtZScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEucmV0cmlldmVDaGFubmVsTWVzc2FnZXMoJ2ludmFsaWQgbmFtZScpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKG1zZywgJ1JldHJpZXZlIENoYW5uZWwgTWVzc2FnZXMgZGlzcGF0Y2hlZCB3aXRoIGluY29ycmVjdCBjaGFubmVsIG5hbWUgb3Igd2hpbGUgYWxyZWFkeSBmZXRjaGluZyBtZXNzYWdlcycpO1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JBY3Rpb24gPSBub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggbWVzc2FnZXMnKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbZXJyb3JBY3Rpb25dKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBkaXNwYXRjaCBhbiBlcnJvciBpZiBhbHJlYWR5IHJldHJpZXZpbmcgY2hhbm5lbCBtZXNzYWdlcycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEucmV0cmlldmVDaGFubmVsTWVzc2FnZXMoJ2ZldGNoaW5nIG5ldyBtZXNzYWdlcycpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKG1zZywgJ1JldHJpZXZlIENoYW5uZWwgTWVzc2FnZXMgZGlzcGF0Y2hlZCB3aXRoIGluY29ycmVjdCBjaGFubmVsIG5hbWUgb3Igd2hpbGUgYWxyZWFkeSBmZXRjaGluZyBtZXNzYWdlcycpO1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JBY3Rpb24gPSBub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggbWVzc2FnZXMnKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbZXJyb3JBY3Rpb25dKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KVtcImNhdGNoXCJdKGRvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBkaXNwYXRjaCBhbiBlcnJvciBpZiBjaGFubmVsIGRvZXMgbm90IGhhdmUgb2xkZXIgbWVzc2FnZXMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLnJldHJpZXZlQ2hhbm5lbE1lc3NhZ2VzKCdubyBtb3JlIG1lc3NhZ2VzJykpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwobXNnLCAnUmV0cmlldmUgQ2hhbm5lbCBNZXNzYWdlcyBkaXNwYXRjaGVkIHdpdGggaW5jb3JyZWN0IGNoYW5uZWwgbmFtZSBvciB3aGlsZSBhbHJlYWR5IGZldGNoaW5nIG1lc3NhZ2VzJyk7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBlcnJvckFjdGlvbiA9IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIHRyeWluZyB0byBmZXRjaCBtZXNzYWdlcycpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtlcnJvckFjdGlvbl0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGRpc3BhdGNoIGFuIGVycm9yIG9uIGZhaWxlZCBnZXQgcmVxdWVzdCB0byAvYXBpL3YxL21lc3NhZ2VzLycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgIG1vY2tBeGlvc1xuICAgICAgICAgICAgICAgIC5vbkdldCgpXG4gICAgICAgICAgICAgICAgLnJlcGx5KDUwMCk7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbCA9ICdnZW5lcmFsJztcbiAgICAgICAgICAgIG1vY2tTdG9yZVxuICAgICAgICAgICAgICAgIC5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5yZXRyaWV2ZUNoYW5uZWxNZXNzYWdlcyhjaGFubmVsKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBzZXRGZXRjaGluZ1RydWVBY3Rpb24gPSBjaGFubmVsc0FjdGlvbnNfMS5zZXRDaGFubmVsRmV0Y2hpbmdOZXdNZXNzYWdlcyhjaGFubmVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JBY3Rpb24gPSBub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggbWVzc2FnZXMnKTtcbiAgICAgICAgICAgICAgICB2YXIgc2V0RmV0Y2hpbmdGYWxzZUFjdGlvbiA9IGNoYW5uZWxzQWN0aW9uc18xLnNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzKGNoYW5uZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbc2V0RmV0Y2hpbmdUcnVlQWN0aW9uLCBlcnJvckFjdGlvbiwgc2V0RmV0Y2hpbmdGYWxzZUFjdGlvbl0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHNldCBjaGFubmVsSGFzTW9yZU1lc3NhZ2VzIG9uIHJlc3BvbnNlIHdpdGggZW1wdHkgYXJyYXknLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3NcbiAgICAgICAgICAgICAgICAub25HZXQoKVxuICAgICAgICAgICAgICAgIC5yZXBseSgyMDAsIHsgbWVzc2FnZXM6IFtdIH0pO1xuICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSAnZ2VuZXJhbCc7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEucmV0cmlldmVDaGFubmVsTWVzc2FnZXMoY2hhbm5lbCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2V0RmV0Y2hpbmdUcnVlQWN0aW9uID0gY2hhbm5lbHNBY3Rpb25zXzEuc2V0Q2hhbm5lbEZldGNoaW5nTmV3TWVzc2FnZXMoY2hhbm5lbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHNldEhhc01vcmVBY3Rpb24gPSBjaGFubmVsc0FjdGlvbnNfMS5zZXRDaGFubmVsSGFzTW9yZU1lc3NhZ2VzKGNoYW5uZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB2YXIgc2V0RmV0Y2hpbmdGYWxzZUFjdGlvbiA9IGNoYW5uZWxzQWN0aW9uc18xLnNldENoYW5uZWxGZXRjaGluZ05ld01lc3NhZ2VzKGNoYW5uZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChhY3Rpb25zLCBbc2V0RmV0Y2hpbmdUcnVlQWN0aW9uLCBzZXRIYXNNb3JlQWN0aW9uLCBzZXRGZXRjaGluZ0ZhbHNlQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgaW5jcmVtZW50IG9mZnNldCAoYmFzZWQgb24gbnVtYmVyIG9mIHJlY2VpdmVkIG1lc3NhZ2VzKSBhbmQgYWRkIHJldHJpZXZlZCBjaGFubmVsIG1lc3NhZ2VzIG9uIHN1Y2Nlc3NmdWwgcmV0cmVpdmVDaGFubmVsTWVzc2FnZXMgYWN0aW9uJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVsID0gJ2dlbmVyYWwnO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2VzID0gW3tcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJzEyMycsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgdXNlckVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgICAgIF9pZDogJzEnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnNDU2JyxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICB1c2VyRW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgX2lkOiAnMidcbiAgICAgICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICAgICAgICAgICAgbW9ja0F4aW9zXG4gICAgICAgICAgICAgICAgLm9uR2V0KClcbiAgICAgICAgICAgICAgICAucmVwbHkoMjAwLCB7IG1lc3NhZ2VzOiBtZXNzYWdlcyB9KTtcbiAgICAgICAgICAgIG1vY2tTdG9yZVxuICAgICAgICAgICAgICAgIC5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5yZXRyaWV2ZUNoYW5uZWxNZXNzYWdlcyhjaGFubmVsKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBzZXRGZXRjaGluZ1RydWVBY3Rpb24gPSBjaGFubmVsc0FjdGlvbnNfMS5zZXRDaGFubmVsRmV0Y2hpbmdOZXdNZXNzYWdlcyhjaGFubmVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5jcmVtZW50T2Zmc2V0QWN0aW9uID0gY2hhbm5lbHNBY3Rpb25zXzEuaW5jcmVtZW50Q2hhbm5lbFJldHJpZXZlTWVzc2FnZXNPZmZzZXQoY2hhbm5lbCwgbWVzc2FnZXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWRkTWVzc2FnZXNBY3Rpb24gPSBjaGFubmVsc0FjdGlvbnNfMS5hZGRSZXRyaWV2ZWRDaGFubmVsTWVzc2FnZXMoY2hhbm5lbCwgbWVzc2FnZXMpO1xuICAgICAgICAgICAgICAgIHZhciBzZXRGZXRjaGluZ0ZhbHNlQWN0aW9uID0gY2hhbm5lbHNBY3Rpb25zXzEuc2V0Q2hhbm5lbEZldGNoaW5nTmV3TWVzc2FnZXMoY2hhbm5lbCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFtcbiAgICAgICAgICAgICAgICAgICAgc2V0RmV0Y2hpbmdUcnVlQWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnRPZmZzZXRBY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2VzQWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzZXRGZXRjaGluZ0ZhbHNlQWN0aW9uXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZGlzcGF0Y2ggaW5mbyBvbiBzdWNjZXNzZnVsbHkgZGVsZXRpbmcgY2hhbm5lbCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbHMgPSBbXG4gICAgICAgICAgICAgICAgeyBfaWQ6ICcxJywgbmFtZTogJ2dlbmVyYWwnIH0sXG4gICAgICAgICAgICAgICAgeyBfaWQ6ICcyJywgbmFtZTogJ3JhbmRvbScgfSxcbiAgICAgICAgICAgICAgICB7IF9pZDogJzMnLCBuYW1lOiAnc29tZXRoaW5nIGVsc2UnIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgIG1vY2tBeGlvc1xuICAgICAgICAgICAgICAgIC5vbkdldCgnL2FwaS92MS9jaGFubmVscycpXG4gICAgICAgICAgICAgICAgLnJlcGx5KDIwMCwgeyBjaGFubmVsczogY2hhbm5lbHMgfSk7XG4gICAgICAgICAgICBtb2NrQXhpb3NcbiAgICAgICAgICAgICAgICAub25HZXQoKVxuICAgICAgICAgICAgICAgIC5yZXBseSgyMDApO1xuICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmRlbGV0ZUNoYW5uZWwoJ2dlbmVyYWwnKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRJbmZvQWN0aW9uID0gbm90aWZpY2F0aW9uc0FjdGlvbnNfMS5hZGRJbmZvKCdDaGFubmVsIGRlbGV0ZWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgYWRkQ2hhbm5lbHNBY3Rpb24gPSBjaGFubmVsc0FjdGlvbnNfMS5hZGRDaGFubmVscyhbJ2dlbmVyYWwnLCAncmFuZG9tJywgJ3NvbWV0aGluZyBlbHNlJ10pO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZGVlcFN0cmljdEVxdWFsKGFjdGlvbnMsIFthZGRJbmZvQWN0aW9uLCBhZGRDaGFubmVsc0FjdGlvbl0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGRpc3BhdGNoIGFuIGVycm9yIG9uIGZhaWxlZCBhdHRlbXB0IHRvIGRlbGV0ZSBjaGFubmVsJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICAgICAgICAgICAgbW9ja0F4aW9zXG4gICAgICAgICAgICAgICAgLm9uR2V0KClcbiAgICAgICAgICAgICAgICAucmVwbHkoNTAwLCB7IGVycm9yOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnIH0pO1xuICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgLmRpc3BhdGNoKGNoYW5uZWxzQWN0aW9uc18xLmRlbGV0ZUNoYW5uZWwoJ2dlbmVyYWwnKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRFcnJvckFjdGlvbiA9IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW2FkZEVycm9yQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZGlzcGF0Y2ggaW5mbyBvbiBjcmVhdGluZyBuZXcgY2hhbm5lbCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbHMgPSBbXG4gICAgICAgICAgICAgICAgeyBfaWQ6ICcxJywgbmFtZTogJ2dlbmVyYWwnIH0sXG4gICAgICAgICAgICAgICAgeyBfaWQ6ICcyJywgbmFtZTogJ3JhbmRvbScgfSxcbiAgICAgICAgICAgICAgICB7IF9pZDogJzMnLCBuYW1lOiAnc29tZXRoaW5nIGVsc2UnIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBtb2NrQXhpb3MucmVzZXQoKTtcbiAgICAgICAgICAgIG1vY2tBeGlvc1xuICAgICAgICAgICAgICAgIC5vbkdldCgnL2FwaS92MS9jaGFubmVscycpXG4gICAgICAgICAgICAgICAgLnJlcGx5KDIwMCwgeyBjaGFubmVsczogY2hhbm5lbHMgfSk7XG4gICAgICAgICAgICBtb2NrQXhpb3NcbiAgICAgICAgICAgICAgICAub25Qb3N0KClcbiAgICAgICAgICAgICAgICAucmVwbHkoMjAwKTtcbiAgICAgICAgICAgIG1vY2tTdG9yZVxuICAgICAgICAgICAgICAgIC5kaXNwYXRjaChjaGFubmVsc0FjdGlvbnNfMS5hZGRDaGFubmVsKCduZXcgY2hhbm5lbCcpKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgdmFyIGFkZEluZm9BY3Rpb24gPSBub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEluZm8oJ0NoYW5uZWwgY3JlYXRlZCcpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRDaGFubmVsc0FjdGlvbiA9IGNoYW5uZWxzQWN0aW9uc18xLmFkZENoYW5uZWxzKFsnZ2VuZXJhbCcsICdyYW5kb20nLCAnc29tZXRoaW5nIGVsc2UnXSk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW2FkZEluZm9BY3Rpb24sIGFkZENoYW5uZWxzQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZGlzcGF0Y2ggYW4gZXJyb3Igb24gZmFpbGVkIGF0dGVtcHQgdG8gY3JlYXRlIGEgbmV3IGNoYW5uZWwnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3NcbiAgICAgICAgICAgICAgICAub25BbnkoKVxuICAgICAgICAgICAgICAgIC5yZXBseSg1MDAsIHsgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZycgfSk7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhbm5lbHNBY3Rpb25zXzEuYWRkQ2hhbm5lbCgnbmV3IGNoYW5uZWwnKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciBhZGRFcnJvckFjdGlvbiA9IG5vdGlmaWNhdGlvbnNBY3Rpb25zXzEuYWRkRXJyb3IoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW2FkZEVycm9yQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1NvY2tldCBhc3luYyBhY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1vY2tTdG9yZSA9IGdldFN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2Vic29ja2V0IGNvbm5lY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtb2NrU3RvcmUuZGlzcGF0Y2goc29ja2V0QWN0aW9uc18xLmluaXQoKSk7XG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG1vY2tTdG9yZS5nZXRBY3Rpb25zKCk7XG4gICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKGFjdGlvbnNbMF0udHlwZSwgc29ja2V0QWN0aW9uc18xLklOSVRfV0VCU09DS0VUKTtcbiAgICAgICAgICAgIGFjdGlvbnNbMF0uZGF0YS5pby5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnQ2hhdCBVc2VycyBhc3luYyBhY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1vY2tTdG9yZSA9IGdldFN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGRpcGF0Y2ggdXBkYXRlVXNlcnMgb24gZmV0Y2ggYWxsIHVzZXJzJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciB1c2Vyc1Jlc3BvbnNlID0gW3tcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3Rlc3QnXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBlbWFpbDogJ3Rlc3QyQHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ2dlbmVyYWwnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGVzdCdcbiAgICAgICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIHZhciB1c2VycyA9IHt9O1xuICAgICAgICAgICAgdXNlcnNSZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uICh1KSB7XG4gICAgICAgICAgICAgICAgdXNlcnNbdS5lbWFpbF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogdS5yb2xlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSgyMDAsIHsgdXNlcnM6IHVzZXJzUmVzcG9uc2UgfSk7XG4gICAgICAgICAgICBtb2NrU3RvcmVcbiAgICAgICAgICAgICAgICAuZGlzcGF0Y2goY2hhdFVzZXJzQWN0aW9uc18xLmZldGNoQWxsVXNlcnMoKSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtb2NrU3RvcmUuZ2V0QWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVVc2Vyc0FjdGlvbiA9IGNoYXRVc2Vyc0FjdGlvbnNfMS51cGRhdGVVc2Vycyh1c2Vycyk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW3VwZGF0ZVVzZXJzQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZGlzcGF0Y2ggYWRkRXJyb3Igb24gZmFpbGVkIGF0dGVtcHQgdG8gZmV0Y2ggdXNlcnMnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgbW9ja0F4aW9zLnJlc2V0KCk7XG4gICAgICAgICAgICBtb2NrQXhpb3Mub25BbnkoKS5yZXBseSg1MDApO1xuICAgICAgICAgICAgbW9ja1N0b3JlXG4gICAgICAgICAgICAgICAgLmRpc3BhdGNoKGNoYXRVc2Vyc0FjdGlvbnNfMS5mZXRjaEFsbFVzZXJzKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gbW9ja1N0b3JlLmdldEFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgYWRkRXJyb3JBY3Rpb24gPSBub3RpZmljYXRpb25zQWN0aW9uc18xLmFkZEVycm9yKCdGZXRjaGluZyBhbGwgdXNlcnMgZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwU3RyaWN0RXF1YWwoYWN0aW9ucywgW2FkZEVycm9yQWN0aW9uXSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVnpkRUZ6ZVc1alFXTjBhVzl1Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM1JsYzNSekwzZGxZaTkwWlhOMFFYTjVibU5CWTNScGIyNXpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNhVUpCUVdVN1FVRkRaaXdyUWtGQk1FSTdRVUZETVVJc05rSkJRVGhDTzBGQlF6bENMSGxFUVVFMlF6dEJRVU0zUXl4eFJFRkJjMFk3UVVGRGRFWXNNa05CUVN0Q08wRkJReTlDTEdsRlFVRXlTVHRCUVVVelNTeHRSa0ZCYjBjN1FVRkZjRWNzY1VWQlFYTkhPMEZCUTNSSExIbEZRVUZ2VWp0QlFVTndVaXd5UlVGQmIwWTdRVUZKY0VZc1NVRkJUU3huUWtGQlowSXNSMEZCY1VJc05rSkJRV01zUTBGQlF5eERRVUZETEhkQ1FVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSVzVGTEZOQlFWTXNVVUZCVVN4RFFVRkRMRXRCUVZVN1NVRkJWaXh6UWtGQlFTeEZRVUZCTEZWQlFWVTdTVUZEZUVJc1QwRkJUeXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOdVF5eERRVUZETzBGQlJVUXNVVUZCVVN4RFFVRkRMR1ZCUVdVc1JVRkJSVHRKUVVOMFFpeEpRVUZKTEZOQlFYRkRMRU5CUVVNN1NVRkRNVU1zU1VGQlNTeFRRVUZ6UWl4RFFVRkRPMGxCUlROQ0xFMUJRVTBzUTBGQlF6dFJRVU5JTEZOQlFWTXNSMEZCUnl4SlFVRkpMQ3RDUVVGWExFTkJRVU1zYTBKQlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNaRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlJVZ3NTMEZCU3l4RFFVRkRPMUZCUTBZc1UwRkJVeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBsQlEzaENMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSVWdzVVVGQlVTeERRVUZETEc5Q1FVRnZRaXhGUVVGRk8xRkJRek5DTEZWQlFWVXNRMEZCUXp0WlFVTlFMRk5CUVZNc1IwRkJSeXhSUVVGUkxFVkJRVVVzUTBGQlF6dFpRVU4yUWl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGJFSXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkRjRU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4UlFVRlJMRU5CUVVNc1dVRkJXU3hGUVVGRk8xbEJRMjVDTEVWQlFVVXNRMEZCUXl4elEwRkJjME1zUlVGQlJTeFZRVUZWTEVsQlFVazdaMEpCUTNKRUxFbEJRVWtzU1VGQlNTeEhRVUZ0UWl4TFFVRkxMRU5CUVVNN1owSkJRMnBETEZOQlFWTTdjVUpCUTBvc1VVRkJVU3hEUVVGRExIZENRVUZWTEVOQlFVTXNVVUZCVVN4RlFVRkZMR05CUVUwc1QwRkJRU3hKUVVGSkxFZEJRVWNzVVVGQlVTeEZRVUZtTEVOQlFXVXNRMEZCUXl4RFFVRkRPM0ZDUVVOeVJDeEpRVUZKTEVOQlFVTTdiMEpCUTBZc1lVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN2IwSkJRMjVETEVsQlFVMHNUMEZCVHl4SFFVRm5RaXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdiMEpCUTNCRUxHRkJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN05FSkJRemRDTEVsQlFVa3NSVUZCUlN3clFrRkJVVHMwUWtGRFpDeEpRVUZKTEVWQlFVVXNZMEZCWXp0NVFrRkRka0lzUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTBvc1NVRkJTU3hGUVVGRkxFTkJRVU03WjBKQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEZGtJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFNDeEZRVUZGTEVOQlFVTXNkVU5CUVhWRExFVkJRVVVzVlVGQlZTeEpRVUZKTzJkQ1FVTjBSQ3hKUVVGSkxFbEJRVWtzUjBGQmJVSXNTMEZCU3l4RFFVRkRPMmRDUVVOcVF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1owSkJRMnhDTEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEhOQ1FVRnpRaXhGUVVGRkxFTkJRVU1zUTBGQlF6dG5Ra0ZETTBZc1UwRkJVenR4UWtGRFNpeFJRVUZSTEVOQlFVTXNkMEpCUVZVc1EwRkJReXhSUVVGUkxFVkJRVVVzWTBGQlRTeFBRVUZCTEVsQlFVa3NSMEZCUnl4UlFVRlJMRVZCUVdZc1EwRkJaU3hEUVVGRExFTkJRVU03Y1VKQlEzSkVMRWxCUVVrc1EwRkJRenR2UWtGRFJpeGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dHZRa0ZEYUVNc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenR2UWtGRGNFUXNZVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6czBRa0ZETjBJc1NVRkJTU3hGUVVGRkxHZERRVUZUT3pSQ1FVTm1MRWxCUVVrc1JVRkJSU3h6UWtGQmMwSTdlVUpCUXk5Q0xFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTktMRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlEzWkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4UlFVRlJMRU5CUVVNc1lVRkJZU3hGUVVGRk8xbEJRM0JDTEVWQlFVVXNRMEZCUXl4MVEwRkJkVU1zUlVGQlJTeFZRVUZWTEVsQlFVazdaMEpCUTNSRUxFbEJRVWtzUzBGQlN5eEhRVUZ0UWl4TFFVRkxMRU5CUVVNN1owSkJRMnhETEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRuUWtGRGJFSXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVTTFSaXhUUVVGVE8zRkNRVU5LTEZGQlFWRXNRMEZCUXl4NVFrRkJWeXhEUVVGRExHVkJRV1VzUlVGQlJTeGpRVUZOTEU5QlFVRXNTMEZCU3l4SFFVRkhMR1ZCUVdVc1JVRkJka0lzUTBGQmRVSXNRMEZCUXl4RFFVRkRPM0ZDUVVOeVJTeEpRVUZKTEVOQlFVTTdiMEpCUTBZc1lVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0dlFrRkRkRUlzU1VGQlRTeFBRVUZQTEVkQlFXZENMRk5CUVZNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dHZRa0ZEY0VRc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXpzMFFrRkROMElzU1VGQlNTeEZRVUZGTEdkRFFVRlRPelJDUVVObUxFbEJRVWtzUlVGQlJTeHpRa0ZCYzBJN2VVSkJReTlDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOS0xFbEJRVWtzUlVGQlJTeERRVUZETzJkQ1FVTllMRU5CUVVNc1EwRkJReXhEUVVORUxFOUJRVXNzUTBGQlFTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTNKQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEwZ3NSVUZCUlN4RFFVRkRMSEZEUVVGeFF5eEZRVUZGTEZWQlFWTXNTVUZCU1R0blFrRkRia1FzU1VGQlNTeExRVUZMTEVkQlFXMUNMRXRCUVVzc1EwRkJRenRuUWtGRGJFTXNVMEZCVXp0eFFrRkRTaXhSUVVGUkxFTkJRVU1zZVVKQlFWY3NRMEZCUXl4bFFVRmxMRVZCUVVVc1kwRkJUU3hQUVVGQkxFdEJRVXNzUjBGQlJ5eGxRVUZsTEVWQlFYWkNMRU5CUVhWQ0xFTkJRVU1zUTBGQlF6dHhRa0ZEY2tVc1NVRkJTU3hEUVVGRE8yOUNRVU5HTEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHVkJRV1VzUTBGQlF5eERRVUZETzI5Q1FVTXpReXhKUVVGTkxFOUJRVThzUjBGQlowSXNVMEZCVXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8yOUNRVU53UkN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZET3pSQ1FVTTNRaXhKUVVGSkxFVkJRVVVzSzBKQlFWRTdORUpCUTJRc1NVRkJTU3hGUVVGRkxHVkJRV1U3ZVVKQlEzaENMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5LTEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVU5FTEU5QlFVc3NRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM0pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3V1VGRGRrSXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEZWQlFWTXNTVUZCU1R0blFrRkRMMElzU1VGQlNTeFBRVUZQTEVkQlFWa3NTMEZCU3l4RFFVRkRPMmRDUVVNM1FpeFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRFJDUVVGakxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4alFVRk5MRTlCUVVFc1QwRkJUeXhIUVVGSExFbEJRVWtzUlVGQlpDeERRVUZqTEVOQlFVTXNRMEZCUXp0eFFrRkROMFFzU1VGQlNTeERRVUZETzI5Q1FVTkdMR0ZCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdiMEpCUTNaQ0xFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03YjBKQlEzQkVMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdORUpCUXpkQ0xFbEJRVWtzUlVGQlJTd3JRa0ZCVVRzMFFrRkRaQ3hKUVVGSkxFVkJRVVVzYTBKQlFXdENPM2xDUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0dlFrRkRTaXhKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEV0N4RFFVRkRMRU5CUVVNc1EwRkRSQ3hQUVVGTExFTkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTnlRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEVWQlFVVXNRMEZCUXl4MVEwRkJkVU1zUlVGQlJTeFZRVUZUTEVsQlFVazdaMEpCUTNKRUxFbEJRVWtzVDBGQlR5eEhRVUZaTEV0QlFVc3NRMEZCUXp0blFrRkROMElzVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMmRDUVVOc1FpeFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRGhDUVVFNFFpeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeHpRa0ZCYzBJc1JVRkJSU3hEUVVGRExFTkJRVU03WjBKQlF5OUdMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zTkVKQlFXTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxHTkJRVTBzVDBGQlFTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RlFVRmtMRU5CUVdNc1EwRkJReXhEUVVGRE8zRkNRVU0zUkN4SlFVRkpMRU5CUVVNN2IwSkJRMFlzWVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenR2UWtGRGVFSXNTVUZCVFN4UFFVRlBMRWRCUVdkQ0xGTkJRVk1zUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0dlFrRkRjRVFzWVVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenMwUWtGRE4wSXNTVUZCU1N4RlFVRkZMR2REUVVGVE96UkNRVU5tTEVsQlFVa3NSVUZCUlN4elFrRkJjMEk3ZVVKQlF5OUNMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU5LTEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVU5FTEU5QlFVc3NRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM0pDTEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTA0c1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeFJRVUZSTEVOQlFVTXNXVUZCV1N4RlFVRkZPMWxCUTI1Q0xFVkJRVVVzUTBGQlF5dzBRa0ZCTkVJc1JVRkJSU3hWUVVGVExFbEJRVWs3WjBKQlF6RkRMRk5CUVZNN2NVSkJRMG9zVVVGQlVTeERRVUZETEhkQ1FVRlZMRU5CUVVNc1RVRkJUU3hGUVVGRkxHZENRVUZuUWl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8zRkNRVU4wUkN4SlFVRkpMRU5CUVVNN2IwSkJRMFlzU1VGQlRTeFBRVUZQTEVkQlFXZENMRk5CUVZNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dHZRa0ZEY0VRc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl3NFFrRkJUeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOUNRVU12UkN4SlFVRkpMRVZCUVVVc1EwRkJRenRuUWtGRFdDeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU4yUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOSUxFVkJRVVVzUTBGQlF5dzJRa0ZCTmtJc1JVRkJSU3hWUVVGVExFbEJRVWs3WjBKQlF6TkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dG5Ra0ZEYkVJc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJReXhMUVVGTExFVkJRVVVzYzBKQlFYTkNMRVZCUVVNc1EwRkJReXhEUVVGRE8yZENRVU01UkN4VFFVRlRPM0ZDUVVOS0xGRkJRVkVzUTBGQlF5eDNRa0ZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenR4UWtGRGRFUXNTVUZCU1N4RFFVRkRPMjlDUVVOR0xFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03YjBKQlEzQkVMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNLMEpCUVZFc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGNFVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1owSkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1dVRkRha0lzUlVGQlJTeERRVUZETERSQ1FVRTBRaXhGUVVGRkxGVkJRVk1zU1VGQlNUdG5Ra0ZETVVNc1UwRkJVenR4UWtGRFNpeFJRVUZSTEVOQlFVTXNjMEpCUVZFc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4TlFVRk5MRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN2NVSkJRM3BGTEVsQlFVa3NRMEZCUXp0dlFrRkRSaXhKUVVGTkxFOUJRVThzUjBGQlowSXNVMEZCVXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8yOUNRVU53UkN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETERoQ1FVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTTFSQ3hKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEV0N4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTjJRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5JTEVWQlFVVXNRMEZCUXl3MlFrRkJOa0lzUlVGQlJTeFZRVUZUTEVsQlFVazdaMEpCUXpORExGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0blFrRkRiRUlzVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVTm9SU3hUUVVGVE8zRkNRVU5LTEZGQlFWRXNRMEZCUXl4elFrRkJVU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZMRTFCUVUwc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenR4UWtGRGVrVXNTVUZCU1N4RFFVRkRPMjlDUVVOR0xFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03YjBKQlEzQkVMR0ZCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNLMEpCUVZFc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGNFVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1owSkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEZGQlFWRXNRMEZCUXl4WlFVRlpMRVZCUVVVN1dVRkRia0lzUlVGQlJTeERRVUZETERSQ1FVRTBRaXhGUVVGRkxGVkJRVk1zU1VGQlNUdG5Ra0ZETVVNc1UwRkJVenR4UWtGRFNpeFJRVUZSTEVOQlFVTXNkMEpCUVZVc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dHhRa0ZEY2tNc1NVRkJTU3hEUVVGRE8yOUNRVU5HTEVsQlFVMHNUMEZCVHl4SFFVRm5RaXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdiMEpCUTNCRUxHRkJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc09FSkJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRek5FTEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM1pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTBnc1JVRkJSU3hEUVVGRExEWkNRVUUyUWl4RlFVRkZMRlZCUVZNc1NVRkJTVHRuUWtGRE0wTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8yZENRVU5zUWl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3h6UWtGQmMwSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRMmhGTEZOQlFWTTdjVUpCUTBvc1VVRkJVU3hEUVVGRExIZENRVUZWTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN2NVSkJRM0pETEVsQlFVa3NRMEZCUXp0dlFrRkRSaXhKUVVGTkxFOUJRVThzUjBGQlowSXNVMEZCVXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8yOUNRVU53UkN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEN0Q1FVRlJMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwSkJRM0JGTEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRM1pDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeFJRVUZSTEVOQlFVTXNZVUZCWVN4RlFVRkZPMWxCUTNCQ0xFVkJRVVVzUTBGQlF5dzBRa0ZCTkVJc1JVRkJSU3hWUVVGVExFbEJRVWs3WjBKQlF6RkRMRk5CUVZNN2NVSkJRMG9zVVVGQlVTeERRVUZETEhsQ1FVRlhMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03Y1VKQlEzUkRMRWxCUVVrc1EwRkJRenR2UWtGRFJpeEpRVUZOTEU5QlFVOHNSMEZCWjBJc1UwRkJVeXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzI5Q1FVTndSQ3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMRGhDUVVGUExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVNMVJDeEpRVUZKTEVWQlFVVXNRMEZCUXp0blFrRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZMTEVOQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOMlFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTklMRVZCUVVVc1EwRkJReXcyUWtGQk5rSXNSVUZCUlN4VlFVRlRMRWxCUVVrN1owSkJRek5ETEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRuUWtGRGJFSXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc2MwSkJRWE5DTEVWQlFVVXNRMEZCUXl4RFFVRkRPMmRDUVVOb1JTeFRRVUZUTzNGQ1FVTktMRkZCUVZFc1EwRkJReXg1UWtGQlZ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPM0ZDUVVOMFF5eEpRVUZKTEVOQlFVTTdiMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenR2UWtGRGNFUXNZVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5d3JRa0ZCVVN4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlDUVVOd1JTeEpRVUZKTEVWQlFVVXNRMEZCUXp0blFrRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZMTEVOQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOMlFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEU0N4UlFVRlJMRU5CUVVNc2QwSkJRWGRDTEVWQlFVVTdVVUZETDBJc1ZVRkJWU3hEUVVGRE8xbEJSMUFzVTBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8yZENRVU42UWl4UlFVRlJMRVZCUVVVN2IwSkJRMDRzUlVGQlJTeEpRVUZKTEVWQlFVVXNVMEZCVXl4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEV0QlFVc3NSVUZCUlN4bFFVRmxMRVZCUVVVc1NVRkJTU3hGUVVGRkxITkNRVUZ6UWl4RlFVRkZMRU5CUVVNc1JVRkJSVHR2UWtGRGFrY3NSVUZCUlN4SlFVRkpMRVZCUVVVc2RVSkJRWFZDTEVWQlFVVXNiVUpCUVcxQ0xFVkJRVVVzU1VGQlNTeEZRVUZGTEdWQlFXVXNSVUZCUlN4SlFVRkpMRVZCUVVVN2IwSkJRMjVHTEVWQlFVVXNTVUZCU1N4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEcxQ1FVRnRRaXhGUVVGRkxFdEJRVXNzUlVGQlJTeGxRVUZsTEVWQlFVVXNTMEZCU3l4RlFVRkZPMmxDUVVOdVJqdGhRVU5LTEVOQlFVTXNRMEZCUXp0WlFVTklMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOeVF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXdyUlVGQkswVXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkROMFlzU1VGQlNTeFJRVUZSTEVkQlFXdERPMmRDUVVNeFF5eEZRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlF6dG5Ra0ZETTBJc1JVRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVNN1owSkJRekZDTEVWQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzWjBKQlFXZENMRVZCUVVNN1lVRkJReXhEUVVGRE8xbEJRM2hETEZOQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRaUVVOc1FpeFRRVUZUTzJsQ1FVTktMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0cFFrRkRla0lzUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFVkJRVU1zUTBGQlF5eERRVUZETzFsQlEzUkRMRk5CUVZNN2FVSkJRMG9zVVVGQlVTeERRVUZETEN0Q1FVRmhMRVZCUVVVc1EwRkJRenRwUWtGRGVrSXNTVUZCU1N4RFFVRkRPMmRDUVVOR0xFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03WjBKQlEzQkVMRWxCUVUwc2FVSkJRV2xDTEVkQlFVY3NOa0pCUVZjc1EwRkJReXhEUVVGRExGTkJRVk1zUlVGQlJTeFJRVUZSTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTXZSU3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRja1FzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0UlFVTjBRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4blJVRkJaMFVzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZET1VVc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFsQlEyeENMRk5CUVZNN2FVSkJRMG9zUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhEUVVGRE8ybENRVU42UWl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGFFSXNVMEZCVXp0cFFrRkRTaXhSUVVGUkxFTkJRVU1zSzBKQlFXRXNSVUZCUlN4RFFVRkRPMmxDUVVONlFpeEpRVUZKTEVOQlFVTTdaMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRGNFUXNTVUZCVFN4WFFVRlhMRWRCUVVjc0swSkJRVkVzUTBGQlF5eDVSRUZCZVVRc1EwRkJReXhEUVVGRE8yZENRVU40Uml4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJReTlETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlN5eERRVUZCTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1VVRkRkRUlzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc01rVkJRVEpGTEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTNwR0xGTkJRVk03YVVKQlEwb3NVVUZCVVN4RFFVRkRMSGxEUVVGMVFpeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMmxDUVVNM1F5eEpRVUZKTEVOQlFVTXNWVUZCUXl4SFFVRlhPMmRDUVVOa0xHRkJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RlFVRkZMSEZIUVVGeFJ5eERRVUZETEVOQlFVTTdaMEpCUXk5SUxFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03WjBKQlEzQkVMRWxCUVUwc1YwRkJWeXhIUVVGSExDdENRVUZSTEVOQlFVTXNjVVJCUVhGRUxFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VZc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU12UXl4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVc3NRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRek5DTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1JVRkJSU3hEUVVGRExHbEZRVUZwUlN4RlFVRkZMRlZCUVZNc1NVRkJTVHRaUVVNdlJTeFRRVUZUTzJsQ1FVTktMRkZCUVZFc1EwRkJReXg1UTBGQmRVSXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZETzJsQ1FVTXhSQ3hKUVVGSkxFTkJRVU1zVlVGQlF5eEhRVUZYTzJkQ1FVTmtMR0ZCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTEhGSFFVRnhSeXhEUVVGRExFTkJRVU03WjBKQlF5OUlMRWxCUVUwc1QwRkJUeXhIUVVGblFpeFRRVUZUTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1owSkJRM0JFTEVsQlFVMHNWMEZCVnl4SFFVRkhMQ3RDUVVGUkxFTkJRVU1zY1VSQlFYRkVMRU5CUVVNc1EwRkJRenRuUWtGRGNFWXNZVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVNdlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMR3RGUVVGclJTeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTm9SaXhUUVVGVE8ybENRVU5LTEZGQlFWRXNRMEZCUXl4NVEwRkJkVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8ybENRVU55UkN4SlFVRkpMRU5CUVVNc1ZVRkJReXhIUVVGWE8yZENRVU5rTEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxIRkhRVUZ4Unl4RFFVRkRMRU5CUVVNN1owSkJReTlJTEVsQlFVMHNUMEZCVHl4SFFVRm5RaXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdaMEpCUTNCRUxFbEJRVTBzVjBGQlZ5eEhRVUZITEN0Q1FVRlJMRU5CUVVNc2NVUkJRWEZFTEVOQlFVTXNRMEZCUXp0blFrRkRjRVlzWVVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTXZReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEzWkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETEhGRlFVRnhSU3hGUVVGRkxGVkJRVk1zU1VGQlNUdFpRVU51Uml4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGJFSXNVMEZCVXp0cFFrRkRTaXhMUVVGTExFVkJRVVU3YVVKQlExQXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMmhDTEVsQlFVa3NUMEZCVHl4SFFVRlhMRk5CUVZNc1EwRkJRenRaUVVOb1F5eFRRVUZUTzJsQ1FVTktMRkZCUVZFc1EwRkJReXg1UTBGQmRVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRwUWtGRE1VTXNTVUZCU1N4RFFVRkRPMmRDUVVOR0xFbEJRVTBzVDBGQlR5eEhRVUZuUWl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03WjBKQlEzQkVMRWxCUVUwc2NVSkJRWEZDTEVkQlFVY3NLME5CUVRaQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVNelJTeEpRVUZOTEZkQlFWY3NSMEZCUnl3clFrRkJVU3hEUVVGRExIRkVRVUZ4UkN4RFFVRkRMRU5CUVVNN1owSkJRM0JHTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzSzBOQlFUWkNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTTNSU3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEZkQlFWY3NSVUZCUlN4elFrRkJjMElzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpsR0xFbEJRVWtzUlVGQlJTeERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZGtJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEZRVUZGTEVOQlFVTXNaMFZCUVdkRkxFVkJRVVVzVlVGQlV5eEpRVUZKTzFsQlF6bEZMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4VFFVRlRPMmxDUVVOS0xFdEJRVXNzUlVGQlJUdHBRa0ZEVUN4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVWQlFVVXNSVUZCUXl4RFFVRkRMRU5CUVVNN1dVRkRha01zU1VGQlNTeFBRVUZQTEVkQlFWY3NVMEZCVXl4RFFVRkRPMWxCUTJoRExGTkJRVk03YVVKQlEwb3NVVUZCVVN4RFFVRkRMSGxEUVVGMVFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMmxDUVVNeFF5eEpRVUZKTEVOQlFVTTdaMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRGNFUXNTVUZCVFN4eFFrRkJjVUlzUjBGQlJ5d3JRMEZCTmtJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUXpORkxFbEJRVTBzWjBKQlFXZENMRWRCUVVjc01rTkJRWGxDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8yZENRVU51UlN4SlFVRk5MSE5DUVVGelFpeEhRVUZITEN0RFFVRTJRaXhEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkROMFVzWVVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4blFrRkJaMElzUlVGQlJTeHpRa0ZCYzBJc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEyNUhMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMWdzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zWjBwQlFXZEtMRVZCUVVVc1ZVRkJVeXhKUVVGSk8xbEJRemxLTEVsQlFVa3NUMEZCVHl4SFFVRlhMRk5CUVZNc1EwRkJRenRaUVVOb1F5eEpRVUZKTEZGQlFWRXNSMEZCWXl4RFFVRkRPMjlDUVVOMlFpeEpRVUZKTEVWQlFVVXNTMEZCU3p0dlFrRkRXQ3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSVHR2UWtGRE9VSXNVMEZCVXl4RlFVRkZMR1ZCUVdVN2IwSkJRekZDTEVkQlFVY3NSVUZCUlN4SFFVRkhPMmxDUVVOWUxFVkJRVVU3YjBKQlEwTXNTVUZCU1N4RlFVRkZMRXRCUVVzN2IwSkJRMWdzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVU3YjBKQlF6bENMRk5CUVZNc1JVRkJSU3hsUVVGbE8yOUNRVU14UWl4SFFVRkhMRVZCUVVVc1IwRkJSenRwUWtGRFdDeERRVUZETEVOQlFVTTdXVUZEU0N4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRGJFSXNVMEZCVXp0cFFrRkRTaXhMUVVGTExFVkJRVVU3YVVKQlExQXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNaRExGTkJRVk03YVVKQlEwb3NVVUZCVVN4RFFVRkRMSGxEUVVGMVFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMmxDUVVNeFF5eEpRVUZKTEVOQlFVTTdaMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRGNFUXNTVUZCVFN4eFFrRkJjVUlzUjBGQlJ5d3JRMEZCTmtJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUXpORkxFbEJRVTBzY1VKQlFYRkNMRWRCUVVjc2QwUkJRWE5ETEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dG5Ra0ZETDBZc1NVRkJUU3hwUWtGQmFVSXNSMEZCUnl3MlEwRkJNa0lzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1owSkJRM3BGTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzSzBOQlFUWkNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTTNSU3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlR0dlFrRkROVUlzY1VKQlFYRkNPMjlDUVVOeVFpeHhRa0ZCY1VJN2IwSkJRM0pDTEdsQ1FVRnBRanR2UWtGRGFrSXNjMEpCUVhOQ08ybENRVUZETEVOQlFVTXNRMEZCUXp0blFrRkROMElzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGTExFTkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjJRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4MVJFRkJkVVFzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZEY2tVc1NVRkJTU3hSUVVGUkxFZEJRVzlETzJkQ1FVTTFReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRk5CUVZNc1JVRkJSVHRuUWtGRE4wSXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeFJRVUZSTEVWQlFVVTdaMEpCUXpWQ0xFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1owSkJRV2RDTEVWQlFVVTdZVUZCUXl4RFFVRkRPMWxCUXpGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0WlFVTnNRaXhUUVVGVE8ybENRVU5LTEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF6dHBRa0ZEZWtJc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRM2hETEZOQlFWTTdhVUpCUTBvc1MwRkJTeXhGUVVGRk8ybENRVU5RTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOb1FpeFRRVUZUTzJsQ1FVTktMRkZCUVZFc1EwRkJReXdyUWtGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMmxDUVVOc1F5eEpRVUZKTEVOQlFVTTdaMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRGNFUXNTVUZCVFN4aFFVRmhMRWRCUVVjc09FSkJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8yZENRVU5xUkN4SlFVRk5MR2xDUVVGcFFpeEhRVUZITERaQ1FVRlhMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzVVVGQlVTeEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETDBVc1lVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4aFFVRmhMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOd1JTeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMRGhFUVVFNFJDeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTTFSU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEYkVJc1UwRkJVenRwUWtGRFNpeExRVUZMTEVWQlFVVTdhVUpCUTFBc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZETEV0QlFVc3NSVUZCUlN4elFrRkJjMElzUlVGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtRc1UwRkJVenRwUWtGRFNpeFJRVUZSTEVOQlFVTXNLMEpCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dHBRa0ZEYkVNc1NVRkJTU3hEUVVGRE8yZENRVU5HTEVsQlFVMHNUMEZCVHl4SFFVRm5RaXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdaMEpCUTNCRUxFbEJRVTBzWTBGQll5eEhRVUZITEN0Q1FVRlJMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0blFrRkRlRVFzWVVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnNSQ3hKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEzWkNMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMFlzUlVGQlJTeERRVUZETERoRFFVRTRReXhGUVVGRkxGVkJRVk1zU1VGQlNUdFpRVU0xUkN4SlFVRkpMRkZCUVZFc1IwRkJiME03WjBKQlF6VkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNVMEZCVXl4RlFVRkZPMmRDUVVNM1FpeEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJUdG5Ra0ZETlVJc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4blFrRkJaMElzUlVGQlJUdGhRVUZETEVOQlFVTTdXVUZETVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFsQlEyeENMRk5CUVZNN2FVSkJRMG9zUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhEUVVGRE8ybENRVU42UWl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRlRU1zVTBGQlV6dHBRa0ZEU2l4TlFVRk5MRVZCUVVVN2FVSkJRMUlzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJoQ0xGTkJRVk03YVVKQlEwb3NVVUZCVVN4RFFVRkRMRFJDUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdhVUpCUTI1RExFbEJRVWtzUTBGQlF6dG5Ra0ZEUml4SlFVRk5MRTlCUVU4c1IwRkJaMElzVTBGQlV5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMmRDUVVOd1JDeEpRVUZOTEdGQlFXRXNSMEZCUnl3NFFrRkJUeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1owSkJRMnBFTEVsQlFVMHNhVUpCUVdsQ0xFZEJRVWNzTmtKQlFWY3NRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hSUVVGUkxFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRE8yZENRVU12UlN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEdGQlFXRXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNCRkxFbEJRVWtzUlVGQlJTeERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZGtJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEZRVUZGTEVOQlFVTXNiMFZCUVc5RkxFVkJRVVVzVlVGQlV5eEpRVUZKTzFsQlEyeEdMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4VFFVRlRPMmxDUVVOS0xFdEJRVXNzUlVGQlJUdHBRa0ZEVUN4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVU1zUzBGQlN5eEZRVUZGTEhOQ1FVRnpRaXhGUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUkN4VFFVRlRPMmxDUVVOS0xGRkJRVkVzUTBGQlF5dzBRa0ZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8ybENRVU51UXl4SlFVRkpMRU5CUVVNN1owSkJRMFlzU1VGQlRTeFBRVUZQTEVkQlFXZENMRk5CUVZNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dG5Ra0ZEY0VRc1NVRkJUU3hqUVVGakxFZEJRVWNzSzBKQlFWRXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZETzJkQ1FVTjRSQ3hoUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEyeEVMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMWdzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRUaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEZGQlFWRXNRMEZCUXl4elFrRkJjMElzUlVGQlJUdFJRVU0zUWl4VlFVRlZMRU5CUVVNN1dVRkRVQ3hUUVVGVExFZEJRVWNzVVVGQlVTeEZRVUZGTEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEZRVUZGTEVOQlFVTXNkME5CUVhkRExFVkJRVVU3V1VGRGVrTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXh2UWtGQmRVSXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRPVU1zU1VGQlRTeFBRVUZQTEVkQlFXZENMRk5CUVZNc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dFpRVU53UkN4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc09FSkJRV01zUTBGQlF5eERRVUZETzFsQlJYQkVMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJReTlDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFNDeFJRVUZSTEVOQlFVTXNNRUpCUVRCQ0xFVkJRVVU3VVVGRGFrTXNWVUZCVlN4RFFVRkRPMWxCUTFBc1UwRkJVeXhIUVVGSExGRkJRVkVzUlVGQlJTeERRVUZETzFGQlF6TkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETEN0RFFVRXJReXhGUVVGRkxGVkJRVk1zU1VGQlNUdFpRVU0zUkN4SlFVRkpMR0ZCUVdFc1IwRkJSeXhEUVVGRE8yOUNRVU5xUWl4TFFVRkxMRVZCUVVVc1pVRkJaVHR2UWtGRGRFSXNTVUZCU1N4RlFVRkZMRTlCUVU4N2IwSkJRMklzU1VGQlNTeEZRVUZGTEUxQlFVMDdhVUpCUTJZc1JVRkJSVHR2UWtGRFF5eExRVUZMTEVWQlFVVXNaMEpCUVdkQ08yOUNRVU4yUWl4SlFVRkpMRVZCUVVVc1UwRkJVenR2UWtGRFppeEpRVUZKTEVWQlFVVXNUVUZCVFR0cFFrRkRaaXhEUVVGRExFTkJRVU03V1VGRFNDeEpRVUZKTEV0QlFVc3NSMEZCYlVJc1JVRkJSU3hEUVVGRE8xbEJReTlDTEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJReXhEUVVGRE8yZENRVU53UWl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITzI5Q1FVTmlMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNUdHZRa0ZEV2l4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWs3YVVKQlEyWXNRMEZCUXp0WlFVTk9MRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRMFlzVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMWxCUTJ4Q0xGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEdGQlFXRXNSVUZCUXl4RFFVRkRMRU5CUVVNN1dVRkRkRVFzVTBGQlV6dHBRa0ZEU2l4UlFVRlJMRU5CUVVNc1owTkJRV0VzUlVGQlJTeERRVUZETzJsQ1FVTjZRaXhKUVVGSkxFTkJRVU03WjBKQlEwWXNTVUZCVFN4UFFVRlBMRWRCUVdkQ0xGTkJRVk1zUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0blFrRkRjRVFzU1VGQlRTeHBRa0ZCYVVJc1IwRkJSeXc0UWtGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVNM1F5eGhRVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGNrUXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZMTEVOQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOMlFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXd5UkVGQk1rUXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkRla1VzVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMWxCUTJ4Q0xGTkJRVk1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRE4wSXNVMEZCVXp0cFFrRkRTaXhSUVVGUkxFTkJRVU1zWjBOQlFXRXNSVUZCUlN4RFFVRkRPMmxDUVVONlFpeEpRVUZKTEVOQlFVTTdaMEpCUTBZc1NVRkJUU3hQUVVGUExFZEJRV2RDTEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRGNFUXNTVUZCVFN4alFVRmpMRWRCUVVjc0swSkJRVkVzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhEUVVGRE8yZENRVU0zUkN4aFFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRMnhFTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlN5eERRVUZCTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRka0lzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZCSW4wPSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF4aW9zLW1vY2stYWRhcHRlclwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWR1eC1tb2NrLXN0b3JlXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciByZXF1ZXN0ID0gcmVxdWlyZShcInN1cGVydGVzdFwiKTtcbnZhciBiY3J5cHRqc18xID0gcmVxdWlyZShcImJjcnlwdGpzXCIpO1xudmFyIF9fMSA9IHJlcXVpcmUoXCIuLi9cIik7XG52YXIgVXNlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NyYy9zZXJ2ZXIvbW9kZWxzL1VzZXJcIik7XG52YXIgY2hhaV8xID0gcmVxdWlyZShcImNoYWlcIik7XG52YXIgc2Vzc2lvbiA9IHJlcXVpcmUoJ3N1cGVydGVzdC1zZXNzaW9uJyk7XG5kZXNjcmliZSgnQXV0aCBDb250cm9sbGVyJywgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlKCdQT1NUIC9hcGkvdjEvbG9naW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIF9fMS5kcm9wQWxsQ29sbGVjdGlvbnMoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXNlciA9IG5ldyBVc2VyXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0FkcmlhbicsXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBiY3J5cHRqc18xLmhhc2hTeW5jKCd0ZXN0JyksXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB1c2VyLnNhdmUoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7IHJldHVybiBkb25lKCk7IH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgbG9naW4gdGhlIHVzZXInLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL2xvZ2luJylcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogJ3Rlc3QnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB0aGUgbG9nZ2VkLWluIHVzZXIgZGV0YWlscycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvbG9naW4nKVxuICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAndGVzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXG4gICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChqc29uLmVtYWlsLCAndGVzdEB0ZXN0LmNvbScpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5yb2xlLCAndXNlcicpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5uYW1lLCAnQWRyaWFuJyk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlcnJvciBpZiB0aGUgZW1haWwgZG9lcyBub3QgZXhpc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL2xvZ2luJylcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0LmRvZXMubm90LmV4aXRAdGVzdC5jb20nLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAndGVzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDEpXG4gICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChqc29uLmVycm9yLCAnSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCcpO1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZXJyb3IgaWYgdGhlIHBhc3N3b3JkIGRvZXMgbm90IG1hdGNoIHRoZSBoYXNoJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgLnNlbmQoe1xuICAgICAgICAgICAgICAgIGVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICd0ZXN0LWludmFsaWQtcGFzc3dvcmQnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAxKVxuICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzLnRleHQpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5lcnJvciwgJ0ludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGFuIGVycm9yIGlmIHRoZSBlbWFpbCBvciBwYXNzd29yZCBpcyBtaXNzaW5nJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgLnNlbmQoe1xuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAndGVzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDApXG4gICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChqc29uLmVycm9yLCAnUGxlYXNlIHN1cHBseSBhbiBlbWFpbCBhbmQgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL2xvZ2luJylcbiAgICAgICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nIH0pXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHJlcy50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChqc29uLmVycm9yLCAnUGxlYXNlIHN1cHBseSBhbiBlbWFpbCBhbmQgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlcnJvciBpZiB0aGUgZW1haWwgaXMgbm90IHZhbGlkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcCkucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ25vdCBhbiBlbWFpbEBhc2RmJywgcGFzc3dvcmQ6ICcxMjM0JyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwKVxuICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzLnRleHQpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5lcnJvciwgJ05vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1BPU1QgL2FwaS92MS9yZWdpc3RlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgX18xLmRyb3BBbGxDb2xsZWN0aW9ucygpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9uZSgpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVnaXN0ZXIgYSB1c2VyJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcCkucG9zdCgnL2FwaS92MS9yZWdpc3RlcicpXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nLCBwYXNzd29yZDogJ3Rlc3QnIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXG4gICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwoJ3Rlc3RAdGVzdC5jb20nKS5leGVjKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuZmFpbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFkbWluIHVzZXIgaWYgbm8gdXNlcnMgZXhpc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKS5wb3N0KCcvYXBpL3YxL3JlZ2lzdGVyJylcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAndGVzdEB0ZXN0LmNvbScsIHBhc3N3b3JkOiAndGVzdCcgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcbiAgICAgICAgICAgICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgVXNlcl8xW1wiZGVmYXVsdFwiXS5maW5kQnlFbWFpbCgndGVzdEB0ZXN0LmNvbScpLmV4ZWMoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5mYWlsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbCh1c2VyLnJvbGUsICdhZG1pbicpO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgcmVndWxhciB1c2VyIGlmIHVzZXJzIGV4aXN0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciB1ID0gbmV3IFVzZXJfMVtcImRlZmF1bHRcIl0oe1xuICAgICAgICAgICAgICAgIG5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICAgICAgICBlbWFpbDogJ2FkbWluQHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgICAgICByb2xlOiAnYWRtaW4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHUuc2F2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcCkucG9zdCgnL2FwaS92MS9yZWdpc3RlcicpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICd0ZXN0QHRlc3QuY29tJywgcGFzc3dvcmQ6ICd0ZXN0JyB9KVxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcbiAgICAgICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgICAgIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwoJ3Rlc3RAdGVzdC5jb20nKS5leGVjKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5mYWlsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHVzZXIucm9sZSwgJ3VzZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZXJyb3IgaWYgZW1haWwgb3IgcGFzc3dvcmQgbm90IHByb3ZpZGVkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcCkucG9zdCgnL2FwaS92MS9yZWdpc3RlcicpXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDApXG4gICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChqc29uLmVycm9yLCAnUGxlYXNlIHN1cHBseSBhbiBlbWFpbCBhbmQgcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApLnBvc3QoJy9hcGkvdjEvcmVnaXN0ZXInKVxuICAgICAgICAgICAgICAgICAgICAuc2VuZCh7IHBhc3N3b3JkOiAnMTIzJyB9KVxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMClcbiAgICAgICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXMudGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5lcnJvciwgJ1BsZWFzZSBzdXBwbHkgYW4gZW1haWwgYW5kIHBhc3N3b3JkJyk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZXJyb3IgaWYgbm90IGEgdmFsaWQgZW1haWwnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKS5wb3N0KCcvYXBpL3YxL3JlZ2lzdGVyJylcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAnbm90IGFuIGVtYWlsIEAgYXNkbGZrajtsJywgcGFzc3dvcmQ6ICcxMjM0JyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwKVxuICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVzLnRleHQpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwoanNvbi5lcnJvciwgJ05vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1BPU1QgL2FwaS92MS9sb2dvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZXN0U2Vzc2lvbjtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdGVzdFNlc3Npb24gPSBzZXNzaW9uKF9fMS5hcHApO1xuICAgICAgICAgICAgX18xLmRyb3BBbGxDb2xsZWN0aW9ucygpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gbmV3IFVzZXJfMVtcImRlZmF1bHRcIl0oe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnQWRyaWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGJjcnlwdGpzXzEuaGFzaFN5bmMoJ3Rlc3QnKSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHVzZXIuc2F2ZSgpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHsgcmV0dXJuIGRvbmUoKTsgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBsb2cgb3V0IHRoZSB1c2VyJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHRlc3RTZXNzaW9uLnBvc3QoJy9hcGkvdjEvbG9naW4nKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICd0ZXN0QHRlc3QuY29tJywgcGFzc3dvcmQ6ICd0ZXN0JyB9KS5lbmQoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgdGVzdFNlc3Npb24uZ2V0KCcvYXBpL3YxL3VzZXInKS5zZW5kKCkuZXhwZWN0KDIwMCkuZW5kKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRlc3RTZXNzaW9uLmdldCgnL2FwaS92MS9sb2dvdXQnKS5zZW5kKCkuZXhwZWN0KDIwMCkuZW5kKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RTZXNzaW9uLmdldCgnL2FwaS92MS91c2VyJykuc2VuZCgpLmV4cGVjdCg0MDEpLmVuZChkb25lKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHVnpkRUYxZEdoRGIyNTBjbTlzYkdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2ZEdWemRITXZjMlZ5ZG1WeUwzUmxjM1JCZFhSb1EyOXVkSEp2Ykd4bGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxHMURRVUZ4UXp0QlFVTnlReXh4UTBGQmIwTTdRVUZEY0VNc2VVSkJRVGhETzBGQlF6bERMSEZFUVVFeVJEdEJRVU16UkN3MlFrRkJPRUk3UVVGRk9VSXNTVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNN1FVRkZOME1zVVVGQlVTeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8wbEJRM2hDTEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUlVGQlJUdFJRVU16UWl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hKUVVGSk8xbEJRM0pDTEhOQ1FVRnJRaXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTjBRaXhKUVVGSkxFbEJRVWtzUjBGQlZTeEpRVUZKTEdsQ1FVRkpMRU5CUVVNN2IwSkJRM1pDTEVsQlFVa3NSVUZCUlN4UlFVRlJPMjlDUVVOa0xFdEJRVXNzUlVGQlJTeGxRVUZsTzI5Q1FVTjBRaXhSUVVGUkxFVkJRVVVzYlVKQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN2IwSkJRekZDTEVsQlFVa3NSVUZCUlN4TlFVRk5PMmxDUVVObUxFTkJRVU1zUTBGQlF6dG5Ra0ZEU0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNTVUZCVnl4SlFVRkxMRTlCUVVFc1NVRkJTU3hGUVVGRkxFVkJRVTRzUTBGQlRTeERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1ZVRkJReXhIUVVGUk8yOUNRVU55UkN4TlFVRk5MRWRCUVVjc1EwRkJRenRuUWtGRFpDeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2RVSkJRWFZDTEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTNKRExFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTTdhVUpCUTFBc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF6dHBRa0ZEY2tJc1NVRkJTU3hEUVVGRE8yZENRVU5HTEV0QlFVc3NSVUZCUlN4bFFVRmxPMmRDUVVOMFFpeFJRVUZSTEVWQlFVVXNUVUZCVFR0aFFVTnVRaXhEUVVGRE8ybENRVU5FTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN2FVSkJRMWdzUjBGQlJ5eERRVUZETEZWQlFVTXNSMEZCVVR0blFrRkRWaXhKUVVGSkxFZEJRVWM3YjBKQlEwZ3NUMEZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WjBKQlEzSkNMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5d3dRMEZCTUVNc1JVRkJSU3hWUVVGVExFbEJRVWs3V1VGRGVFUXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJRenRwUWtGRFVDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMmxDUVVOeVFpeEpRVUZKTEVOQlFVTTdaMEpCUTBZc1MwRkJTeXhGUVVGRkxHVkJRV1U3WjBKQlEzUkNMRkZCUVZFc1JVRkJSU3hOUVVGTk8yRkJRMjVDTEVOQlFVTTdhVUpCUTBRc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dHBRa0ZEV0N4SFFVRkhMRU5CUVVNc1ZVRkJReXhIUVVGUkxFVkJRVVVzUjBGQmNVSTdaMEpCUTJwRExFbEJRVWtzUjBGQlJ6dHZRa0ZEU0N4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZEY2tJc1NVRkJTU3hKUVVGSkxFZEJRVkVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WjBKQlEzSkRMR0ZCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRenRuUWtGRGFFUXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVOMFF5eGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdaMEpCUTNoRExFbEJRVWtzUlVGQlJTeERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4dlJFRkJiMFFzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZEYkVVc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHBRa0ZEVUN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8ybENRVU55UWl4SlFVRkpMRU5CUVVNN1owSkJRMFlzUzBGQlN5eEZRVUZGTERaQ1FVRTJRanRuUWtGRGNFTXNVVUZCVVN4RlFVRkZMRTFCUVUwN1lVRkRia0lzUTBGQlF6dHBRa0ZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8ybENRVU5ZTEVkQlFVY3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hIUVVGeFFqdG5Ra0ZEYWtNc1NVRkJTU3hIUVVGSE8yOUNRVU5JTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU55UWl4SlFVRkpMRWxCUVVrc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRuUWtGRGNrTXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTERKQ1FVRXlRaXhEUVVGRExFTkJRVU03WjBKQlF6VkVMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eG5SVUZCWjBVc1JVRkJSU3hWUVVGVExFbEJRVWs3V1VGRE9VVXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJRenRwUWtGRFVDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMmxDUVVOeVFpeEpRVUZKTEVOQlFVTTdaMEpCUTBZc1MwRkJTeXhGUVVGRkxHVkJRV1U3WjBKQlEzUkNMRkZCUVZFc1JVRkJSU3gxUWtGQmRVSTdZVUZEY0VNc1EwRkJRenRwUWtGRFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMmxDUVVOWUxFZEJRVWNzUTBGQlF5eFZRVUZETEVkQlFWRXNSVUZCUlN4SFFVRnhRanRuUWtGRGFrTXNTVUZCU1N4SFFVRkhPMjlDUVVOSUxFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVOeVFpeEpRVUZKTEVsQlFVa3NSMEZCVVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0blFrRkRja01zWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxESkNRVUV5UWl4RFFVRkRMRU5CUVVNN1owSkJRelZFTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFdDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXcwUkVGQk5FUXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkRNVVVzVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0cFFrRkRVQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETzJsQ1FVTnlRaXhKUVVGSkxFTkJRVU03WjBKQlEwWXNVVUZCVVN4RlFVRkZMRTFCUVUwN1lVRkRia0lzUTBGQlF6dHBRa0ZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8ybENRVU5ZTEVkQlFVY3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hIUVVGeFFqdG5Ra0ZEYWtNc1NVRkJTU3hIUVVGSE8yOUNRVU5JTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU55UWl4SlFVRkpMRWxCUVVrc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRuUWtGRGNrTXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEhGRFFVRnhReXhEUVVGRExFTkJRVU03WjBKQlEzUkZMRTlCUVU4c1EwRkJReXhQUVVGSExFTkJRVU03Y1VKQlExQXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenR4UWtGRGNrSXNTVUZCU1N4RFFVRkRMRVZCUVVNc1MwRkJTeXhGUVVGRkxHVkJRV1VzUlVGQlF5eERRVUZETzNGQ1FVTTVRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzNGQ1FVTllMRWRCUVVjc1EwRkJReXhWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0dlFrRkRha01zU1VGQlNTeEhRVUZITzNkQ1FVTklMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTnlRaXhKUVVGSkxFbEJRVWtzUjBGQlVTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEY2tNc1lVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMSEZEUVVGeFF5eERRVUZETEVOQlFVTTdiMEpCUTNSRkxFbEJRVWtzUlVGQlJTeERRVUZETzJkQ1FVTllMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRMVlzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eHJSRUZCYTBRc1JVRkJSU3hWUVVGVExFbEJRVWs3V1VGRGFFVXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTTdhVUpCUXpkQ0xFbEJRVWtzUTBGQlF5eEZRVUZETEV0QlFVc3NSVUZCUlN4dFFrRkJiVUlzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkRMRU5CUVVNN2FVSkJRM0JFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN2FVSkJRMWdzUjBGQlJ5eERRVUZETEZWQlFVTXNSMEZCVVN4RlFVRkZMRWRCUVhGQ08yZENRVU5xUXl4SlFVRkpMRWRCUVVjN2IwSkJRMGdzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRM0pDTEVsQlFVa3NTVUZCU1N4SFFVRlJMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVOeVF5eGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzTWtKQlFUSkNMRU5CUVVNc1EwRkJRenRuUWtGRE5VUXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU5XTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFNDeFJRVUZSTEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVU3VVVGRE9VSXNWVUZCVlN4RFFVRkRMRlZCUVZVc1NVRkJTVHRaUVVOeVFpeHpRa0ZCYTBJc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZOTEU5QlFVRXNTVUZCU1N4RlFVRkZMRVZCUVU0c1EwRkJUU3hEUVVGRExFTkJRVU03VVVGRE5VTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zZDBKQlFYZENMRVZCUVVVc1ZVRkJVeXhKUVVGSk8xbEJRM1JETEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNN2FVSkJRMmhETEVsQlFVa3NRMEZCUXl4RlFVRkRMRXRCUVVzc1JVRkJSU3hsUVVGbExFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNSVUZCUXl4RFFVRkRPMmxDUVVOb1JDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMmxDUVVOWUxFZEJRVWNzUTBGQlF5eFZRVUZETEVkQlFWRXNSVUZCUlN4SFFVRnhRanRuUWtGRGFrTXNTVUZCUnl4SFFVRkhPMjlDUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVONlFpeHBRa0ZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJReXhKUVVGWE8yOUNRVU4wUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8zZENRVU5RTEdGQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenQzUWtGRFpDeFBRVUZQTEVsQlFVa3NSVUZCUlN4RFFVRkRPM0ZDUVVOcVFqdHZRa0ZEUkN4SlFVRkpMRVZCUVVVc1EwRkJRenRuUWtGRFdDeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRkxMRU5CUVVFc1EwRkJReXhWUVVGRExFZEJRVkU3YjBKQlEyUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WjBKQlEzSkNMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRMDRzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5d3JRMEZCSzBNc1JVRkJSU3hWUVVGVkxFbEJRVWs3V1VGRE9VUXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRwUWtGRGFFTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxHVkJRV1VzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkZMRU5CUVVNN2FVSkJRMnhFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN2FVSkJRMWdzUjBGQlJ5eERRVUZETEZWQlFVTXNSMEZCVVN4RlFVRkZMRWRCUVhGQ08yZENRVU5xUXl4SlFVRkpMRWRCUVVjN2IwSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRekZDTEdsQ1FVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGRExFbEJRVmM3YjBKQlEzUkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3ZDBKQlExQXNZVUZCVFN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8zRkNRVU5xUWp0dlFrRkRSQ3hoUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03YjBKQlEzWkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVVzc1EwRkJRU3hEUVVGRExGVkJRVU1zUjBGQlVUdHZRa0ZEWkN4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZEY2tJc1EwRkJReXhEUVVGRExFTkJRVUU3V1VGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETERaRFFVRTJReXhGUVVGRkxGVkJRVk1zU1VGQlNUdFpRVU16UkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxHbENRVUZKTEVOQlFVTTdaMEpCUTJJc1NVRkJTU3hGUVVGRkxFMUJRVTA3WjBKQlExb3NTMEZCU3l4RlFVRkZMR2RDUVVGblFqdG5Ra0ZEZGtJc1VVRkJVU3hGUVVGRkxGVkJRVlU3WjBKQlEzQkNMRWxCUVVrc1JVRkJSU3hQUVVGUE8yRkJRMmhDTEVOQlFVTXNRMEZCUVR0WlFVTkdMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUTFZc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF6dHhRa0ZEYUVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEdWQlFXVXNSVUZCUlN4UlFVRlJMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU03Y1VKQlEyeEVMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU03Y1VKQlExZ3NSMEZCUnl4RFFVRkRMRlZCUVVNc1IwRkJVU3hGUVVGRkxFZEJRWEZDTzI5Q1FVTnFReXhKUVVGSkxFZEJRVWM3ZDBKQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03YjBKQlF6RkNMR2xDUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVsQlFWYzdkMEpCUTNSRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdORUpCUTFBc1lVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzNsQ1FVTnFRanQzUWtGRFJDeGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdkMEpCUTNSRExFbEJRVWtzUlVGQlJTeERRVUZETzI5Q1FVTllMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVXNzUTBGQlFTeERRVUZETEZWQlFVTXNSMEZCVVR0M1FrRkRaQ3hQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0dlFrRkRja0lzUTBGQlF5eERRVUZETEVOQlFVRTdaMEpCUTA0c1EwRkJReXhEUVVGRExFTkJRVU03V1VGRFdDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVTk9MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETERCRVFVRXdSQ3hGUVVGRkxGVkJRVk1zU1VGQlNUdFpRVU40UlN4UFFVRlBMRU5CUVVNc1QwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8ybENRVU5vUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzWlVGQlpTeEZRVUZGTEVOQlFVTTdhVUpCUTJoRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdhVUpCUTFnc1IwRkJSeXhEUVVGRExGVkJRVU1zUjBGQlVTeEZRVUZGTEVkQlFYRkNPMmRDUVVOcVF5eEpRVUZKTEVkQlFVYzdiMEpCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUXpGQ0xFbEJRVWtzU1VGQlNTeEhRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTnlReXhoUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc2NVTkJRWEZETEVOQlFVTXNRMEZCUXp0blFrRkRkRVVzVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0eFFrRkRhRU1zU1VGQlNTeERRVUZETEVWQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJReXhEUVVGRE8zRkNRVU4yUWl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8zRkNRVU5ZTEVkQlFVY3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hIUVVGeFFqdHZRa0ZEYWtNc1NVRkJSeXhIUVVGSE8zZENRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yOUNRVU42UWl4SlFVRkpMRWxCUVVrc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRGNrTXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEhGRFFVRnhReXhEUVVGRExFTkJRVU03YjBKQlEzUkZMRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFdDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXcyUTBGQk5rTXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkRNMFFzVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0cFFrRkRhRU1zU1VGQlNTeERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMREJDUVVFd1FpeEZRVUZGTEZGQlFWRXNSVUZCUlN4TlFVRk5MRVZCUVVNc1EwRkJRenRwUWtGRE0wUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJRenRwUWtGRFdDeEhRVUZITEVOQlFVTXNWVUZCUXl4SFFVRlJMRVZCUVVVc1IwRkJjVUk3WjBKQlEycERMRWxCUVVrc1IwRkJSenR2UWtGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRE1VSXNTVUZCU1N4SlFVRkpMRWRCUVZFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRM0pETEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTd3lRa0ZCTWtJc1EwRkJReXhEUVVGRE8yZENRVU0xUkN4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEZGQlFWRXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFJRVU0xUWl4SlFVRkpMRmRCUVdkQ0xFTkJRVU03VVVGRGNrSXNWVUZCVlN4RFFVRkRMRlZCUVZVc1NVRkJTVHRaUVVOeVFpeFhRVUZYTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJReXhEUVVGRE8xbEJRek5DTEhOQ1FVRnJRaXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTjBRaXhKUVVGSkxFbEJRVWtzUjBGQlZTeEpRVUZKTEdsQ1FVRkpMRU5CUVVNN2IwSkJRM1pDTEVsQlFVa3NSVUZCUlN4UlFVRlJPMjlDUVVOa0xFdEJRVXNzUlVGQlJTeGxRVUZsTzI5Q1FVTjBRaXhSUVVGUkxFVkJRVVVzYlVKQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN2IwSkJRekZDTEVsQlFVa3NSVUZCUlN4TlFVRk5PMmxDUVVObUxFTkJRVU1zUTBGQlF6dG5Ra0ZEU0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNTVUZCVnl4SlFVRkxMRTlCUVVFc1NVRkJTU3hGUVVGRkxFVkJRVTRzUTBGQlRTeERRVUZETEVOQlFVTXNUMEZCU3l4RFFVRkJMRU5CUVVNc1ZVRkJReXhIUVVGUk8yOUNRVU55UkN4TlFVRk5MRWRCUVVjc1EwRkJRenRuUWtGRFpDeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTNaRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMmxDUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUXl4TFFVRkxMRVZCUVVVc1pVRkJaU3hGUVVGRkxGRkJRVkVzUlVGQlJTeE5RVUZOTEVWQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGRExFZEJRVkU3WjBKQlF6TkVMRWxCUVVrc1IwRkJSenR2UWtGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRE1VSXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFVTXNSMEZCVVR0dlFrRkROVVFzU1VGQlNTeEhRVUZITzNkQ1FVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTXhRaXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZETEVkQlFWRTdkMEpCUXpsRUxFbEJRVWtzUjBGQlJ6czBRa0ZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dDNRa0ZETVVJc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yOUNRVU5xUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRuUWtGRFRpeERRVUZETEVOQlFVTXNRMEZCUVR0WlFVTk9MRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVZGUUxFTkJRVU1zUTBGQlF5eERRVUZESW4wPSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN1cGVydGVzdC1zZXNzaW9uXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciByZXF1ZXN0ID0gcmVxdWlyZShcInN1cGVydGVzdFwiKTtcbnZhciBiY3J5cHRqc18xID0gcmVxdWlyZShcImJjcnlwdGpzXCIpO1xudmFyIGNoYWlfMSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xudmFyIF9fMSA9IHJlcXVpcmUoXCIuLi9cIik7XG52YXIgVXNlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NyYy9zZXJ2ZXIvbW9kZWxzL1VzZXJcIik7XG5kZXNjcmliZSgnVXNlciBDb250cm9sbGVyJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b2tlbjtcbiAgICB2YXIgdXNlckluZm8gPSB7XG4gICAgICAgIG5hbWU6ICdBZHJpYW4nLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ3Rlc3QnLFxuICAgICAgICByb2xlOiAnYWRtaW4nXG4gICAgfTtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgIF9fMS5kcm9wQWxsQ29sbGVjdGlvbnMoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1c2VyID0gbmV3IFVzZXJfMVtcImRlZmF1bHRcIl0oe1xuICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJJbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IHVzZXJJbmZvLmVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBiY3J5cHRqc18xLmhhc2hTeW5jKHVzZXJJbmZvLnBhc3N3b3JkKSxcbiAgICAgICAgICAgICAgICByb2xlOiB1c2VySW5mby5yb2xlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1c2VyLnNhdmUoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6IHVzZXJJbmZvLmVtYWlsLCBwYXNzd29yZDogdXNlckluZm8ucGFzc3dvcmQgfSlcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gcmVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc05vdE51bGwodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzU3RyaW5nKHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5pc05vdEVtcHR5KHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdHRVQgL2FwaS92MS91c2VyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGZldGNoIHRoZSBsb2dnZWQgaW4gdXNlcicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS92MS91c2VyJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwocmVzLmJvZHkubmFtZSwgdXNlckluZm8ubmFtZSk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChyZXMuYm9keS5lbWFpbCwgdXNlckluZm8uZW1haWwpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwocmVzLmJvZHkucm9sZSwgdXNlckluZm8ucm9sZSk7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5ub3RQcm9wZXJ0eShyZXMuYm9keSwgJ3Bhc3N3b3JkJyk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgbm90IGxvZ2dlZCBpbicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS92MS91c2VyJylcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdHRVQgL2FwaS92MS91c2VycycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZWNlaXZlIGEgbGlzdCBvZiB1c2VycycsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS92MS91c2VycycpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChyZXMuYm9keS51c2Vycy5sZW5ndGgsIDEpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaW5jbHVkZShyZXMuYm9keS51c2Vyc1swXSwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB1c2VySW5mby5uYW1lLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiB1c2VySW5mby5yb2xlLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdXNlckluZm8uZW1haWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0Lm5vdFByb3BlcnR5KHJlcy5ib2R5LnVzZXJzWzBdLCAncGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiBub3QgbG9nZ2VkIGluJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpL3YxL3VzZXJzJylcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdHRVQgL2FwaS92MS91c2VyLzplbWFpbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXRyaWV2ZSBhIHVzZXIgYnkgZW1haWwnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvdjEvdXNlci8nICsgdXNlckluZm8uZW1haWwpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5oYXNBbGxLZXlzKHJlcy5ib2R5LnVzZXIsIFsnZW1haWwnLCAnbmFtZScsICdyb2xlJywgJ19pZCcsICdjcmVhdGVkJ10pO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaW5jbHVkZShyZXMuYm9keS51c2VyLCB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VySW5mby5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdXNlckluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogdXNlckluZm8ucm9sZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiBlbWFpbCBkb2VzIG5vdCBleGlzdCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLmdldCgnL2FwaS92MS91c2VyL25vdC5pbi51c2VAdGVzdC5jb20nKVxuICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgdG9rZW4pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDAsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNTdHJpbmcocmVzLmJvZHkuZXJyb3IpO1xuICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwocmVzLmJvZHkuZXJyb3IsICdObyB1c2VyIGZvdW5kIHdpdGggdGhhdCBlbWFpbCcpO1xuICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIGlmIG5vdCBhIHZhbGlkIGVtYWlsJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpL3YxL3VzZXIvbm90LWFuLWVtYWlsJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzU3RyaW5nKHJlcy5ib2R5LmVycm9yKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHJlcy5ib2R5LmVycm9yLCAnUGxlYXNlIHN1cHBseSBhIHZhbGlkIGVtYWlsJyk7XG4gICAgICAgICAgICAgICAgZG9uZShlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdQT1NUIC9hcGkvdjEvdXNlci91cGRhdGUvZW1haWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KFwic2hvdWxkIHVwZGF0ZSB0aGUgbG9nZ2VkIGluIHVzZXIncyBlbWFpbFwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdmFyIG5ld0VtYWlsID0gJ25ldy5lbWFpbEB0ZXN0LmNvbSc7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvZW1haWwnKVxuICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgdG9rZW4pXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogbmV3RW1haWwgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvdjEvdXNlcicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgcmVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKSlcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHJlcy5ib2R5Lm5hbWUsIHVzZXJJbmZvLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHJlcy5ib2R5LmVtYWlsLCBuZXdFbWFpbCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuc3RyaWN0RXF1YWwocmVzLmJvZHkucm9sZSwgdXNlckluZm8ucm9sZSk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIGlmIG5ldyBlbWFpbCBpcyBub3QgdmFsaWQnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL2VtYWlsJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICdub3QgYW4gZW1haWwnIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDAsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIGlmIGVtYWlsIGFscmVhZHkgaW4gdXNlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS91c2VyL3VwZGF0ZS9lbWFpbCcpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAndGVzdEB0ZXN0LmNvbScgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMCwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgbm90IGF1dGhvcml6ZWQnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL2VtYWlsJylcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAndGVzdEB0ZXN0LmNvbScgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCdQT1NUIC9hcGkvdjEvdXNlci91cGRhdGUvbmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgbmFtZScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgbmV3TmFtZSA9ICduZXcgbmFtZSc7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvbmFtZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IG5hbWU6IG5ld05hbWUgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0KCcvYXBpL3YxL3VzZXInKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHJlcy5nZXQoJ3gtYWNjZXNzLXRva2VuJykpXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwLCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChyZXMuYm9keS5uYW1lLCBuZXdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5zdHJpY3RFcXVhbChyZXMuYm9keS5lbWFpbCwgdXNlckluZm8uZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKHJlcy5ib2R5LnJvbGUsIHVzZXJJbmZvLnJvbGUpO1xuICAgICAgICAgICAgICAgICAgICBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiBub3QgYXV0aG9yaXplZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgbmV3TmFtZSA9ICduZXcgbmFtZSc7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvbmFtZScpXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBuYW1lOiBuZXdOYW1lIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDEsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnUE9TVCAvYXBpL3YxL3VzZXIvdXBkYXRlL3Bhc3N3b3JkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSBwYXNzd29yZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgbmV3UGFzcyA9ICduZXdwYXNzJztcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS91c2VyL3VwZGF0ZS9wYXNzd29yZCcpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IG9sZFBhc3M6IHVzZXJJbmZvLnBhc3N3b3JkLCBuZXdQYXNzOiBuZXdQYXNzIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6IHVzZXJJbmZvLmVtYWlsLCBwYXNzd29yZDogbmV3UGFzcyB9KVxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZG9uZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCB1cGRhdGluZyBwYXNzd29yZCBpZiBjdXJyZW50IHBhc3N3b3JkIGludmFsaWQnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL3VzZXIvdXBkYXRlL3Bhc3N3b3JkJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgb2xkUGFzczogJ3dyb25nIHBhc3N3b3JkJywgbmV3UGFzczogJzEyMzQxMjM0JyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCB1cGRhdGluZyBwYXNzd29yZCBpZiBub3QgYXV0aG9yaXplZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvdXNlci91cGRhdGUvcGFzc3dvcmQnKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAxLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1BPU1QgL2FwaS92MS91c2VyL2NyZWF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld1VzZXIgPSB7XG4gICAgICAgICAgICBlbWFpbDogJ3Rlc3QxMjNAdGVzdC5jb20nLFxuICAgICAgICAgICAgbmFtZTogJ05ldyBVc2VyJyxcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgfTtcbiAgICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgdXNlcicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKG5ld1VzZXIuZW1haWwpLmNvdW50RG9jdW1lbnRzKGZ1bmN0aW9uIChlcnIsIGNvdW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LnN0cmljdEVxdWFsKGNvdW50LCAwLCAnVXNlciBzaG91bGQgbm90IGV4aXN0IHdpdGggZW1haWwgdGVzdDEyM1d0ZXN0LmNvbScpO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAgICAgLnBvc3QoJy9hcGkvdjEvdXNlci9jcmVhdGUnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgICAgICAuc2VuZChuZXdVc2VyKVxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKG5ld1VzZXIuZW1haWwpLmV4ZWMoZnVuY3Rpb24gKGVyciwgdXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaV8xLmFzc2VydC5kZWVwSW5jbHVkZSh1c2VyLCBuZXdVc2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiB1c2VyIG1ha2luZyByZXF1ZXN0IGlzIG5vdCBhbiBhZG1pbicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgdXNlciA9IG5ldyBVc2VyXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXdVc2VyLm5hbWUsXG4gICAgICAgICAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGJjcnlwdGpzXzEuaGFzaFN5bmMoJ3Bhc3N3b3JkJyksXG4gICAgICAgICAgICAgICAgcm9sZTogbmV3VXNlci5yb2xlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1c2VyLnNhdmUoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6IG5ld1VzZXIuZW1haWwsIHBhc3N3b3JkOiAncGFzc3dvcmQnIH0pXG4gICAgICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgICAgICAgICAgICAgICAuZW5kKGZ1bmN0aW9uIChlcnIsIHJlcykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHJlcy5nZXQoJ3gtYWNjZXNzLXRva2VuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL3VzZXIvY3JlYXRlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgdG9rZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiB1c2VyIGlzIG5vdCBsb2dnZWQgaW4nLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL3VzZXIvY3JlYXRlJylcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZW1haWwgaXMgbm90IHZhbGlkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS91c2VyL2NyZWF0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6ICdub3QgdmFsaWQnLFxuICAgICAgICAgICAgICAgIG5hbWU6IG5ld1VzZXIubmFtZSxcbiAgICAgICAgICAgICAgICByb2xlOiBuZXdVc2VyLnJvbGVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDAsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIGlmIHJvbGUgbm90IHZhbGlkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS91c2VyL2NyZWF0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgICAgICAgICAgbmFtZTogbmV3VXNlci5uYW1lLFxuICAgICAgICAgICAgICAgIHJvbGU6ICdub3QgdmFsaWQnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiBlbWFpbCBhZGRyZXNzIGFscmVhZHkgaW4gdXNlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS91c2VyL2NyZWF0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6IHVzZXJJbmZvLmVtYWlsLFxuICAgICAgICAgICAgICAgIG5hbWU6IG5ld1VzZXIubmFtZSxcbiAgICAgICAgICAgICAgICByb2xlOiBuZXdVc2VyLnJvbGVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDAsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnUFVUIC9hcGkvdjEvdXNlci91cGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdVc2VySW5mbyA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdOZXcgTmFtZScsXG4gICAgICAgICAgICBlbWFpbDogJ25ld2VtYWlsQHRlc3QuY29tJyxcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJ1xuICAgICAgICB9O1xuICAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdXNlcicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnB1dCgnL2FwaS92MS91c2VyL3VwZGF0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiB1c2VySW5mby5lbWFpbCwgdXNlcjogbmV3VXNlckluZm8gfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKG5ld1VzZXJJbmZvLmVtYWlsKS5leGVjKGZ1bmN0aW9uIChlcnIsIHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgICAgIGNoYWlfMS5hc3NlcnQuaXNOb3ROdWxsKHVzZXIpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmRlZXBJbmNsdWRlKHVzZXIsIG5ld1VzZXJJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgdXNlciB3aXRoIGVtYWlsIGRvZXMgbm90IGV4aXN0JywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucHV0KCcvYXBpL3YxL3VzZXIvdXBkYXRlJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICdkb2Vzbm90ZXhpc3RAdGVzdC5jb20nLCB1c2VyOiBuZXdVc2VySW5mbyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDA0LCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiBuZXcgZW1haWwgbm90IHZhbGlkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucHV0KCcvYXBpL3YxL3VzZXIvdXBkYXRlJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogdXNlckluZm8uZW1haWwsXG4gICAgICAgICAgICAgICAgdXNlcjogT2JqZWN0LmFzc2lnbih7fSwgbmV3VXNlckluZm8sIHsgZW1haWw6ICdub3QgdmFsaWQnIH0pXG4gICAgICAgICAgICB9KS5leHBlY3QoNDAwLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiByb2xlIG5vdCB2YWxpZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgLnB1dCgnL2FwaS92MS91c2VyL3VwZGF0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6IHVzZXJJbmZvLmVtYWlsLFxuICAgICAgICAgICAgICAgIHVzZXI6IE9iamVjdC5hc3NpZ24oe30sIG5ld1VzZXJJbmZvLCB7IHJvbGU6ICdub3QgdmFsaWQnIH0pXG4gICAgICAgICAgICB9KS5leHBlY3QoNDAwLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ0RFTEVURSAvYXBpL3YxL3VzZXIvZGVsZXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgdXNlciA9IG5ldyBVc2VyXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV3IE5hbWUnLFxuICAgICAgICAgICAgICAgIGVtYWlsOiAnbmV3ZW1haWxAdGVzdC5jb20nLFxuICAgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogJ3Bhc3MnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpbmFjdGl2ZVVzZXIgPSBuZXcgVXNlcl8xW1wiZGVmYXVsdFwiXSh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgICAgIGVtYWlsOiAnZGVsZXRlZEB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgIGRlbGV0ZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHVzZXIuc2F2ZShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICBpbmFjdGl2ZVVzZXIuc2F2ZShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBkZWxldGUgdGhlIHVzZXInLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVtcImRlbGV0ZVwiXSgnL2FwaS92MS91c2VyL2RlbGV0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAnbmV3ZW1haWxAdGVzdC5jb20nIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIFVzZXJfMVtcImRlZmF1bHRcIl0uZmluZEJ5RW1haWwoJ25ld2VtYWlsQHRlc3QuY29tJykuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzVHJ1ZSh1c2VyLmRlbGV0ZWQpO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiB0cnlpbmcgdG8gZGVsZXRlIGxvZ2dlZCBpbiB1c2VyJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClbXCJkZWxldGVcIl0oJy9hcGkvdjEvdXNlci9kZWxldGUnKVxuICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgdG9rZW4pXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogdXNlckluZm8uZW1haWwgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMCwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZW1haWwgaW5hY3RpdmUnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVtcImRlbGV0ZVwiXSgnL2FwaS92MS91c2VyL2RlbGV0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAnZGVsZXRlZEB0ZXN0LmNvbScgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMCwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZW1haWwgZG9lcyBub3QgZXhpc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVtcImRlbGV0ZVwiXSgnL2FwaS92MS91c2VyL2RlbGV0ZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAnbm90cmVhbEB0ZXN0LmNvbScgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwNCwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZW1haWwgbm90IHByb3ZpZGVkJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClbXCJkZWxldGVcIl0oJy9hcGkvdjEvdXNlci9kZWxldGUnKVxuICAgICAgICAgICAgICAgIC5zZXQoJ3gtYWNjZXNzLXRva2VuJywgdG9rZW4pXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ25vdCB2YWxpZCcgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMCwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgdXNlciBtYWtpbmcgcmVxdWVzdCBpcyBub3QgYW4gYWRtaW4nLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdmFyIHVzZXIgPSBuZXcgVXNlcl8xW1wiZGVmYXVsdFwiXSh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgICAgIGVtYWlsOiAnbm90YW5hZG1pbkB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGJjcnlwdGpzXzEuaGFzaFN5bmMoJ3Bhc3N3b3JkJyksXG4gICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1c2VyLnNhdmUoZnVuY3Rpb24gKGVyciwgdXNlcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgICAgICAucG9zdCgnL2FwaS92MS9sb2dpbicpXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICdub3RhbmFkbWluQHRlc3QuY29tJywgcGFzc3dvcmQ6ICdwYXNzd29yZCcgfSlcbiAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gcmVzLmdldCgneC1hY2Nlc3MtdG9rZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVtcImRlbGV0ZVwiXSgnL2FwaS92MS91c2VyL2RlbGV0ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCg0MDEsIGRvbmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgdXNlciBub3QgbG9nZ2VkIGluJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClbXCJkZWxldGVcIl0oJy9hcGkvdjEvdXNlci9kZWxldGUnKVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAxLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJ1BVVCAvYXBpL3YxL3VzZXIvcmVzdG9yZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdmFyIHVzZXIgPSBuZXcgVXNlcl8xW1wiZGVmYXVsdFwiXSh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldyBOYW1lJyxcbiAgICAgICAgICAgICAgICBlbWFpbDogJ2FjdGl2ZUB0ZXN0LmNvbScsXG4gICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiAncGFzcydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGluYWN0aXZlVXNlciA9IG5ldyBVc2VyXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgZW1haWw6ICdkZWxldGVkQHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgZGVsZXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdXNlci5zYXZlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIGluYWN0aXZlVXNlci5zYXZlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJlc3RvcmUgdGhlIHVzZXInLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wdXQoJy9hcGkvdjEvdXNlci9yZXN0b3JlJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICdkZWxldGVkQHRlc3QuY29tJyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoMjAwLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICBVc2VyXzFbXCJkZWZhdWx0XCJdLmZpbmRCeUVtYWlsKCdkZWxldGVkQHRlc3QuY29tJykuZXhlYyhmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICBjaGFpXzEuYXNzZXJ0LmlzRmFsc2UodXNlci5kZWxldGVkKTtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZW1haWwgZG9lcyBub3QgZXhpc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcmVxdWVzdChfXzEuYXBwKVxuICAgICAgICAgICAgICAgIC5wdXQoJy9hcGkvdjEvdXNlci9yZXN0b3JlJylcbiAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgIC5zZW5kKHsgZW1haWw6ICdkb2Vzbm90ZXhpc3RAdGVzdC5jb20nIH0pXG4gICAgICAgICAgICAgICAgLmV4cGVjdCg0MDQsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBmYWlsIGlmIHVzZXIgaXMgYWN0aXZlJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucHV0KCcvYXBpL3YxL3VzZXIvcmVzdG9yZScpXG4gICAgICAgICAgICAgICAgLnNldCgneC1hY2Nlc3MtdG9rZW4nLCB0b2tlbilcbiAgICAgICAgICAgICAgICAuc2VuZCh7IGVtYWlsOiAnYWN0aXZlQHRlc3QuY29tJyB9KVxuICAgICAgICAgICAgICAgIC5leHBlY3QoNDAwLCBkb25lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgZmFpbCBpZiB1c2VyIG1ha2luZyByZXF1ZXN0IGlzIG5vdCBhbiBhZG1pbicsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgdXNlciA9IG5ldyBVc2VyXzFbXCJkZWZhdWx0XCJdKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgZW1haWw6ICdub3RhbmFkbWluQHRlc3QuY29tJyxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogYmNyeXB0anNfMS5oYXNoU3luYygncGFzc3dvcmQnKSxcbiAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHVzZXIuc2F2ZShmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgICAgIC5wb3N0KCcvYXBpL3YxL2xvZ2luJylcbiAgICAgICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ25vdGFuYWRtaW5AdGVzdC5jb20nLCBwYXNzd29yZDogJ3Bhc3N3b3JkJyB9KVxuICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMClcbiAgICAgICAgICAgICAgICAgICAgLmVuZChmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSByZXMuZ2V0KCd4LWFjY2Vzcy10b2tlbicpO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0KF9fMS5hcHApXG4gICAgICAgICAgICAgICAgICAgICAgICAucHV0KCcvYXBpL3YxL3VzZXIvcmVzdG9yZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0KCd4LWFjY2Vzcy10b2tlbicsIHRva2VuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCg0MDEsIGRvbmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGZhaWwgaWYgdXNlciBub3QgbG9nZ2VkIGluJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QoX18xLmFwcClcbiAgICAgICAgICAgICAgICAucHV0KCcvYXBpL3YxL3VzZXIvcmVzdG9yZScpXG4gICAgICAgICAgICAgICAgLnNlbmQoeyBlbWFpbDogJ2FjdGl2ZUB0ZXN0LmNvbScgfSlcbiAgICAgICAgICAgICAgICAuZXhwZWN0KDQwMSwgZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkR1Z6ZEZWelpYSkRiMjUwY205c2JHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmRHVnpkSE12YzJWeWRtVnlMM1JsYzNSVmMyVnlRMjl1ZEhKdmJHeGxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJMRzFEUVVGeFF6dEJRVU55UXl4eFEwRkJiME03UVVGRGNFTXNOa0pCUVRoQ08wRkJSVGxDTEhsQ1FVRTRRenRCUVVNNVF5eHhSRUZCTWtRN1FVRkZNMFFzVVVGQlVTeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8wbEJRM2hDTEVsQlFVa3NTMEZCWVN4RFFVRkRPMGxCUTJ4Q0xFbEJRVWtzVVVGQlVTeEhRVUZITzFGQlExZ3NTVUZCU1N4RlFVRkZMRkZCUVZFN1VVRkRaQ3hMUVVGTExFVkJRVVVzWlVGQlpUdFJRVU4wUWl4UlFVRlJMRVZCUVVVc1RVRkJUVHRSUVVOb1FpeEpRVUZKTEVWQlFVVXNUMEZCVHp0TFFVTm9RaXhEUVVGRE8wbEJSVVlzVlVGQlZTeERRVUZETEZWQlFWTXNTVUZCU1R0UlFVTndRaXh6UWtGQmEwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVOMFFpeEpRVUZKTEVsQlFVa3NSMEZCVlN4SlFVRkpMR2xDUVVGSkxFTkJRVU03WjBKQlEzWkNMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNUdG5Ra0ZEYmtJc1MwRkJTeXhGUVVGRkxGRkJRVkVzUTBGQlF5eExRVUZMTzJkQ1FVTnlRaXhSUVVGUkxFVkJRVVVzYlVKQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRE8yZENRVU55UXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3WVVGRGRFSXNRMEZCUXl4RFFVRkRPMWxCUTBnc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRWxCUVZjN1owSkJSWHBDTEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2NVSkJRMUFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXp0eFFrRkRja0lzU1VGQlNTeERRVUZETEVWQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4UlFVRlJMRVZCUVVNc1EwRkJRenR4UWtGRE1VUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJRenR4UWtGRFdDeEhRVUZITEVOQlFVTXNWVUZCUXl4SFFVRlJMRVZCUVVVc1IwRkJjVUk3YjBKQlEycERMRXRCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03YjBKQlEyeERMR0ZCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdiMEpCUTNoQ0xHRkJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN2IwSkJRM1pDTEdGQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03YjBKQlEzcENMRWxCUVVrc1JVRkJSU3hEUVVGRE8yZENRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlN5eERRVUZCTEVOQlFVTXNWVUZCUXl4SFFVRlJPMmRDUVVOa0xFMUJRVTBzUjBGQlJ5eERRVUZETzFsQlEyUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUlVnc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMUZCUTNwQ0xFVkJRVVVzUTBGQlF5eHBRMEZCYVVNc1JVRkJSU3hWUVVGVkxFbEJRVWs3V1VGRGFFUXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJRenRwUWtGRFVDeEhRVUZITEVOQlFVTXNZMEZCWXl4RFFVRkRPMmxDUVVOdVFpeEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUzBGQlN5eERRVUZETzJsQ1FVTTFRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEZWQlFVTXNSMEZCVVN4RlFVRkZMRWRCUVhGQ08yZENRVU42UXl4SlFVRkpMRWRCUVVjN2IwSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRekZDTEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yZENRVU5xUkN4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEYmtRc1lVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUTJwRUxHRkJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtNc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRFdDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETERoQ1FVRTRRaXhGUVVGRkxGVkJRVlVzU1VGQlNUdFpRVU0zUXl4UFFVRlBMRU5CUVVNc1QwRkJSeXhEUVVGRE8ybENRVU5RTEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNN2FVSkJRMjVDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE0wSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEZGQlFWRXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJUdFJRVU14UWl4RlFVRkZMRU5CUVVNc1owTkJRV2RETEVWQlFVVXNWVUZCVlN4SlFVRkpPMWxCUXk5RExFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTTdhVUpCUTFBc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF6dHBRa0ZEY0VJc1IwRkJSeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJRenRwUWtGRE5VSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0blFrRkRla01zWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRemRETEdGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVN2IwSkJRemxDTEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTVHR2UWtGRGJrSXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSk8yOUNRVU51UWl4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFdEJRVXM3YVVKQlEzaENMRU5CUVVNc1EwRkJRVHRuUWtGRFJpeGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRE8yZENRVU5zUkN4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zT0VKQlFUaENMRVZCUVVVc1ZVRkJWU3hKUVVGSk8xbEJRemRETEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXp0cFFrRkRjRUlzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMGdzVVVGQlVTeERRVUZETEhsQ1FVRjVRaXhGUVVGRk8xRkJRMmhETEVWQlFVVXNRMEZCUXl4cFEwRkJhVU1zUlVGQlJTeFZRVUZWTEVsQlFVazdXVUZEYUVRc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHBRa0ZEVUN4SFFVRkhMRU5CUVVNc1pVRkJaU3hIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTTdhVUpCUTNKRExFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03YVVKQlF6VkNMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzVlVGQlF5eEhRVUZSTEVWQlFVVXNSMEZCY1VJN1owSkJRM3BETEdGQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE9VVXNZVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0dlFrRkRNVUlzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxPMjlDUVVOeVFpeEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrN2IwSkJRMjVDTEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTVHRwUWtGRGRFSXNRMEZCUXl4RFFVRkRPMmRDUVVOSUxFbEJRVWtzUlVGQlJTeERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4eFEwRkJjVU1zUlVGQlJTeFZRVUZWTEVsQlFVazdXVUZEY0VRc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHBRa0ZEVUN4SFFVRkhMRU5CUVVNc2EwTkJRV3RETEVOQlFVTTdhVUpCUTNaRExFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03YVVKQlF6VkNMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzVlVGQlF5eEhRVUZSTEVWQlFVVXNSMEZCY1VJN1owSkJRM3BETEdGQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkRhRU1zWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTd3JRa0ZCSzBJc1EwRkJReXhEUVVGRE8yZENRVU53UlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRFpDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzUlVGQlJTeERRVUZETEd0RFFVRnJReXhGUVVGRkxGVkJRVlVzU1VGQlNUdFpRVU5xUkN4UFFVRlBMRU5CUVVNc1QwRkJSeXhEUVVGRE8ybENRVU5RTEVkQlFVY3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF6dHBRa0ZEYUVNc1IwRkJSeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJRenRwUWtGRE5VSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0blFrRkRla01zWVVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTm9ReXhoUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxEWkNRVUUyUWl4RFFVRkRMRU5CUVVNN1owSkJRMnhGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOa0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5JTEZGQlFWRXNRMEZCUXl4blEwRkJaME1zUlVGQlJUdFJRVU4yUXl4RlFVRkZMRU5CUVVNc01FTkJRVEJETEVWQlFVVXNWVUZCVlN4SlFVRkpPMWxCUTNwRUxFbEJRVWtzVVVGQlVTeEhRVUZITEc5Q1FVRnZRaXhEUVVGRE8xbEJRM0JETEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVGRE8ybENRVU5xUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRPMmxDUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRkxFTkJRVU03YVVKQlEzcENMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzVlVGQlF5eEhRVUZSTEVWQlFVVXNSMEZCY1VJN1owSkJRM3BETEVsQlFVa3NSMEZCUnp0dlFrRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRNVUlzVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0eFFrRkRVQ3hIUVVGSExFTkJRVU1zWTBGQll5eERRVUZETzNGQ1FVVnVRaXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8zRkNRVU5vUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxGVkJRVU1zUjBGQlVTeEZRVUZGTEVkQlFYRkNPMjlDUVVONlF5eGhRVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRGFrUXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenR2UWtGRE4wTXNZVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEycEVMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZEWkN4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zZFVOQlFYVkRMRVZCUVVVc1ZVRkJWU3hKUVVGSk8xbEJRM1JFTEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVGRE8ybENRVU5xUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRPMmxDUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1kwRkJZeXhGUVVGRkxFTkJRVU03YVVKQlF5OUNMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFJpeEZRVUZGTEVOQlFVTXNjVU5CUVhGRExFVkJRVVVzVlVGQlZTeEpRVUZKTzFsQlEzQkVMRTlCUVU4c1EwRkJReXhQUVVGSExFTkJRVU03YVVKQlExQXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeERRVUZETzJsQ1FVTnFReXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1MwRkJTeXhEUVVGRE8ybENRVU0xUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzWlVGQlpTeEZRVUZGTEVOQlFVTTdhVUpCUTJoRExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRNMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc0swSkJRU3RDTEVWQlFVVXNWVUZCVlN4SlFVRkpPMWxCUXpsRExFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTTdhVUpCUTFBc1NVRkJTU3hEUVVGRExESkNRVUV5UWl4RFFVRkRPMmxDUVVOcVF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1pVRkJaU3hGUVVGRkxFTkJRVU03YVVKQlEyaERMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTklMRkZCUVZFc1EwRkJReXdyUWtGQkswSXNSVUZCUlR0UlFVTjBReXhGUVVGRkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1ZVRkJWU3hKUVVGSk8xbEJRMjVETEVsQlFVa3NUMEZCVHl4SFFVRkhMRlZCUVZVc1EwRkJRenRaUVVONlFpeFBRVUZQTEVOQlFVTXNUMEZCUnl4RFFVRkRPMmxDUVVOUUxFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJRenRwUWtGRGFFTXNSMEZCUnl4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEV0QlFVc3NRMEZCUXp0cFFrRkROVUlzU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRE8ybENRVU4yUWl4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxGVkJRVU1zUjBGQlVTeEZRVUZGTEVkQlFYRkNPMmRDUVVONlF5eFBRVUZQTEVOQlFVTXNUMEZCUnl4RFFVRkRPM0ZDUVVOUUxFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTTdjVUpCUTI1Q0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03Y1VKQlEyaEVMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzVlVGQlF5eEhRVUZSTEVWQlFVVXNSMEZCY1VJN2IwSkJRM3BETEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN2IwSkJRek5ETEdGQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yOUNRVU51UkN4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEYWtRc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTmtMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5d3JRa0ZCSzBJc1JVRkJSU3hWUVVGVkxFbEJRVWs3V1VGRE9VTXNTVUZCU1N4UFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xbEJRM3BDTEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRE8ybENRVU5vUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTTdhVUpCUTNaQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRNMElzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOSUxGRkJRVkVzUTBGQlF5eHRRMEZCYlVNc1JVRkJSVHRSUVVNeFF5eEZRVUZGTEVOQlFVTXNkMEpCUVhkQ0xFVkJRVVVzVlVGQlZTeEpRVUZKTzFsQlEzWkRMRWxCUVVrc1QwRkJUeXhIUVVGSExGTkJRVk1zUTBGQlF6dFpRVU40UWl4UFFVRlBMRU5CUVVNc1QwRkJSeXhEUVVGRE8ybENRVU5RTEVsQlFVa3NRMEZCUXl3NFFrRkJPRUlzUTBGQlF6dHBRa0ZEY0VNc1IwRkJSeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJRenRwUWtGRE5VSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1QwRkJUeXhGUVVGRkxGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRE8ybENRVU4wUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxGVkJRVU1zUjBGQlVTeEZRVUZGTEVkQlFYRkNPMmRDUVVONlF5eEpRVUZKTEVkQlFVYzdiMEpCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUXpGQ0xFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTTdjVUpCUTFBc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF6dHhRa0ZEY2tJc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzNGQ1FVTnNSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUXpOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zTWtSQlFUSkVMRVZCUVVVc1ZVRkJWU3hKUVVGSk8xbEJRM1JGTEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzU1VGQlNTeERRVUZETERoQ1FVRTRRaXhEUVVGRE8ybENRVU53UXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRPMmxDUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRE8ybENRVU40UkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6TkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUlVGQlJTeERRVUZETEdsRVFVRnBSQ3hGUVVGRkxGVkJRVlVzU1VGQlNUdFpRVU5vUlN4UFFVRlBMRU5CUVVNc1QwRkJSeXhEUVVGRE8ybENRVU5RTEVsQlFVa3NRMEZCUXl3NFFrRkJPRUlzUTBGQlF6dHBRa0ZEY0VNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTXpRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTBnc1VVRkJVU3hEUVVGRExEQkNRVUV3UWl4RlFVRkZPMUZCUTJwRExFbEJRVWtzVDBGQlR5eEhRVUZITzFsQlExWXNTMEZCU3l4RlFVRkZMR3RDUVVGclFqdFpRVU42UWl4SlFVRkpMRVZCUVVVc1ZVRkJWVHRaUVVOb1FpeEpRVUZKTEVWQlFVVXNUVUZCVFR0VFFVTm1MRU5CUVVFN1VVRkRSQ3hGUVVGRkxFTkJRVU1zTUVKQlFUQkNMRVZCUVVVc1ZVRkJVeXhKUVVGSk8xbEJSWGhETEdsQ1FVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4alFVRmpMRU5CUVVNc1ZVRkJReXhIUVVGSExFVkJRVVVzUzBGQllUdG5Ra0ZET1VRc1NVRkJTU3hIUVVGSE8yOUNRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU14UWl4aFFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNiVVJCUVcxRUxFTkJRVU1zUTBGQlF6dG5Ra0ZEYkVZc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHhRa0ZEVUN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdjVUpCUXpOQ0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03Y1VKQlF6VkNMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU03Y1VKQlEySXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0dlFrRkRla01zU1VGQlNTeEhRVUZITzNkQ1FVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTXhRaXhwUWtGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVZjN2QwSkJRMnhFTEVsQlFVa3NSMEZCUnpzMFFrRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0M1FrRkRNVUlzWVVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03ZDBKQlEyeERMRWxCUVVrc1JVRkJSU3hEUVVGRE8yOUNRVU5ZTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4dlJFRkJiMFFzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZEYkVVc1NVRkJTU3hKUVVGSkxFZEJRVlVzU1VGQlNTeHBRa0ZCU1N4RFFVRkRPMmRDUVVOMlFpeEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrN1owSkJRMnhDTEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1MwRkJTenRuUWtGRGNFSXNVVUZCVVN4RlFVRkZMRzFDUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETzJkQ1FVTTVRaXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVazdZVUZEY2tJc1EwRkJReXhEUVVGRE8xbEJRMGdzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGRExFbEJRVmM3WjBKQlJYcENMRTlCUVU4c1EwRkJReXhQUVVGSExFTkJRVU03Y1VKQlExQXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenR4UWtGRGNrSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRE8zRkNRVU53UkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRE8zRkNRVU5ZTEVkQlFVY3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hIUVVGeFFqdHZRa0ZEYWtNc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dHZRa0ZEYkVNc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dDVRa0ZEVUN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdlVUpCUXpOQ0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03ZVVKQlF6VkNMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUXpOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJTeXhEUVVGQkxFTkJRVU1zVlVGQlF5eEhRVUZSTzJkQ1FVTmtMRTFCUVUwc1IwRkJSeXhEUVVGRE8xbEJRMlFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5eHpRMEZCYzBNc1JVRkJSU3hWUVVGVExFbEJRVWs3V1VGRGNFUXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJRenRwUWtGRFVDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03YVVKQlF6TkNMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRFJpeEZRVUZGTEVOQlFVTXNiVU5CUVcxRExFVkJRVVVzVlVGQlV5eEpRVUZKTzFsQlEycEVMRTlCUVU4c1EwRkJReXhQUVVGSExFTkJRVU03YVVKQlExQXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETzJsQ1FVTXpRaXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1MwRkJTeXhEUVVGRE8ybENRVU0xUWl4SlFVRkpMRU5CUVVNN1owSkJRMFlzUzBGQlN5eEZRVUZGTEZkQlFWYzdaMEpCUTJ4Q0xFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1R0blFrRkRiRUlzU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpPMkZCUTNKQ0xFTkJRVU03YVVKQlEwUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU16UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFVkJRVVVzUTBGQlF5d3JRa0ZCSzBJc1JVRkJSU3hWUVVGVExFbEJRVWs3V1VGRE4wTXNUMEZCVHl4RFFVRkRMRTlCUVVjc1EwRkJRenRwUWtGRFVDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03YVVKQlF6TkNMRWRCUVVjc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4TFFVRkxMRU5CUVVNN2FVSkJRelZDTEVsQlFVa3NRMEZCUXp0blFrRkRSaXhMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETEV0QlFVczdaMEpCUTNCQ0xFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1R0blFrRkRiRUlzU1VGQlNTeEZRVUZGTEZkQlFWYzdZVUZEY0VJc1EwRkJRenRwUWtGRFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRek5DTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1JVRkJSU3hEUVVGRExEWkRRVUUyUXl4RlFVRkZMRlZCUVZNc1NVRkJTVHRaUVVNelJDeFBRVUZQTEVOQlFVTXNUMEZCUnl4RFFVRkRPMmxDUVVOUUxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRwUWtGRE0wSXNSMEZCUnl4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEV0QlFVc3NRMEZCUXp0cFFrRkROVUlzU1VGQlNTeERRVUZETzJkQ1FVTkdMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zUzBGQlN6dG5Ra0ZEY2tJc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eEpRVUZKTzJkQ1FVTnNRaXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVazdZVUZEY2tJc1EwRkJRenRwUWtGRFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRek5DTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFNDeFJRVUZSTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVU3VVVGRGFFTXNTVUZCU1N4WFFVRlhMRWRCUVVjN1dVRkRaQ3hKUVVGSkxFVkJRVVVzVlVGQlZUdFpRVU5vUWl4TFFVRkxMRVZCUVVVc2JVSkJRVzFDTzFsQlF6RkNMRWxCUVVrc1JVRkJSU3hOUVVGTk8xTkJRMllzUTBGQlF6dFJRVVZHTEVWQlFVVXNRMEZCUXl4M1FrRkJkMElzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZEZEVNc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHBRa0ZEVUN4SFFVRkhMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdhVUpCUXpGQ0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03YVVKQlF6VkNMRWxCUVVrc1EwRkJReXhGUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hYUVVGWExFVkJRVU1zUTBGQlF6dHBRa0ZEYUVRc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeFZRVUZETEVkQlFWRXNSVUZCUlN4SFFVRnhRanRuUWtGRGVrTXNTVUZCU1N4SFFVRkhPMjlDUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVNeFFpeHBRa0ZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVNc1IwRkJVU3hGUVVGRkxFbEJRVmM3YjBKQlF6TkVMRWxCUVVrc1IwRkJSenQzUWtGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenR2UWtGRE1VSXNZVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEZGtJc1lVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN2IwSkJRM1JETEVsQlFVa3NSVUZCUlN4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl3clEwRkJLME1zUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZETjBRc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHBRa0ZEVUN4SFFVRkhMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdhVUpCUXpGQ0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03YVVKQlF6VkNMRWxCUVVrc1EwRkJReXhGUVVGRExFdEJRVXNzUlVGQlJTeDFRa0ZCZFVJc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZETEVOQlFVTTdhVUpCUTNwRUxFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRNMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2IwTkJRVzlETEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTJ4RUxFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTTdhVUpCUTFBc1IwRkJSeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMmxDUVVNeFFpeEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUzBGQlN5eERRVUZETzJsQ1FVTTFRaXhKUVVGSkxFTkJRVU03WjBKQlEwWXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTE8yZENRVU55UWl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRVZCUVVNc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlF5eERRVUZETzJGQlF6ZEVMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpkQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMQ3RDUVVFclFpeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTTNReXhQUVVGUExFTkJRVU1zVDBGQlJ5eERRVUZETzJsQ1FVTlFMRWRCUVVjc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0cFFrRkRNVUlzUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFdEJRVXNzUTBGQlF6dHBRa0ZETlVJc1NVRkJTU3hEUVVGRE8yZENRVU5HTEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1MwRkJTenRuUWtGRGNrSXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF6dGhRVU01UkN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTTNRaXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTBnc1VVRkJVU3hEUVVGRExEUkNRVUUwUWl4RlFVRkZPMUZCUTI1RExGVkJRVlVzUTBGQlF5eFZRVUZUTEVsQlFVazdXVUZEY0VJc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeHBRa0ZCU1N4RFFVRkRPMmRDUVVOb1FpeEpRVUZKTEVWQlFVVXNWVUZCVlR0blFrRkRhRUlzUzBGQlN5eEZRVUZGTEcxQ1FVRnRRanRuUWtGRE1VSXNTVUZCU1N4RlFVRkZMRTFCUVUwN1owSkJRMW9zVVVGQlVTeEZRVUZGTEUxQlFVMDdZVUZEYmtJc1EwRkJReXhEUVVGRE8xbEJRMGdzU1VGQlNTeFpRVUZaTEVkQlFVY3NTVUZCU1N4cFFrRkJTU3hEUVVGRE8yZENRVU40UWl4SlFVRkpMRVZCUVVVc1RVRkJUVHRuUWtGRFdpeExRVUZMTEVWQlFVVXNhMEpCUVd0Q08yZENRVU42UWl4SlFVRkpMRVZCUVVVc1RVRkJUVHRuUWtGRFdpeFJRVUZSTEVWQlFVVXNWVUZCVlR0blFrRkRjRUlzVDBGQlR5eEZRVUZGTEVsQlFVazdZVUZEYUVJc1EwRkJReXhEUVVGRE8xbEJRMGdzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRWRCUVZFN1owSkJRMllzU1VGQlNTeEhRVUZITzI5Q1FVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTXhRaXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNSMEZCVVR0dlFrRkRka0lzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVOa0xFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEwNHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRVQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVWQlFVVXNRMEZCUXl4M1FrRkJkMElzUlVGQlJTeFZRVUZUTEVsQlFVazdXVUZEZEVNc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF5eERRVU5RTEZGQlFVMHNRMEZCUVN4RFFVRkRMSEZDUVVGeFFpeERRVUZETzJsQ1FVTTNRaXhIUVVGSExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1MwRkJTeXhEUVVGRE8ybENRVU0xUWl4SlFVRkpMRU5CUVVNc1JVRkJReXhMUVVGTExFVkJRVVVzYlVKQlFXMUNMRVZCUVVNc1EwRkJRenRwUWtGRGJFTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hWUVVGRExFZEJRVkU3WjBKQlEyeENMRWxCUVVrc1IwRkJSenR2UWtGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRE1VSXNhVUpCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlF5eEhRVUZSTEVWQlFVVXNTVUZCVnp0dlFrRkROMFFzU1VGQlNTeEhRVUZITzNkQ1FVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTXhRaXhoUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenR2UWtGRE5VSXNTVUZCU1N4RlFVRkZMRU5CUVVNN1owSkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEVUN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOWUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMR2RFUVVGblJDeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTTVSQ3hQUVVGUExFTkJRVU1zVDBGQlJ5eERRVUZETEVOQlExQXNVVUZCVFN4RFFVRkJMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdhVUpCUXpkQ0xFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU03YVVKQlF6VkNMRWxCUVVrc1EwRkJReXhGUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkRMRU5CUVVNN2FVSkJRemRDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE0wSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zSzBKQlFTdENMRVZCUVVVc1ZVRkJVeXhKUVVGSk8xbEJRemRETEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNc1EwRkRVQ3hSUVVGTkxFTkJRVUVzUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRwUWtGRE4wSXNSMEZCUnl4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEV0QlFVc3NRMEZCUXp0cFFrRkROVUlzU1VGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMR3RDUVVGclFpeEZRVUZETEVOQlFVTTdhVUpCUTJ4RExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRNMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2NVTkJRWEZETEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTI1RUxFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTXNRMEZEVUN4UlFVRk5MRU5CUVVFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0cFFrRkROMElzUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFdEJRVXNzUTBGQlF6dHBRa0ZETlVJc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03YVVKQlEyNURMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEZRVUZGTEVOQlFVTXNiVU5CUVcxRExFVkJRVVVzVlVGQlV5eEpRVUZKTzFsQlEycEVMRTlCUVU4c1EwRkJReXhQUVVGSExFTkJRVU1zUTBGRFVDeFJRVUZOTEVOQlFVRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF6dHBRa0ZETjBJc1IwRkJSeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRXRCUVVzc1EwRkJRenRwUWtGRE5VSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETzJsQ1FVTTFRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMRzlFUVVGdlJDeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTnNSU3hKUVVGSkxFbEJRVWtzUjBGQlZTeEpRVUZKTEdsQ1FVRkpMRU5CUVVNN1owSkJRM1pDTEVsQlFVa3NSVUZCUlN4TlFVRk5PMmRDUVVOYUxFdEJRVXNzUlVGQlJTeHhRa0ZCY1VJN1owSkJRelZDTEZGQlFWRXNSVUZCUlN4dFFrRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF6dG5Ra0ZET1VJc1NVRkJTU3hGUVVGRkxFMUJRVTA3WVVGRFppeERRVUZETEVOQlFVTTdXVUZEU0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVU1zUjBGQlVTeEZRVUZGTEVsQlFWYzdaMEpCUXpWQ0xFbEJRVWtzUjBGQlJ6dHZRa0ZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZGTVVJc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHhRa0ZEVUN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8zRkNRVU55UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzY1VKQlFYRkNMRVZCUVVVc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETzNGQ1FVTTFSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzNGQ1FVTllMRWRCUVVjc1EwRkJReXhWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0dlFrRkRha01zUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0dlFrRkRiRU1zVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXl4RFFVTlFMRkZCUVUwc1EwRkJRU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPM2xDUVVNM1FpeEhRVUZITEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUzBGQlN5eERRVUZETzNsQ1FVTTFRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMWdzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4RlFVRkZMRU5CUVVNc2JVTkJRVzFETEVWQlFVVXNWVUZCVXl4SlFVRkpPMWxCUTJwRUxFOUJRVThzUTBGQlF5eFBRVUZITEVOQlFVTXNRMEZEVUN4UlFVRk5MRU5CUVVFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0cFFrRkROMElzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMGdzVVVGQlVTeERRVUZETERCQ1FVRXdRaXhGUVVGRk8xRkJRMnBETEZWQlFWVXNRMEZCUXl4VlFVRlZMRWxCUVVrN1dVRkRja0lzU1VGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4cFFrRkJTU3hEUVVGRE8yZENRVU5vUWl4SlFVRkpMRVZCUVVVc1ZVRkJWVHRuUWtGRGFFSXNTMEZCU3l4RlFVRkZMR2xDUVVGcFFqdG5Ra0ZEZUVJc1NVRkJTU3hGUVVGRkxFMUJRVTA3WjBKQlExb3NVVUZCVVN4RlFVRkZMRTFCUVUwN1lVRkRia0lzUTBGQlF5eERRVUZETzFsQlEwZ3NTVUZCU1N4WlFVRlpMRWRCUVVjc1NVRkJTU3hwUWtGQlNTeERRVUZETzJkQ1FVTjRRaXhKUVVGSkxFVkJRVVVzVFVGQlRUdG5Ra0ZEV2l4TFFVRkxMRVZCUVVVc2EwSkJRV3RDTzJkQ1FVTjZRaXhKUVVGSkxFVkJRVVVzVFVGQlRUdG5Ra0ZEV2l4UlFVRlJMRVZCUVVVc1ZVRkJWVHRuUWtGRGNFSXNUMEZCVHl4RlFVRkZMRWxCUVVrN1lVRkRhRUlzUTBGQlF5eERRVUZETzFsQlEwZ3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGRExFZEJRVkU3WjBKQlEyWXNTVUZCU1N4SFFVRkhPMjlDUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVNeFFpeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVVNc1IwRkJVVHR2UWtGRGRrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU5rTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUTA0c1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFVDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkRka01zVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0cFFrRkRVQ3hIUVVGSExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN2FVSkJRek5DTEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeExRVUZMTEVOQlFVTTdhVUpCUXpWQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN4clFrRkJhMElzUlVGQlJTeERRVUZETzJsQ1FVTnVReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEZWQlFVTXNSMEZCVVR0blFrRkRiRUlzU1VGQlNTeEhRVUZITzI5Q1FVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTXhRaXhwUWtGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRWRCUVZFc1JVRkJSU3hKUVVGWE8yOUNRVU0xUkN4SlFVRkpMRWRCUVVjN2QwSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN2IwSkJRekZDTEdGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzI5Q1FVTTNRaXhKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEV0N4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRTQ3hGUVVGRkxFTkJRVU1zY1VOQlFYRkRMRVZCUVVVc1ZVRkJVeXhKUVVGSk8xbEJRMjVFTEU5QlFVOHNRMEZCUXl4UFFVRkhMRU5CUVVNN2FVSkJRMUFzUjBGQlJ5eERRVUZETEhOQ1FVRnpRaXhEUVVGRE8ybENRVU16UWl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRPMmxDUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc2RVSkJRWFZDTEVWQlFVTXNRMEZCUXp0cFFrRkRka01zVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVNelFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXdyUWtGQkswSXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkROME1zVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0cFFrRkRVQ3hIUVVGSExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN2FVSkJRek5DTEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeExRVUZMTEVOQlFVTTdhVUpCUXpWQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeERRVUZETzJsQ1FVTnNReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NSVUZCUlN4RFFVRkRMRzlFUVVGdlJDeEZRVUZGTEZWQlFWTXNTVUZCU1R0WlFVTnNSU3hKUVVGSkxFbEJRVWtzUjBGQlZTeEpRVUZKTEdsQ1FVRkpMRU5CUVVNN1owSkJRM1pDTEVsQlFVa3NSVUZCUlN4TlFVRk5PMmRDUVVOYUxFdEJRVXNzUlVGQlJTeHhRa0ZCY1VJN1owSkJRelZDTEZGQlFWRXNSVUZCUlN4dFFrRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF6dG5Ra0ZET1VJc1NVRkJTU3hGUVVGRkxFMUJRVTA3WVVGRFppeERRVUZETEVOQlFVTTdXVUZEU0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVU1zUjBGQlVTeEZRVUZGTEVsQlFWYzdaMEpCUXpWQ0xFbEJRVWtzUjBGQlJ6dHZRa0ZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dG5Ra0ZGTVVJc1QwRkJUeXhEUVVGRExFOUJRVWNzUTBGQlF6dHhRa0ZEVUN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8zRkNRVU55UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzY1VKQlFYRkNMRVZCUVVVc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETzNGQ1FVTTFSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzNGQ1FVTllMRWRCUVVjc1EwRkJReXhWUVVGRExFZEJRVkVzUlVGQlJTeEhRVUZ4UWp0dlFrRkRha01zUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0dlFrRkRiRU1zVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0NVFrRkRVQ3hIUVVGSExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN2VVSkJRek5DTEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeExRVUZMTEVOQlFVTTdlVUpCUXpWQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRek5DTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFnc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFVDeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTklMRVZCUVVVc1EwRkJReXh0UTBGQmJVTXNSVUZCUlN4VlFVRlRMRWxCUVVrN1dVRkRha1FzVDBGQlR5eERRVUZETEU5QlFVY3NRMEZCUXp0cFFrRkRVQ3hIUVVGSExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN2FVSkJRek5DTEVsQlFVa3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4RFFVRkRPMmxDUVVOc1F5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRek5DTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRFVDeERRVUZETEVOQlFVTXNRMEZCUXlKOSJdLCJzb3VyY2VSb290IjoiIn0=