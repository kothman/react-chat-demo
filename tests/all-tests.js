!function(e){var t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(s,r,function(t){return e[t]}.bind(null,r));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){"use strict";t.__esModule=!0,t.ADD_ERROR="ADD_ERROR",t.REMOVE_ERROR="REMOVE_ERROR",t.CLEAR_ERRORS="CLEAR_ERRORS",t.ADD_INFO="ADD_INFO",t.REMOVE_INFO="REMOVE_INFO",t.CLEAR_INFOS="CLEAR_INFOS",t.addError=function(e){return{type:t.ADD_ERROR,data:e}},t.removeError=function(e){return{type:t.REMOVE_ERROR,data:e}},t.clearErrors=function(){return{type:t.CLEAR_ERRORS}},t.addInfo=function(e){return{type:t.ADD_INFO,data:e}},t.removeInfo=function(e){return{type:t.REMOVE_INFO,data:e}},t.clearInfos=function(){return{type:t.CLEAR_INFOS}}},function(e,t,n){e.exports={mongodbConnectionUri:process.env.MONGODB_URI,mongodbTestConnectionUri:"mongodb://localhost:27017/openChatTest",port:process.env.PORT||5e3,production:!0,useTestDb:process.env.USE_TEST_DB||!1,secret:process.env.SECRET||"secret",disableCsrf:process.env.DISABLE_CSRF||!1,disableReduxLogging:process.env.DISABLE_REDUX_LOGGING||!1,disableAutoStart:process.env.DISABLE_AUTO_START||!1,mailgunApiKey:process.env.MAILGUN_API_KEY,mailgunDomain:process.env.MAILGUN_DOMAIN,baseUrl:process.env.BASE_URL?process.env.BASE_URL:"http://localhost:5000"}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(3),r=new s.Schema({name:String,email:{required:!0,type:String,lowercase:!0},password:{type:String,required:!0},role:{type:String,required:!0,lowercase:!0,enum:["admin","user"]}},{timestamps:!0});r.statics.findByEmail=function(e){return this.findOne({email:e})};var a=s.model("User",r);t.default=a},function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("bcryptjs")},function(e,t){e.exports=require("axios")},function(e,t,n){"use strict";var s=this&&this.__awaiter||function(e,t,n,s){return new(n||(n=Promise))(function(r,a){function o(e){try{c(s.next(e))}catch(e){a(e)}}function i(e){try{c(s.throw(e))}catch(e){a(e)}}function c(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(o,i)}c((s=s.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){var n,s,r,a,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,s=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){o.label=a[1];break}if(6===a[0]&&o.label<r[1]){o.label=r[1],r=a;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(a);break}r[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}},a=this;t.__esModule=!0;var o=n(5),i=n(0);t.ADD_CHANNELS="ADD_CHANNELS",t.SET_CHANNEL_FETCHING_NEW_MESSAGES="SET_CHANNEL_FETCHING_NEW_MESSAGES",t.SET_CHANNEL_HAS_MORE_MESSAGES="SET_CHANNEL_HAS_MORE_MESSAGE",t.ADD_RECEIVED_CHANNEL_MESSAGE="ADD_RECEIVED_CHANNEL_MESSAGE",t.ADD_RETRIEVED_CHANNEL_MESSAGES="ADD_RETRIEVED_CHANNEL_MESSAGES",t.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET="INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET",t.RETRIEVE_CHANNEL_MESSAGES="RETRIEVE_CHANNEL_MESSAGES",t.CLEAR_CHANNELS_DATA="CLEAR_CHANNELS_DATA",t.addChannels=function(e){var n=[];return e.forEach(function(e){n.push({name:e,messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1})}),{type:t.ADD_CHANNELS,data:{channels:n}}},t.incrementChannelRetrieveMessagesOffset=function(e,n){return{type:t.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET,data:{channel:e,increment:n}}},t.setChannelFetchingNewMessages=function(e,n){return{type:t.SET_CHANNEL_FETCHING_NEW_MESSAGES,data:{channelName:e,isFetching:n}}},t.setChannelHasMoreMessages=function(e,n){return{type:t.SET_CHANNEL_HAS_MORE_MESSAGES,data:{channelName:e,hasMore:n}}},t.addReceivedChannelMessage=function(e,n){return{type:t.ADD_RECEIVED_CHANNEL_MESSAGE,data:{message:n,channelName:e}}},t.addRetrievedChannelMessages=function(e,n){return{type:t.ADD_RETRIEVED_CHANNEL_MESSAGES,data:{channelName:e,messages:n}}},t.clearChannelsData=function(){return{type:t.CLEAR_CHANNELS_DATA}},t.fetchChannels=function(){return function(e){return o.default.get("/api/v1/channels").then(function(n){var s=n.data.channels.map(function(e){return e.name});return e(t.addChannels(s))}).catch(function(t){return e(i.addError("Something went wrong while trying to fetch the channels"))})}},t.retrieveChannelMessages=function(e){return function(n,c){return s(a,void 0,void 0,function(){var s;return r(this,function(r){return(s=c().channels.find(function(t){return t.name===e}))&&!s.fetchingNewMessages&&s.hasMoreMessages?(n(t.setChannelFetchingNewMessages(s.name,!0)),[2,o.default.get("/api/v1/messages/"+s.name+"/"+s.retrieveMessagesOffset).then(function(r){if(0===r.data.messages.length)return n(t.setChannelHasMoreMessages(s.name,!1)),r;n(t.incrementChannelRetrieveMessagesOffset(e,r.data.messages.length)),n(t.addRetrievedChannelMessages(s.name,r.data.messages))}).catch(function(e){n(i.addError("Something went wrong while trying to fetch messages"))}).then(function(){return n(t.setChannelFetchingNewMessages(s.name,!1))})]):(n(i.addError("Something went wrong while trying to fetch messages")),[2,Promise.resolve("Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages")])})})}},t.deleteChannel=function(e){return function(n){return o.default.get("/api/v1/channel/delete/"+e).then(function(e){return n(i.addInfo("Channel deleted")),n(t.fetchChannels())}).catch(function(e){return n(i.addError(e.response.data.error))})}},t.addChannel=function(e){return function(n){return o.default.post("/api/v1/channel/create",{channelName:e}).then(function(e){return n(i.addInfo("Channel created")),n(t.fetchChannels())}).catch(function(e){return n(i.addError(e.response.data.error))})}}},function(e,t){e.exports=require("chai")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(5),r=n(6),a=n(0);t.SET_AUTHORIZED="SET_AUTHORIZED",t.SET_USER="SET_USER",t.LOGOUT_USER="LOGOUT_USER",t.SET_JWT="SET_JWT",t.setAuthorized=function(e){return{type:t.SET_AUTHORIZED,data:e}},t.setUser=function(e){return{type:t.SET_USER,data:e}},t.logoutUser=function(){return{type:t.LOGOUT_USER}},t.setJwt=function(e){return{type:t.SET_JWT,data:e}},t.logout=function(){return function(e){return e(t.logoutUser()),e(r.clearChannelsData())}},t.updateName=function(e,t){return function(n){return s.default.post("/api/v1/user/update/name",{name:e}).then(function(e){n(a.addInfo("Name updated")),t&&t()}).catch(function(e){if(e.response&&e.response.data.error)return n(a.addError(e.response.data.error));console.log("Something went wrong updating user name",e),n(a.addError("Something went wrong while trying to update your name."))})}},t.updateEmail=function(e,t){return function(n){return s.default.post("/api/v1/user/update/email",{email:e}).then(function(e){n(a.addInfo("Email updated")),t&&t()}).catch(function(e){if(e.response&&e.response.data.error)return n(a.addError(e.response.data.error));console.log("Something went wrong updating user email",e),n(a.addError("Something went wrong while trying to update your email."))})}},t.updatePassword=function(e,t,n){return function(r){return s.default.post("/api/v1/user/update/password",{oldPass:e,newPass:t}).then(function(e){r(a.addInfo("Password updated")),n&&n()}).catch(function(e){if(e.response&&e.response.data.error)return r(a.addError(e.response.data.error));console.log("Something went wrong updating user password",e),r(a.addError("Something went wrong while trying to update your password."))})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(17);t.INIT_WEBSOCKET="INIT_WEBSOCKET",t.SET_SOCKET_CONNECTED="SET_SOCKET_CONNECTED",t.SET_SOCKET_CONNECTED_USERS="SET_SOCKET_CONNECTED_USERS",t.initWebsocket=function(e){return{type:t.INIT_WEBSOCKET,data:{io:e}}},t.setSocketConnected=function(e){return{type:t.SET_SOCKET_CONNECTED,data:{connected:e}}},t.setSocketConnectedUsers=function(e){return{type:t.SET_SOCKET_CONNECTED_USERS,data:{userEmails:e}}},t.init=function(){return function(e,n){var r=s();return r.on("connect",function(){r.emit("authenticate",{token:n().user.token}).on("authenticated",function(){e(t.setSocketConnected(!0)),console.log("authorized ["+r.id+"]"),r.on("connected users",function(n){e(t.setSocketConnectedUsers(n))})}).on("unauthorized",function(n){throw e(t.setSocketConnected(!1)),console.log("unauthorized: "+JSON.stringify(n.data)),r.off("connected uses"),new Error(n.data.type)})}),r.on("disconnect",function(){e(t.setSocketConnected(!1)),console.log("Disconnected from websocket server, attempting reconnect")}),e(t.initWebsocket(r))}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(5),r=n(0);t.UPDATE_CHAT_USERS="UPDATE_CHAT_USERS",t.ADD_CHAT_USER="ADD_USER",t.REMOVE_CHAT_USER="REMOVE_USER",t.updateUsers=function(e){return{type:t.UPDATE_CHAT_USERS,data:{users:e}}},t.addUser=function(e){return{type:t.ADD_CHAT_USER,data:{user:e}}},t.removeUser=function(e){return{type:t.REMOVE_CHAT_USER,data:{email:e}}},t.fetchAllUsers=function(){return function(e){return s.default.get("/api/v1/users").then(function(n){var s={};return n.data.users.forEach(function(e){s[e.email]={role:e.role,name:e.name}}),e(t.updateUsers(s)),n}).catch(function(t){return e(r.addError("Fetching all users failed")),t})}},t.createNewUser=function(e){},t.editUser=function(e,t){},t.deleteUser=function(e){}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(21);t.app=s.app;var r=n(2),a=function(){return new Promise(function(e,t){r.default.deleteMany({},function(n){return n?t(n):e()})}).then().catch(function(e){console.error(e)})};t.dropAllCollections=a;var o=new Error("Test not implemented");t.NotImplementedError=o,before("all tests",function(e){console.log(process.version),s.conn.on("connected",function(){console.log("server started"),e()})}),beforeEach("reset DB",function(e){a().then(function(){return e()})}),after("all tests",function(e){a().then(function(){console.log("Closing connections"),s.conn.close(),e()})}),n(42),n(51),n(54),n(57),n(58),n(59)},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("jsonwebtoken")},function(e,t){e.exports=require("validator")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(3),r=new s.Schema({channel:{type:String,required:!0},text:{type:String,required:!0},userEmail:{type:String,required:!0,lowercase:!0}},{timestamps:!0}),a=s.model("Message",r);t.default=a},function(e,t){e.exports=require("mocha")},function(e,t){e.exports=require("socket.io-client")},function(e,t){e.exports=require("redux")},function(e,t){e.exports=require("redux-thunk")},function(e,t,n){"use strict";t.__esModule=!0,t.TOGGLE_SIDEBAR_OPEN="TOGGLE_SIDEBAR_OPEN",t.toggleSidebarOpen=function(){return{type:t.TOGGLE_SIDEBAR_OPEN}}},function(e,t,n){"use strict";(function(e){t.__esModule=!0;var s=n(22),r=n(23),a=n(12),o=n(3),i=n(24),c=n(25),u=n(26),d=n(27),l=n(4),f=n(28),h=n(29),p=n(13),m=n(30),g=n(31)(u),E=n(32),S=n(39),v=n(2),_=n(1),w=r();t.app=w;var C,M,A=_.port;t.socketServer=M,w.engine("html",m()),w.set("view engine","html"),w.use(h());var y=u({secret:_.secret,cookie:{maxAge:864e5,sameSite:!0,secure:_.production,httpOnly:!0},saveUninitialized:!0,resave:!1,store:new g({mongooseConnection:o.connection})}),N=i({cookie:{maxAge:864e5,sameSite:!0,secure:_.production,httpOnly:!0,key:"_csrf"}});o.connect(_.useTestDb?_.mongodbTestConnectionUri:_.mongodbConnectionUri,{useNewUrlParser:!0}),o.connection.on("error",function(e){console.error("Mongoose connection error",e)}),process.on("SIGINT",function(){o.connection.close(function(){console.log("Mongoose default connection disconnected through app termination"),process.exit(0)})}),w.use(y),w.use(c(_.secret)),_.disableCsrf?(console.log("CSRF disabled"),w.use(function(e,t,n){return e.csrfToken=function(){return""},n()})):w.use(N);var b=o.connection;w.use(function(e,t,n){return e.db=b,n()}),w.use(d.json()),w.use(d.urlencoded({extended:!0})),w.use(f()),w.use(r.static(a.resolve(e,"../../dist/public/"))),w.use("/api",function(e,t,n){return n()}),w.use(function(e,t,n){e.authenticate=function(e,t,n){v.default.findByEmail(e).then(function(e){if(null===e)return n(!1,null);if(!l.compareSync(t,e.password))return n(!1,new Error("Invalid password"));var s={email:e.email,name:e.name,role:e.role};return n(s,null)}).catch(function(e){n(!1,e)})},e.logout=function(){e.session.token=null},e.issueNewToken=function(n){var s=p.sign({name:n.name,role:n.role,email:n.email},_.secret,{expiresIn:86400});e.session.token=s,t.setHeader("x-access-token",s)},n()}),E.default(w),(C=s.createServer(w)).on("error",function(e){console.error(e),C.close()}),_.disableAutoStart||(t.socketServer=M=S.default(C,b),o.connection.on("connected",function(){console.log("Connected to MongoDB via Mongoose"),C.listen(A,function(){console.log("Listening on port "+A+"!"),w.emit("server started")})})),t.default=C,t.conn=o.connection}).call(this,"src/server")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("csurf")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("express-session")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("mustache-express")},function(e,t){e.exports=require("connect-mongo")},function(e,t,n){"use strict";(function(e){t.__esModule=!0;var s=n(12),r=n(33),a=n(34),o=n(35),i=n(36),c=n(37);t.default=function(t){t.get("/",function(t,n){return n.render(s.resolve(e,"../../dist/public/index.html"),{csrfToken:t.csrfToken()})}),t.get("/widget",function(t,n){return n.render(s.resolve(e,"../../../dist/public/widget/index.html"))}),t.get("/widget/demo",function(t,n){return n.render(s.resolve(e,"../../../dist/public/widget/demo.html"))}),t.post("/api/v1/login",a.default.login),t.post("/api/v1/register",a.default.register),t.get("/api/v1/logout",a.default.logout),t.get("/api/v1/verifyEmail/:id",a.default.verifyEmail),t.use("/api/v1/user",r.default),t.get("/api/v1/user",o.default.user),t.get("/api/v1/users",o.default.users),t.get("/api/v1/user/:user",o.default.userByEmail),t.post("/api/v1/user/update/email",o.default.updateEmail),t.post("/api/v1/user/update/name",o.default.updateName),t.post("/api/v1/user/update/password",o.default.updatePassword),t.post("/api/v1/user/reset_password",o.default.resetPassword),t.get("/api/v1/message*",r.default),t.get("/api/v1/messages/:channel/:offset",i.default.messages),t.use("/api/v1/channel",r.default),t.get("/api/v1/channels",c.default.channels),t.post("/api/v1/channels/delete",c.default.delete),t.post("/api/v1/channels/create",c.default.create),t.get("*",function(t,n){return n.render(s.resolve(e,"../../dist/public/index.html"),{csrfToken:t.csrfToken()})})}}).call(this,"src/server")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(13),r=n(1);t.default=function(e,t,n){e.session.token&&!e.headers["x-access-token"]&&t.setHeader("x-access-token",e.session.token);var a=e.headers["x-access-token"]||e.session.token;if(!a)return t.status(401).json({error:"Not authorized"});s.verify(a,r.secret,function(s,r){return s?t.status(401).send({error:"Not authorized"}):(e.user=r,n())})}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(14),r=n(4),a=n(2);n(1);t.default={login:function(e,t){return s.isEmpty(e.body.email||"")||s.isEmpty(e.body.password||"")?t.status(400).json({error:"Please supply an email and password"}).end():s.isEmail(e.body.email)?void e.authenticate(e.body.email,e.body.password,function(n){return n?(e.issueNewToken(n),t.status(200).json({success:!0,email:n.email,role:n.role,name:n.name}).end()):t.status(401).json({error:"Invalid email or password"}).end()}):t.status(400).json({error:"Not a valid email address"}).end()},register:function(e,t){return s.isEmpty(e.body.email||"")||s.isEmpty(e.body.password||"")?t.status(400).json({error:"Please supply an email and password"}):s.isEmail(e.body.email)?a.default.findByEmail(e.body.email).countDocuments().exec().then(function(n){if(0!==n)return t.status(400).json({error:"Email address in use"});var s=r.hashSync(e.body.password);a.default.countDocuments().exec().then(function(n){var r="user";0===n&&(r="admin"),new a.default({name:"",email:e.body.email,password:s,role:r,emailVerified:!1}).save().then(function(e){return t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to create a new user"})})})}):t.status(400).json({error:"Not a valid email address"})},logout:function(e,t){return e.logout(),t.json({success:!0,message:"logged out"})},verifyEmail:function(e,t){}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(14),r=n(2),a=n(4);t.default={user:function(e,t){t.send(e.user)},users:function(e,t){return r.default.find({}).then(function(e){return t.status(200).json({success:!0,users:e})}).catch(function(e){return console.error(e),t.status(200).json({error:"Something went wrong while retrieving users"})})},userByEmail:function(e,t){return s.isEmail(e.params.user)?r.default.findByEmail(e.params.user).exec().then(function(e){return null!==e?t.status(200).json({user:{email:e.email,_id:e._id,name:e.name||""}}):t.status(400).json({error:"No user found with that email"})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to find the user"})}):t.status(400).json({error:"Please supply a valid email"})},updateEmail:function(e,t){return s.isEmail(e.body.email)?r.default.countDocuments({email:e.body.email}).exec().then(function(n){return 0!==n?t.status(400).json({error:"Email address already in use"}):r.default.findByEmail(e.user.email).exec().then(function(n){return n.email=e.body.email,n.save(),e.issueNewToken(Object.assign({},e.user,{email:e.body.email})),t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to fetch the user"})})}):t.status(400).json({error:"Not a valid email"})},updateName:function(e,t){return r.default.findByEmail(e.user.email).exec().then(function(n){return n.name=e.body.name,n.save(),e.issueNewToken(Object.assign({},e.user,{name:e.body.name})),t.status(200).json({success:!0})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong trying to update the user"})})},updatePassword:function(e,t){return s.isEmpty(e.body.newPass)||s.isEmpty(e.body.oldPass)?t.status(400).json({error:"Must supply the current and new password"}):r.default.findByEmail(e.user.email).exec().then(function(n){return a.compareSync(e.body.oldPass,n.password)?(n.password=a.hashSync(e.body.newPass),n.save(),t.status(200).json({success:!0})):t.status(400).json({error:"Current password is incorrect"})})},resetPassword:function(e,t){return t.status(500).json({error:"Not implemented"})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(15);t.default={messages:function(e,t){return s.default.find({channel:e.params.channel}).skip(parseInt(e.params.offest)).sort({_id:-1}).limit(20).exec().then(function(e){return t.status(200).json({messages:e.map(function(e){return{text:e.text,created:e.createdAt,userEmail:e.userEmail,channel:e.channel,_id:e._id}}).reverse()})}).catch(function(e){return t.status(400).json({error:"something went wrong trying to fetch messages"})})}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(38);t.default={channels:function(e,t){return s.default.countDocuments().exec().then(function(e){return new Promise(function(t,n){if(0!==e)return t();s.default.create([{name:"general"},{name:"random"}]).then(function(){return t()}).catch(function(e){return n(e)})}).then(function(){s.default.find().exec().then(function(e){return t.status(200).json({channels:e})}).catch(function(e){return console.log(e),t.status(500).json({error:"Something went wrong while trying to fetch channels"})})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong while trying to create default channels"})})}).catch(function(e){return console.error(e),t.status(500).json({error:"Something went wrong while counting channels"})})},delete:function(e,t){},create:function(e,t){}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(3),r=new s.Schema({name:{type:String,required:!0,lowercase:!0}},{timestamps:!0}),a=s.model("Channel",r);t.default=a},function(e,t,n){"use strict";t.__esModule=!0;var s=n(40),r=n(41),a=n(15),o=n(1);t.default=function(e,t){var n=s(e),i=[];return n.on("connection",r.authorize({secret:o.secret,timeout:15e3,decodedPropertyName:"jwt"})).on("authenticated",function(e){i.push(e.jwt.email),console.log("Connected users",i),n.emit("connected users",i.filter(function(e,t,n){return n.indexOf(e)===t})),e.on("disconnect",function(){i.splice(i.indexOf(e.jwt.email),1),n.emit("connected users",i.filter(function(e,t,n){return n.indexOf(e)===t}))}),e.on("message",function(t){console.log(t),new a.default({channel:t.channel,text:t.text,userEmail:e.jwt.email}).save().then(function(t){n.emit("message",{_id:t._id,userEmail:t.userEmail,text:t.text,channel:t.channel,created:t.createdAt}),e.emit("message received")}).catch(function(t){console.error(t),e.emit("message receive error",t)})})}),n}},function(e,t){e.exports=require("socket.io")},function(e,t){e.exports=require("socketio-jwt")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(7);n(16);var r=n(17),a=n(43),o=n(18),i=n(8),c=n(6),u=n(0),d=n(20),l=n(9),f=n(10);function h(){return o.createStore(a.rootReducer,a.middleware)}describe("Store and Synchronous Actions",function(){describe("User State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().user}}),it("should not be authorized",function(){s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role)}),it("should be authorized after setAuthorized action",function(){s.assert.isFalse(t().authorized),e.dispatch(i.setAuthorized(!0)),s.assert.isTrue(t().authorized),e.dispatch(i.setAuthorized(!1)),s.assert.isFalse(t().authorized)}),it("should have user data after setting the user",function(){s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role),e.dispatch(i.setUser({authorized:!0,email:"test@test.com",name:"Jane Doe",role:"admin"})),s.assert.isTrue(t().authorized),s.assert.strictEqual(t().email,"test@test.com"),s.assert.strictEqual(t().name,"Jane Doe"),s.assert.strictEqual(t().role,"admin"),e.dispatch(i.setUser({authorized:!1,email:!1,name:!1,role:!1})),s.assert.isFalse(t().authorized),s.assert.isFalse(t().email),s.assert.isFalse(t().name),s.assert.isFalse(t().role)}),it("should not have user data after logging out",function(){e.dispatch(i.setUser({authorized:!0,email:"test@test.com",name:"Jane Doe",role:"admin"})),e.dispatch(i.logoutUser()),e.dispatch(i.setUser({authorized:!1,email:!1,name:!1,role:!1}))})}),describe("Channels State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().channels}}),it("should add channels from an array of channel names",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=t()[0],r=t()[1],a=t()[2];s.assert.deepStrictEqual(n,{name:"general",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1}),s.assert.deepStrictEqual(r,{name:"random",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1}),s.assert.deepStrictEqual(a,{name:"something else",messages:[],retrieveMessagesOffset:0,hasMoreMessages:!0,fetchingNewMessages:!1})}),it("should update fetchingNewMessages after calling setChannelFetchingNewMessages action",function(){e.dispatch(c.addChannels(["general","random","something else"])),t().forEach(function(t){s.assert.isFalse(t.fetchingNewMessages),e.dispatch(c.setChannelFetchingNewMessages(t.name,!0))}),t().forEach(function(t){s.assert.isTrue(t.fetchingNewMessages),e.dispatch(c.setChannelFetchingNewMessages(t.name,!1))}),t().forEach(function(e){s.assert.isFalse(e.fetchingNewMessages)})}),it("should increment the channel offset for retrieving new messages",function(){e.dispatch(c.addChannels(["general","random","something else"])),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,0),s.assert.strictEqual(t().find(function(e){return"random"===e.name}).retrieveMessagesOffset,0),s.assert.strictEqual(t().find(function(e){return"something else"===e.name}).retrieveMessagesOffset,0),e.dispatch(c.incrementChannelRetrieveMessagesOffset("general",20)),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,20),e.dispatch(c.incrementChannelRetrieveMessagesOffset("general",1)),s.assert.strictEqual(t().find(function(e){return"general"===e.name}).retrieveMessagesOffset,21),e.dispatch(c.incrementChannelRetrieveMessagesOffset("random",1)),s.assert.strictEqual(t().find(function(e){return"random"===e.name}).retrieveMessagesOffset,1),e.dispatch(c.incrementChannelRetrieveMessagesOffset("something else",1)),s.assert.strictEqual(t().find(function(e){return"something else"===e.name}).retrieveMessagesOffset,1)}),it("should update the hasMoreMessages property on a channel",function(){e.dispatch(c.addChannels(["general","random","something else"])),s.assert.isTrue(t().find(function(e){return"general"===e.name}).hasMoreMessages),s.assert.isTrue(t().find(function(e){return"random"===e.name}).hasMoreMessages),s.assert.isTrue(t().find(function(e){return"something else"===e.name}).hasMoreMessages),e.dispatch(c.setChannelHasMoreMessages("general",!1)),e.dispatch(c.setChannelHasMoreMessages("random",!1)),e.dispatch(c.setChannelHasMoreMessages("something else",!1)),s.assert.isFalse(t().find(function(e){return"general"===e.name}).hasMoreMessages),s.assert.isFalse(t().find(function(e){return"random"===e.name}).hasMoreMessages),s.assert.isFalse(t().find(function(e){return"something else"===e.name}).hasMoreMessages)}),it("should add a received message to the appropriate channel",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n={userEmail:"test@test.com",created:Date.now().toString(),_id:"1",text:"this is the message"};e.dispatch(c.addReceivedChannelMessage("general",n)),e.dispatch(c.addReceivedChannelMessage("random",n)),e.dispatch(c.addReceivedChannelMessage("random",n)),e.dispatch(c.addReceivedChannelMessage("something else",n)),e.dispatch(c.addReceivedChannelMessage("something else",n)),e.dispatch(c.addReceivedChannelMessage("something else",n));var r=t().find(function(e){return"general"===e.name}).messages;s.assert.deepStrictEqual(r.length,1),s.assert.deepStrictEqual(r,[n]);var a=t().find(function(e){return"random"===e.name}).messages;s.assert.deepStrictEqual(a.length,2),s.assert.deepStrictEqual(a,[n,n]);var o=t().find(function(e){return"something else"===e.name}).messages;s.assert.deepStrictEqual(o.length,3),s.assert.deepStrictEqual(o,[n,n,n])}),it("should add retreived messages to the appropriate channel",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=[{text:"Something here",created:"2019-04-13T16:45:28.946Z",userEmail:"abkothman@gmail.com",_id:"5cb212281d645a22abea8dbe"},{text:"12341234",created:"2019-04-14T22:34:06.686Z",userEmail:"abkothman@gmail.com",_id:"5cb3b55ecbf68c6a954eafb3"},{text:"test one two three",created:"2019-04-14T22:34:10.903Z",userEmail:"abkothman@gmail.com",_id:"5cb3b562cbf68c6a954eafb4"}];e.dispatch(c.addRetrievedChannelMessages("general",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.addRetrievedChannelMessages("random",n));var r=t();s.assert.deepStrictEqual(r.find(function(e){return"general"===e.name}).messages,n),s.assert.deepStrictEqual(r.find(function(e){return"random"===e.name}).messages,n.concat(n)),s.assert.deepStrictEqual(r.find(function(e){return"something else"===e.name}).messages,[])}),it("should clear all channel data",function(){e.dispatch(c.addChannels(["general","random","something else"]));var n=[{text:"Something here",created:"2019-04-13T16:45:28.946Z",userEmail:"abkothman@gmail.com",_id:"5cb212281d645a22abea8dbe"},{text:"12341234",created:"2019-04-14T22:34:06.686Z",userEmail:"abkothman@gmail.com",_id:"5cb3b55ecbf68c6a954eafb3"},{text:"test one two three",created:"2019-04-14T22:34:10.903Z",userEmail:"abkothman@gmail.com",_id:"5cb3b562cbf68c6a954eafb4"}];e.dispatch(c.addRetrievedChannelMessages("general",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.addRetrievedChannelMessages("random",n)),e.dispatch(c.clearChannelsData());var r=t();s.assert.deepStrictEqual(r,[])})}),describe("Notifications State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().notifications}}),it("should add errors",function(){s.assert.deepStrictEqual(t().errors,[]),e.dispatch(u.addError("Test error")),s.assert.deepStrictEqual(t().errors,["Test error"]),e.dispatch(u.addError("Another error")),s.assert.deepStrictEqual(t().errors,["Test error","Another error"])}),it("should remove errors given an index",function(){e.dispatch(u.addError("Test error")),e.dispatch(u.addError("Another error")),s.assert.deepStrictEqual(t().errors,["Test error","Another error"]),e.dispatch(u.removeError(1)),s.assert.deepStrictEqual(t().errors,["Test error"]),e.dispatch(u.removeError(0)),s.assert.deepStrictEqual(t().errors,[])}),it("should clear errors",function(){e.dispatch(u.addError("Test error")),e.dispatch(u.addError("Another error")),e.dispatch(u.clearErrors()),s.assert.deepStrictEqual(t().errors,[])}),it("should add info",function(){s.assert.deepStrictEqual(t().infos,[]),e.dispatch(u.addInfo("Test info")),s.assert.deepStrictEqual(t().infos,["Test info"]),e.dispatch(u.addInfo("Another info")),s.assert.deepStrictEqual(t().infos,["Test info","Another info"])}),it("should remove info given an index",function(){e.dispatch(u.addInfo("Test info")),e.dispatch(u.addInfo("Another info")),e.dispatch(u.removeInfo(1)),s.assert.deepStrictEqual(t().infos,["Test info"]),e.dispatch(u.removeInfo(0)),s.assert.deepStrictEqual(t().infos,[])}),it("should clear infos",function(){e.dispatch(u.addInfo("Test info")),e.dispatch(u.addInfo("Another info")),e.dispatch(u.clearInfos()),s.assert.deepStrictEqual(t().infos,[])})}),describe("Sidebar State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().sidebar}}),it("should toggle open state",function(){s.assert.isTrue(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isFalse(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isTrue(t().open),e.dispatch(d.toggleSidebarOpen()),s.assert.isFalse(t().open)})}),describe("Socket State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().socket}}),it("should set the socket given a SocketIOClient Socket",function(){s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:[]});var n=r();e.dispatch(l.initWebsocket(n)),s.assert.deepStrictEqual(t(),{io:n,connected:!1,connectedUserEmails:[]}),n.close()}),it("should update the connected state",function(){e.dispatch(l.setSocketConnected(!0)),s.assert.deepStrictEqual(t(),{io:null,connected:!0,connectedUserEmails:[]}),e.dispatch(l.setSocketConnected(!1)),s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:[]})}),it("should update the connected users",function(){var n=["test@test.com","test2@test.com"];e.dispatch(l.setSocketConnectedUsers(n)),s.assert.deepStrictEqual(t(),{io:null,connected:!1,connectedUserEmails:n})})}),describe("Chat Users State",function(){var e,t;beforeEach(function(){e=h(),t=function(){return e.getState().chatUsers}}),it("should update users",function(){var n={"test@test.com":{role:"user",name:"Test Name"},"test2@test.com":{role:"admin",name:"Another test"},"test3@test.com":{role:"admin",name:"Last test"}};e.dispatch(f.updateUsers(n)),s.assert.deepStrictEqual(t(),n)}),it("should add a user"),it("should remove a user")})})},function(e,t,n){"use strict";t.__esModule=!0;var s=n(18),r=n(19),a=n(44),o=n(45),i=n(46),c=n(47),u=n(48),d=n(49),l=n(50),f=n(1);t.rootReducer=s.combineReducers({user:o.default,channels:i.default,notifications:c.default,sidebar:u.default,socket:d.default,chatUsers:l.default}),t.middleware=f.production||f.disableReduxLogging?s.applyMiddleware(r.default):s.applyMiddleware(r.default,a.createLogger()),t.default=s.createStore(t.rootReducer,t.middleware)},function(e,t){e.exports=require("redux-logger")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(8),r={authorized:!1,email:!1,name:!1,role:!1,jwt:!1};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.SET_AUTHORIZED:return"boolean"!=typeof t.data?(console.error("Data must be boolean for SET_AUTHORIZED action"),e):!1===t.data?Object.assign({},e,{authorized:!1,email:!1}):Object.assign({},e,{authorized:t.data});case s.SET_USER:return Object.assign({},e,t.data);case s.LOGOUT_USER:return{authorized:!1,name:!1,email:!1,role:!1};case s.SET_JWT:return Object.assign({},e,{token:t.data});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(6),r=[];t.channelExists=function(e,t){var n=e.find(function(e){return e.name===t});return n||!1},t.default=function(e,n){switch(void 0===e&&(e=r),n.type){case s.ADD_CHANNELS:return n.data.channels;case s.INCREMENT_CHANNEL_RETRIEVE_MESSAGES_OFFSET:var a=t.channelExists(e,n.data.channel),o=n.data.increment;return a?e.map(function(e){return e.name===a.name&&(e.retrieveMessagesOffset+=o),e}):(console.log("Unknown channel while incrementing messages offset",n),e);case s.SET_CHANNEL_FETCHING_NEW_MESSAGES:return t.channelExists(e,n.data.channelName)?e.map(function(e){return e.name===n.data.channelName&&(e.fetchingNewMessages=n.data.isFetching),e}):(console.log("Unknown channel while fetching new messages",n),e);case s.SET_CHANNEL_HAS_MORE_MESSAGES:var i=t.channelExists(e,n.data.channelName),c=n.data.hasMore;return i?e.map(function(e){return e.name===n.data.channelName&&(e.hasMoreMessages=c),e}):(console.log("Unknown channel while setting hasMore messages",n),e);case s.ADD_RETRIEVED_CHANNEL_MESSAGES:var u=n.data.messages,d=n.data.channelName;return t.channelExists(e,d)?e.map(function(e){return e.name===d&&(e.messages=u.concat(e.messages)),e}):(console.log("Unknown channel while adding retrieved channel messages",n),e);case s.ADD_RECEIVED_CHANNEL_MESSAGE:var l=n.data.message,f=n.data.channelName;return t.channelExists(e,f)?e.map(function(e){return e.name===f&&(e.messages=e.messages.concat([l])),e}):(console.log("Unknown channel while adding received message",e,n),e);case s.CLEAR_CHANNELS_DATA:return[];default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(0),r={errors:[],infos:[]};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.ADD_ERROR:return Object.assign({},e,{errors:e.errors.concat([t.data])});case s.REMOVE_ERROR:var n=e.errors.slice();return n.splice(t.data,1),Object.assign({},e,{errors:n});case s.CLEAR_ERRORS:return Object.assign({},e,{errors:[]});case s.ADD_INFO:return Object.assign({},e,{infos:e.infos.concat([t.data])});case s.REMOVE_INFO:var a=e.infos.slice();return a.splice(t.data,1),Object.assign({},e,{infos:a});case s.CLEAR_INFOS:return Object.assign({},e,{infos:[]});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(20),r={open:!0};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.TOGGLE_SIDEBAR_OPEN:return Object.assign({},e,{open:!e.open});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(9),r={io:null,connected:!1,connectedUserEmails:[]};t.default=function(e,t){switch(void 0===e&&(e=r),t.type){case s.INIT_WEBSOCKET:return Object.assign({},e,{io:t.data.io});case s.SET_SOCKET_CONNECTED:return Object.assign({},e,{connected:t.data.connected});case s.SET_SOCKET_CONNECTED_USERS:return Object.assign({},e,{connectedUserEmails:t.data.userEmails});default:return e}}},function(e,t,n){"use strict";t.__esModule=!0;var s=n(10),r={};t.default=function(e,t){var n;switch(void 0===e&&(e=r),t.type){case s.UPDATE_CHAT_USERS:return t.data.users;case s.ADD_CHAT_USER:return Object.assign({},e,((n={})[t.data.user.email]={role:t.data.user.role,name:t.data.user.name},n));case s.REMOVE_CHAT_USER:delete Object.assign({},e)[t.data.email];default:return e}}},function(e,t,n){"use strict";t.__esModule=!0,n(16);var s=n(5),r=n(7),a=n(52),o=n(53),i=n(19),c=n(8),u=n(0),d=n(9),l=n(6),f=n(10),h=o.default([i.default]);function p(e){return void 0===e&&(e={}),h(e)}describe("Async Actions",function(){var e,t;before(function(){t=new a.default(s.default)}),after(function(){t.restore()}),describe("User async actions",function(){beforeEach(function(){e=p(),t.reset(),t.onAny().reply(200,{})}),it("should handle callback and set info on successful post request to /api/v1/user/update/name",function(t){var n=!1;e.dispatch(c.updateName("Adrian",function(){return n="Adrian"})).then(function(){r.assert.strictEqual(n,"Adrian");var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Name updated"}]),t()}).catch(t)}),it("should set an error on failed post request to /api/v1/user/update/name",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/name").reply(500,{error:"Something went wrong"}),e.dispatch(c.updateName("Adrian",function(){return s="Adrian"})).then(function(){r.assert.strictEqual(s,!1);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)}),it("should handle callback and set info on successful post request to /api/v1/user/update/email",function(t){var n=!1;e.dispatch(c.updateEmail("test@test.com",function(){return n="test@test.com"})).then(function(){r.assert.strictEqual(n,"test@test.com");var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Email updated"}]),t()}).catch(t)}),it("should set an error on failed post request to /api/v1/user/update/email",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/email").reply(500,{error:"Something went wrong"}),e.dispatch(c.updateEmail("test@test.com",function(){return s="test@test.com"})).then(function(){r.assert.isFalse(s);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)}),it("should set info on successful post request to /api/v1/user/update/password",function(t){var n=!1;e.dispatch(c.updatePassword("a","b",function(){return n=!0})).then(function(){r.assert.isTrue(n);var s=e.getActions();r.assert.deepStrictEqual(s,[{type:u.ADD_INFO,data:"Password updated"}]),t()}).catch(t)}),it("should set an error on failed post request to /api/v1/user/update/password",function(n){var s=!1;t.reset(),t.onPost("/api/v1/user/update/password").reply(500,{error:"Something went wrong"}),e.dispatch(c.updatePassword("a","b",function(){return s=!0})).then(function(){r.assert.isFalse(s);var t=e.getActions();r.assert.deepStrictEqual(t,[{type:u.ADD_ERROR,data:"Something went wrong"}]),n()}).catch(n)})}),describe("Channels async actions",function(){beforeEach(function(){e=h({channels:[{name:"general",fetchingNewMessages:!1,hasMoreMessages:!0,retrieveMessagesOffset:0},{name:"fetching new messages",fetchingNewMessages:!0,hasMoreMessages:!0},{name:"no more messages",fetchingNewMessages:!1,hasMoreMessages:!1}]}),t.reset(),t.onAny().reply(200,{})}),it("should fetch channels and dispatch addChannels with an array of channel names",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),e.dispatch(l.fetchChannels()).then(function(){var t=e.getActions(),s=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch addError on failed request to /api/v1/channels",function(n){t.reset(),t.onGet("/api/v1/channels").reply(500),e.dispatch(l.fetchChannels()).then(function(){var t=e.getActions(),s=u.addError("Something went wrong while trying to fetch the channels");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch an error if retrieving messages with invalid channel name",function(t){e.dispatch(l.retrieveChannelMessages("invalid name")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error if already retrieving channel messages",function(t){e.dispatch(l.retrieveChannelMessages("fetching new messages")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error if channel does not have older messages",function(t){e.dispatch(l.retrieveChannelMessages("no more messages")).then(function(n){r.assert.strictEqual(n,"Retrieve Channel Messages dispatched with incorrect channel name or while already fetching messages");var s=e.getActions(),a=u.addError("Something went wrong while trying to fetch messages");r.assert.deepStrictEqual(s,[a]),t()}).catch(t)}),it("should dispatch an error on failed get request to /api/v1/messages/",function(n){t.reset(),t.onGet().reply(500);e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),s=l.setChannelFetchingNewMessages("general",!0),a=u.addError("Something went wrong while trying to fetch messages"),o=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[s,a,o]),n()}).catch(n)}),it("should set channelHasMoreMessages on response with empty array",function(n){t.reset(),t.onGet().reply(200,{messages:[]});e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),s=l.setChannelFetchingNewMessages("general",!0),a=l.setChannelHasMoreMessages("general",!1),o=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[s,a,o]),n()}).catch(n)}),it("should increment offset (based on number of received messages) and add retrieved channel messages on successful retreiveChannelMessages action",function(n){var s=[{text:"123",created:Date.now().toString(),userEmail:"test@test.com",_id:"1"},{text:"456",created:Date.now().toString(),userEmail:"test@test.com",_id:"2"}];t.reset(),t.onGet().reply(200,{messages:s}),e.dispatch(l.retrieveChannelMessages("general")).then(function(){var t=e.getActions(),a=l.setChannelFetchingNewMessages("general",!0),o=l.incrementChannelRetrieveMessagesOffset("general",s.length),i=l.addRetrievedChannelMessages("general",s),c=l.setChannelFetchingNewMessages("general",!1);r.assert.deepStrictEqual(t,[a,o,i,c]),n()}).catch(n)}),it("should dispatch info on successfully deleting channel",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),t.onGet().reply(200),e.dispatch(l.deleteChannel("general")).then(function(){var t=e.getActions(),s=u.addInfo("Channel deleted"),a=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s,a]),n()}).catch(n)}),it("should dispatch an error on failed attempt to delete channel",function(n){t.reset(),t.onGet().reply(500,{error:"Something went wrong"}),e.dispatch(l.deleteChannel("general")).then(function(){var t=e.getActions(),s=u.addError("Something went wrong");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch info on creating new channel",function(n){t.reset(),t.onGet("/api/v1/channels").reply(200,{channels:[{_id:"1",name:"general"},{_id:"2",name:"random"},{_id:"3",name:"something else"}]}),t.onPost().reply(200),e.dispatch(l.addChannel("new channel")).then(function(){var t=e.getActions(),s=u.addInfo("Channel created"),a=l.addChannels(["general","random","something else"]);r.assert.deepStrictEqual(t,[s,a]),n()}).catch(n)}),it("should dispatch an error on failed attempt to create a new channel",function(n){t.reset(),t.onAny().reply(500,{error:"Something went wrong"}),e.dispatch(l.addChannel("new channel")).then(function(){var t=e.getActions(),s=u.addError("Something went wrong");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)})}),describe("Socket async actions",function(){beforeEach(function(){e=p()}),it("should initialize websocket connection",function(){e.dispatch(d.init());var t=e.getActions();r.assert.strictEqual(t[0].type,d.INIT_WEBSOCKET),t[0].data.io.close()})}),describe("Chat Users async actions",function(){beforeEach(function(){e=p()}),it("should dipatch updateUsers on fetch all users",function(n){var s=[{email:"test@test.com",role:"admin",name:"test"},{email:"test2@test.com",role:"general",name:"test"}],a={};s.forEach(function(e){a[e.email]={name:e.name,role:e.role}}),t.reset(),t.onAny().reply(200,{users:s}),e.dispatch(f.fetchAllUsers()).then(function(){var t=e.getActions(),s=f.updateUsers(a);r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should dispatch addError on failed attempt to fetch users",function(n){t.reset(),t.onAny().reply(500),e.dispatch(f.fetchAllUsers()).then(function(){var t=e.getActions(),s=u.addError("Fetching all users failed");r.assert.deepStrictEqual(t,[s]),n()}).catch(n)}),it("should create a new user"),it("should edit the user"),it("should delete the user")})})},function(e,t){e.exports=require("axios-mock-adapter")},function(e,t){e.exports=require("redux-mock-store")},function(e,t,n){"use strict";t.__esModule=!0;var s=n(55),r=n(4),a=n(11),o=n(2),i=n(7),c=n(56);describe("Auth Controller",function(){describe("login",function(){beforeEach(function(e){a.dropAllCollections().then(function(){new o.default({name:"Adrian",email:"test@test.com",password:r.hashSync("test"),role:"user"}).save().then(function(t){return e()}).catch(function(e){throw e})})}),it("should login the user",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test"}).expect(200).end(function(t){if(t)return e(t);e()})}),it("should return the logged-in user details",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.email,"test@test.com"),i.assert.strictEqual(s.role,"user"),i.assert.strictEqual(s.name,"Adrian"),e()})}),it("should return an error if the email does not exist",function(e){s(a.app).post("/api/v1/login").send({email:"test.does.not.exit@test.com",password:"test"}).expect(401).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Invalid email or password"),e()})}),it("should return an error if the password does not match the hash",function(e){s(a.app).post("/api/v1/login").send({email:"test@test.com",password:"test-invalid-password"}).expect(401).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Invalid email or password"),e()})}),it("should return an error if the email or password is missing",function(e){s(a.app).post("/api/v1/login").send({password:"test"}).expect(400).end(function(t,n){if(t)return e(t);var r=JSON.parse(n.text);i.assert.strictEqual(r.error,"Please supply an email and password"),s(a.app).post("/api/v1/login").send({email:"test@test.com"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Please supply an email and password"),e()})})}),it("should return an error if the email is not valid",function(e){s(a.app).post("/api/v1/login").send({email:"not an email@asdf",password:"1234"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Not a valid email address"),e()})})}),describe("register",function(){beforeEach(function(e){a.dropAllCollections().then(function(){return e()})}),it("should register a user",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){if(!t)return i.assert.fail(),e();e()}).catch(function(t){return e(t)})})}),it("should create an admin user if no users exist",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){t||i.assert.fail(),i.assert.strictEqual(t.role,"admin"),e()}).catch(function(t){return e(t)})})}),it("should create a regular user if users exist",function(e){new o.default({name:"test",email:"admin@test.com",password:"password",role:"admin"}).save().then(function(){s(a.app).post("/api/v1/register").send({email:"test@test.com",password:"test"}).expect(200).end(function(t,n){if(t)return e(t);o.default.findByEmail("test@test.com").exec().then(function(t){t||i.assert.fail(),i.assert.strictEqual(t.role,"user"),e()}).catch(function(t){return e(t)})})})}),it("should return an error if email or password not provided",function(e){s(a.app).post("/api/v1/register").send({email:"test@test.com"}).expect(400).end(function(t,n){if(t)return e(t);var r=JSON.parse(n.text);i.assert.strictEqual(r.error,"Please supply an email and password"),s(a.app).post("/api/v1/register").send({password:"123"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Please supply an email and password"),e()})})}),it("should return an error if not a valid email",function(e){s(a.app).post("/api/v1/register").send({email:"not an email @ asdlfkj;l",password:"1234"}).expect(400).end(function(t,n){if(t)return e(t);var s=JSON.parse(n.text);i.assert.strictEqual(s.error,"Not a valid email address"),e()})})}),describe("logout",function(){var e;beforeEach(function(t){e=c(a.app),a.dropAllCollections().then(function(){new o.default({name:"Adrian",email:"test@test.com",password:r.hashSync("test"),role:"user"}).save().then(function(e){return t()}).catch(function(e){throw e})})}),it("should log out the user",function(t){e.post("/api/v1/login").send({email:"test@test.com",password:"test"}).end(function(n){if(n)return t(n);e.get("/api/v1/user").send().expect(200).end(function(n){if(n)return t(n);e.get("/api/v1/logout").send().expect(200).end(function(n){if(n)return t(n);e.get("/api/v1/user").send().expect(401).end(t)})})})})}),describe("verify email",function(){beforeEach(function(e){a.dropAllCollections().then(function(){return e()})}),it("should verify an email given the correct verification link"),it("should not verify an email with an incorrect verification link")})})},function(e,t){e.exports=require("supertest")},function(e,t){e.exports=require("supertest-session")},function(e,t){},function(e,t){},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,