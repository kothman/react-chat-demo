{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"mongoose\"","webpack:///./env.js","webpack:///external \"bcryptjs\"","webpack:///./src/server/models/User.ts","webpack:///external \"path\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"validator\"","webpack:///./src/server/models/Message.ts","webpack:///./src/server/server.ts","webpack:///external \"http\"","webpack:///external \"express\"","webpack:///external \"csurf\"","webpack:///external \"cookie-parser\"","webpack:///external \"express-session\"","webpack:///external \"body-parser\"","webpack:///external \"helmet\"","webpack:///external \"compression\"","webpack:///external \"mustache-express\"","webpack:///external \"connect-mongo\"","webpack:///./src/server/routes.ts","webpack:///./src/server/middleware/authorized.ts","webpack:///./src/server/middleware/admin.ts","webpack:///./src/server/controllers/authController.ts","webpack:///./src/server/controllers/userController.ts","webpack:///./src/server/controllers/messageController.ts","webpack:///./src/server/controllers/channelController.ts","webpack:///./src/server/models/Channel.ts","webpack:///./src/server/socket.io/index.ts","webpack:///external \"socket.io\"","webpack:///external \"socketio-jwt\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","mongodbConnectionUri","process","env","MONGODB_URI","mongodbTestConnectionUri","MONGODB_TEST_URI","port","PORT","production","useTestDb","USE_TEST_DB","secret","SECRET","disableCsrf","DISABLE_CSRF","disableReduxLogging","DISABLE_REDUX_LOGGING","disableAutoStart","DISABLE_AUTO_START","mailgunApiKey","MAILGUN_API_KEY","mailgunDomain","MAILGUN_DOMAIN","baseUrl","BASE_URL","mongoose_1","userSchema","Schema","String","email","required","type","lowercase","password","role","enum","timestamps","statics","findByEmail","this","findOne","User","model","messageSchema","channel","text","userEmail","Message","http","express","path","mongoose","csrf","cookieParser","session","bodyParser","bcrypt","helmet","compression","jsonwebtoken_1","mustacheExpress","MongoStore","routes_1","index_1","User_1","app","server","socketServer","engine","set","use","sessionMiddleware","cookie","maxAge","sameSite","secure","httpOnly","saveUninitialized","resave","store","mongooseConnection","connection","csrfMiddleware","connect","useNewUrlParser","on","err","console","error","close","log","exit","req","res","next","csrfToken","db","json","urlencoded","extended","static","resolve","__dirname","authenticate","done","then","user","compareSync","Error","userDetails","logout","token","issueNewToken","sign","expiresIn","setHeader","createServer","listen","emit","conn","authorized_1","admin_1","authController_1","userController_1","messageController_1","channelController_1","render","post","login","register","verifyEmail","users","userByEmail","updateEmail","updateName","updatePassword","resetPassword","createUser","put","editUser","deleteUser","messages","channels","headers","status","verify","decoded","send","validator_1","bcryptjs_1","isEmpty","body","end","isEmail","success","countDocuments","exec","count","passwordHash","hashSync","emailVerified","save","u","message","find","select","params","_id","created","createdAt","assign","newPass","oldPass","Message_1","skip","parseInt","offest","sort","limit","map","reverse","Channel_1","Promise","reject","delete","channelSchema","Channel","socketio","socketio_jwt_1","io","connectedUserEmails","authorize","timeout","decodedPropertyName","socket","push","jwt","filter","index","self","indexOf","splice"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = require(\"mongoose\");","module.exports = {\n    // https://docs.mongodb.com/manual/reference/connection-string/\n    mongodbConnectionUri: process.env.MONGODB_URI,\n    mongodbTestConnectionUri: process.env.MONGODB_TEST_URI ||\n\t\t\t      'mongodb://localhost:27017/openChatTest',\n    port: process.env.PORT || 5000,\n    production: process.env.NODE_ENV === 'production' || false,\n    useTestDb: process.env.USE_TEST_DB || false,\n    secret: process.env.SECRET || 'secret',\n    disableCsrf: process.env.DISABLE_CSRF || false,\n    disableReduxLogging: process.env.DISABLE_REDUX_LOGGING || false,\n    disableAutoStart: process.env.DISABLE_AUTO_START || false,\n    mailgunApiKey: process.env.MAILGUN_API_KEY,\n    mailgunDomain: process.env.MAILGUN_DOMAIN,\n    baseUrl: process.env.BASE_URL ? process.env.BASE_URL : 'http://localhost:5000'\n}\n","module.exports = require(\"bcryptjs\");","import {Schema, Document, model, Model, Error, DocumentQuery} from 'mongoose';\nimport {toLower} from 'lodash';\n\nexport interface IUser extends Document {\n    name?: string,\n    email: string,\n    createdAt: Date,\n    updatedAt: Date,\n    password: string,\n    role: 'admin' | 'user',\n\n};\n\nexport interface IUserModel extends Model<IUser> {\n    findByEmail: (email: string) => DocumentQuery<IUser, IUser>\n}\n\nconst userSchema: Schema = new Schema({\n    name: String,\n    email: {\n        required: true,\n        type: String,\n        lowercase: true\n    },\n    password: {\n        type: String,\n        required: true\n    },\n    role: {\n        type: String,\n        required: true,\n        lowercase: true,\n        enum: ['admin', 'user']\n    },\n}, {\n    timestamps: true\n});\n\nuserSchema.statics.findByEmail = function (email: string): DocumentQuery<IUser, IUser> {\n    return this.findOne({email: email});\n}\n\nconst User: IUserModel = model<IUser, IUserModel>('User', userSchema);\nexport default User;","module.exports = require(\"path\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"validator\");","import {Schema, model, Document, Model} from 'mongoose';\n\nexport interface IMessage extends Document {\n    channel: string,\n    text: string,\n    userEmail: string,\n    createdAt: Date,\n    updatedAt: Date,\n}\n\nconst messageSchema: Schema = new Schema({\n    channel: {\n        type: String,\n        required: true,\n        // should validate to make sure channel already exists\n    },\n    text: {\n        type: String,\n        required: true,\n    },\n    userEmail: {\n        type: String,\n        required: true,\n        lowercase: true,\n        // should validate to confirm that user exists\n    }\n}, {\n    timestamps: true\n});\n\nconst Message: Model<IMessage> = model('Message', messageSchema);\nexport default Message;","//import Models from './models/index.ts';\n\nimport * as http from 'http';\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as socketio from 'socket.io';\nimport * as mongoose from 'mongoose';\nimport * as csrf from 'csurf';\nimport * as cookieParser from 'cookie-parser';\nimport * as session from 'express-session';\nimport * as bodyParser from 'body-parser';\nimport * as bcrypt from 'bcryptjs';\nimport * as helmet from 'helmet';\nimport * as morgan from 'morgan';\nimport * as compression from 'compression';\nimport { sign } from 'jsonwebtoken';\nconst mustacheExpress = require('mustache-express');\nconst MongoStore = require('connect-mongo')(session);\n\nimport Routes from './routes';\nimport websocket from './socket.io/index';\nimport { App, Request, Response } from '../types/express';\nimport User, { IUser } from './models/User';\nconst env = require('../../env');\n\nconst app: App = express();\nconst port: string | number = env.port;\nlet server: http.Server;\nlet socketServer: socketio.Server;\n\napp.engine('html', mustacheExpress());\napp.set('view engine', 'html');\n//app.use(morgan('combined'));\napp.use(compression());\n\nconst sessionMiddleware = session({\n    secret: env.secret,\n    cookie: {\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n        sameSite: true,\n        secure: env.production,\n        httpOnly: true\n    },\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n        mongooseConnection: mongoose.connection\n    })\n});\n\nconst csrfMiddleware = csrf({\n    cookie: {\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n        sameSite: true,\n        secure: env.production,\n        httpOnly: true,\n        key: '_csrf'\n    }\n})\n\nmongoose.connect(env.useTestDb ? env.mongodbTestConnectionUri : env.mongodbConnectionUri, { useNewUrlParser: true });\nmongoose.connection.on('error', function(err) {\n    console.error('Mongoose connection error', err);\n});\nprocess.on('SIGINT', function () {\n    mongoose.connection.close(function () {\n        console.log('Mongoose default connection disconnected through app termination');\n        process.exit(0);\n    });\n}); \n\napp.use(sessionMiddleware);\napp.use(cookieParser(env.secret));\n\nif(env.disableCsrf) {\n    console.log('CSRF disabled');\n    app.use((req, res, next) => { \n        req.csrfToken = function () { return '' }\n        return next();\n    });\n} else {\n    app.use(csrfMiddleware);\n}\n// add DB to every express request\nlet db: mongoose.Connection = mongoose.connection;\napp.use((req: Request, res: Response, next: Function) => {\n    req.db = db;\n    return next();\n})\napp.use(bodyParser.json()); // support json encoded bodies\napp.use(bodyParser.urlencoded({ extended: true }));\n//app.use(cors());\n\n\napp.use(helmet());\n/* Serve static files from dist/public */\napp.use(express.static(path.resolve(__dirname, '../../dist/public/')));\n\napp.use('/api', function (req: Request, res: Response, next: Function) {\n    //res.setHeader('new-csrf-token', req.csrfToken())\n    return next();\n});\napp.use((req: Request, res: Response, next: Function) => {\n    req.authenticate = (email: string,\n                        password: string,\n                        done: (user: boolean | IUser, err: (null | Error)) => void) => {\n        User.findByEmail(email).then((user: IUser) => {\n            if (user === null) return done(false, null);\n            if (!bcrypt.compareSync(password, user.password)) return done(false, new Error('Invalid password'));\n            let userDetails: any = {\n                email: user.email,\n                name: user.name,\n                role: user.role,\n            }\n            return done(userDetails, null);\n        }).catch((err: Error) => {\n            done(false, err);\n        });\n    }\n    req.logout = () => {\n        req.session.token = null;\n    }\n    req.issueNewToken = (user: IUser) => {\n        let token: string = sign({\n            name: user.name,\n            role: user.role,\n            email: user.email\n        }, env.secret, {\n            expiresIn: 86400 // expires in 24 hours\n        });\n        res.setHeader('x-access-token', token);\n        req.session.token = token;\n    }\n    next();\n});\n\nRoutes(app);\nserver = http.createServer(app);\nserver.on('error', (err: Error) => {\n    console.error(err);\n    server.close();\n})\n\nif (!env.disableAutoStart) {\n    socketServer = websocket(server, db);\n    mongoose.connection.on('connected', function () {\n        console.log('Connected to MongoDB via Mongoose');\n        server.listen(port, () => {\n            console.log(`Listening on port ${port}!`);\n            app.emit('server started');\n        });\n    });\n}\n\nexport default server;\nexport const conn = mongoose.connection;\nexport { app, socketServer };","module.exports = require(\"http\");","module.exports = require(\"express\");","module.exports = require(\"csurf\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"express-session\");","module.exports = require(\"body-parser\");","module.exports = require(\"helmet\");","module.exports = require(\"compression\");","module.exports = require(\"mustache-express\");","module.exports = require(\"connect-mongo\");","import * as path from 'path';\nimport { App, Request, Response } from '../types/express';\nimport authorized from './middleware/authorized';\nimport admin from './middleware/admin';\nimport authController from './controllers/authController';\nimport userController from './controllers/userController';\nimport messageController from './controllers/messageController';\nimport channelController from './controllers/channelController';\n\nexport default function(app: App) {\n\n    /* Static Routes */\n    app.get('/', function (req: Request, res: Response) {\n        return res.render(\n            path.resolve(__dirname, '../../dist/public/index.html'),\n            { csrfToken: req.csrfToken() }\n        );\n    });\n    /* Widget rendered inside iframe via widget-embed script */\n    app.get('/widget', function (req: any, res: any) {\n        return res.render(\n            path.resolve(__dirname, '../../../dist/public/widget/index.html')\n        );\n    });\n    /* Page demoing embedded widget */\n    app.get('/widget/demo', function (req: any, res: any) {\n        return res.render(\n            path.resolve(__dirname, '../../../dist/public/widget/demo.html')\n        );\n    });\n    \n    /* API Routes */\n    \n    app.post('/api/v1/login', authController.login);\n    app.post('/api/v1/register', authController.register);\n    app.get('/api/v1/logout', authController.logout);\n    app.get('/api/v1/verifyEmail/:id', authController.verifyEmail);\n\n    app.use('/api/v1/user*', authorized);\n    app.get('/api/v1/user', userController.user);\n    app.get('/api/v1/users', userController.users)\n    app.get('/api/v1/user/:user', userController.userByEmail);\n    app.post('/api/v1/user/update/email', userController.updateEmail);\n    app.post('/api/v1/user/update/name', userController.updateName);\n    app.post('/api/v1/user/update/password', userController.updatePassword);\n    app.post('/api/v1/user/reset_password', userController.resetPassword);\n    app.post('/api/v1/user/create', admin, userController.createUser);\n    app.put('/api/v1/user/update', admin, userController.editUser);\n    app.post('/api/v1/user/delete', admin, userController.deleteUser);\n\n    app.use('/api/v1/message*', authorized);\n    app.get('/api/v1/messages/:channel/:offset', messageController.messages);\n\n    app.use('/api/v1/channel', authorized);\n    app.get('/api/v1/channels', channelController.channels);\n    app.post('/api/v1/channels/delete', admin, channelController.delete);\n    app.post('/api/v1/channels/create', admin, channelController.create);\n\n    /* Display index.html if unknown path, and let React-Router handle the 404 */\n    app.get('*', function (req: Request, res: Response) {\n        return res.render(\n            path.resolve(__dirname, '../../dist/public/index.html'),\n            { csrfToken: req.csrfToken() }\n        );\n    });\n}","import { verify } from 'jsonwebtoken';\nimport { Token } from '../../types/jwt';\nimport { Request, Response } from '../../types/express';\nconst env = require('../../../env');\nexport default function(req: Request, res: Response, next: Function) {\n    var token = req.session.token || req.headers['x-access-token'];\n    if (!token)\n        return res.status(401).json({ error: 'Not authorized' });\n\n    verify(token, env.secret, (err: Error, decoded: Token) => {\n        if (err) return res.status(401).send({ error: 'Not authorized' });\n        req.user = decoded;\n        return next();\n    });    \n}","export default function(req: any, res: any, next: Function) {\n    if (req.user && req.user.role === 'admin') {\n        return next();\n    }\n    return res.status(401).json({ error: 'Not authorized as admin' });\n}","import { isEmail, isEmpty } from 'validator';\nimport { hashSync } from 'bcryptjs';\nimport {Request, Response} from '../../types/express';\nimport User, { IUser } from '../models/User';\nconst env = require('../../../env');\n\nexport default {\n    login: (req: Request, res: Response) => {\n        if (isEmpty(req.body.email || '') || isEmpty(req.body.password || '')) {\n            return res.status(400).json({ error: 'Please supply an email and password' }).end();\n        }\n        if (!isEmail(req.body.email)) {\n            return res.status(400).json({ error: 'Not a valid email address' }).end();\n        }\n        req.authenticate(req.body.email, req.body.password, (user: any | boolean) => {\n            if (!user)\n                return res.status(401).json({ error: 'Invalid email or password' }).end();\n            req.issueNewToken(user);\n            return res.status(200)\n                .json({\n                    success: true,\n                    email: user.email,\n                    role: user.role,\n                    name: user.name}).end();\n        });\n    },\n    register: (req: Request, res: Response) => {\n        if (isEmpty(req.body.email || '') || isEmpty(req.body.password || '')) {\n            return res.status(400).json({ error: 'Please supply an email and password' });\n        }\n        if (!isEmail(req.body.email)) {\n            return res.status(400).json({ error: 'Not a valid email address' });\n        }\n        return User.findByEmail(req.body.email).countDocuments().exec().then((count: number) => {\n            if (count !== 0)\n                return res.status(400).json({error: 'Email address in use'});\n            let passwordHash = hashSync(req.body.password);\n            // If this is the first user being created, asign role of admin\n            User.countDocuments().exec().then((count: number) => {\n                let role = 'user';\n                if (count === 0)\n                    role = 'admin';\n                let user = new User({\n                    name: '',\n                    email: req.body.email,\n                    password: passwordHash,\n                    role: role,\n                    emailVerified: false,\n                });\n                user.save().then((u: IUser) => {\n                    return res.status(200).json({success: true});\n                }).catch((err: Error) => {\n                    console.error(err);\n                    return res.status(500).json({error: 'Something went wrong trying to create a new user'});\n                });\n            })\n        });\n\n    },\n    logout: (req: Request, res: Response) => {\n        req.logout();\n        return res.json({success: true, message: 'logged out'});\n    },\n    verifyEmail: (req: Request, res: Response) => {\n    }\n}","import {isEmail, isEmpty} from 'validator';\nimport { Request, Response } from '../../types/express';\nimport User, { IUser, IUserModel } from '../models/User';\nimport {compareSync, hashSync} from 'bcryptjs';\n\nexport default {\n    user: (req: Request, res: Response) => {\n        res.send(req.user);\n    },\n    users: (req: Request, res: Response) => {\n        return User.find({}).select('name email role').then((users: IUser[]) => {\n            return res.status(200).json({success: true, users: users});\n        }).catch((err: Error) => {\n            console.error(err);\n            return res.status(500).json({error: 'Something went wrong while retrieving users'});\n        })\n    },\n    userByEmail: (req: Request, res: Response) => {\n        if(!isEmail(req.params.user))\n            return res.status(400).json({error: 'Please supply a valid email'});\n\n        return User.findByEmail(req.params.user).exec().then((user: IUser) => {\n            if (user !== null) {\n                return res.status(200).json({\n                    user: {\n                        email: user.email,\n                        _id: user._id,\n                        name: user.name || '',\n                        role: user.role,\n                        created: user.createdAt\n                    }\n                });\n            }\n            return res.status(400).json({error: 'No user found with that email'});\n            \n        }).catch((err: Error) => {\n            console.error(err);\n            return res.status(500).json({error: 'Something went wrong trying to find the user'});\n        });\n    },\n    updateEmail: (req: Request, res: Response) => {\n        if(!isEmail(req.body.email))\n            return res.status(400).json({ error: 'Not a valid email' });\n        return User.countDocuments({email: req.body.email}).exec().then((count: number) => {\n            if (count !== 0)\n                return res.status(400).json({ error: 'Email address already in use' });\n            return User.findByEmail(req.user.email).exec().then((user: IUser) => {\n                user.email = req.body.email;\n                user.save();\n                req.issueNewToken(Object.assign({}, req.user, {email: req.body.email}));\n                return res.status(200).json({ success: true });\n            }).catch((err: Error) => {\n                console.error(err);\n                return res.status(500).json({ error: 'Something went wrong trying to fetch the user' });\n            });\n        });\n    },\n    updateName: (req: Request, res: Response) => {\n        return User.findByEmail(req.user.email)\n            .exec().then((user: IUser) => {\n                user.name = req.body.name;\n                user.save();\n                req.issueNewToken(Object.assign({}, req.user, { name: req.body.name }));\n                return res.status(200).json({success: true});\n            }).catch((err: Error) => {\n                console.error(err);\n                return res.status(500).json({error: 'Something went wrong trying to update the user'});\n        });\n    },\n    updatePassword: (req: Request, res: Response) => {\n        if (isEmpty(req.body.newPass) || isEmpty(req.body.oldPass))\n            return res.status(400).json({ error: 'Must supply the current and new password' });\n        return User.findByEmail(req.user.email).exec().then((user: IUser) => {\n            if (!compareSync(req.body.oldPass, user.password))\n                return res.status(400).json({error: 'Current password is incorrect'});\n            user.password = hashSync(req.body.newPass);\n            user.save();\n            return res.status(200).json({success: true});\n        })\n    },\n    resetPassword: (req: Request, res: Response) => {\n        return res.status(500).json({error: 'Not implemented'});\n    },\n    /**\n     * POST /api/v1/user/create\n     * req.body.email: string\n     * req.body.name?: string,\n     * req.body.role: string\n     */\n    createUser: (req: Request, res: Response) => {\n        if(isEmpty(req.body.email) || !isEmail(req.body.email) ||\n           isEmpty(req.body.role) || (req.body.role !== 'user' && req.body.role !== 'admin'))\n            return res.status(400).json({ error: 'Must supply valid email and role'});\n        return User.findByEmail(req.body.email).countDocuments((err: any, c: number) => {\n            if (err) {\n                console.error('Something went wrong trying to count users with email ' + req.body.email, err);\n                return res.status(500).json({error: 'Something went wrong'});\n            }\n            if (c !== 0)\n                return res.status(400).json({error: 'Email address in use'});\n            let u = new User({\n                email: req.body.email,\n                name: req.body.name || '',\n                role: req.body.role,\n                // @todo send password reset link to new user\n                password: 'temp',\n            })\n            return u.save((err: any, u: IUser) => {\n                if (err) {\n                    console.error('Something went wrong trying to save user', err);\n                    return res.status(500).json({ error: 'Something went wrong' });\n                }\n                return res.status(200).json({success: true});\n            });\n\n        })\n    },\n    /**\n     * PUT /api/v1/user/update\n     * @param req.body.email: string\n     * @param req.body.user: {\n     *  email?: string,\n     *  name?: string,\n     *  role?: string,\n     * }\n     */\n    editUser: (req: Request, res: Response) => {\n        if (!req.body.email || !isEmail(req.body.email))\n            return res.status(400).json({error: 'Please supply a valid email'});\n        if (req.body.user.email && !isEmail(req.body.user.email))\n            return res.status(400).json({ error: 'Please supply a valid email' });\n        if (req.body.user.role && !isEmpty(req.body.user.role) && (req.body.user.role !== 'user' && req.body.user.role !== 'admin'))\n            return res.status(400).json({error: 'Invalid role'});\n        return User.findByEmail(req.body.email).exec((err: any, user: IUser) => {\n            if (err) {\n                console.log('Something went wrong', err);\n                return res.status(500).json({error: 'Something went wrong'});\n            }\n            if (!user) {\n                return res.status(404).json({error: 'User does not exist'});\n            }\n            if (req.body.user.email)\n                user.email = req.body.user.email;\n            if (req.body.user.name)\n                user.name = req.body.user.name;\n            if (req.body.user.role)\n                user.role = req.body.user.role;\n            return user.save((err: any, user: IUser) => {\n                if (err) {\n                    console.log(err);\n                    return res.status(500).json({error: 'Something went wrong'});\n                }\n                return res.status(200).json({success: true});\n            });\n        });\n    },\n    deleteUser: (req: Request, res: Response) => {\n\n    }\n}","import {Request, Response} from '../../types/express';\nimport Message, {IMessage} from '../models/Message';\nexport default {\n    messages: (req: Request, res: Response) => {\n        return Message.find({channel: req.params.channel})\n            .skip(parseInt(req.params.offest))\n            .sort({_id: -1})\n            .limit(20)\n            .exec().then((messages: IMessage[]) => {\n                return res.status(200).json({\n                     messages: messages.map((m: IMessage) => {\n                        return {\n                            text: m.text,\n                            created: m.createdAt,\n                            userEmail: m.userEmail,\n                            channel: m.channel,\n                            _id: m._id\n                        };\n                     }).reverse()\n                 })\n        }).catch((err: Error) => {\n            return res.status(400).json({ error: 'something went wrong trying to fetch messages' });\n        })\n    }\n}","import {Request, Response} from '../../types/express';\nimport Channel, {IChannel} from '../models/Channel';\n\nexport default {\n    channels: (req: Request, res: Response) => {\n        // If no channels exist, create a 'general' and 'random' channel\n        return Channel.countDocuments().exec().then((count: number) => {\n            let p = new Promise((resolve, reject) => {\n                if (count !== 0) {\n                    return resolve();\n                }\n                Channel.create([{name: 'general'}, {name: 'random'}]).then(() => {\n                    return resolve();\n                }).catch((err: Error) => {\n                    return reject(err);\n                });\n            });\n            return p.then(() => {\n                Channel.find().exec().then((channels: IChannel[]) => {\n                    return res.status(200).json({channels: channels});\n                }).catch((err: Error) => {\n                    console.log(err);\n                    return res.status(500).json({ error: 'Something went wrong while trying to fetch channels' });\n                });\n            }).catch((err: Error) => {\n                console.error(err);\n                return res.status(500).json({error: 'Something went wrong while trying to create default channels'});\n            });\n        }).catch((err: Error) => {\n            console.error(err);\n            return res.status(500).json({error: 'Something went wrong while counting channels'});\n        });\n    },\n    delete: (req: Request, res: Response) => {\n        \n    },\n    create: (req: Request, res: Response) => {\n\n    }\n}","import {Schema, Document, Model, model} from 'mongoose';\n\nexport interface IChannel extends Document {\n    name: string,\n    createdAt: Date,\n    updatedAt: Date,\n}\n\nconst channelSchema: Schema = new Schema({\n    name: {\n        type: String,\n        required: true,\n        lowercase: true,\n    },\n}, {\n    timestamps: true\n});\n\nconst Channel: Model<IChannel> = model('Channel', channelSchema);\nexport default Channel;","import * as socketio from 'socket.io';\nimport { Server } from 'http';\nimport { Connection } from 'mongoose';\nimport {authorize as authorizeJwt} from 'socketio-jwt';\nimport Message, { IMessage } from '../models/Message';\nimport { Token } from '../../types/jwt';\nconst env = require('../../../env');\n\ninterface Socket extends socketio.Socket {\n    jwt: Token\n} \n\nconst init = (server: Server, db: Connection): socketio.Server => {\n    const io: socketio.Server = socketio(server);\n    let connectedUserEmails: string[] = [];\n\n    // set authorization for socket.io\n    io.on('connection', authorizeJwt({\n            secret: env.secret,\n            timeout: 15000, // 15 seconds to send the authentication message\n            decodedPropertyName: 'jwt'\n        })).on('authenticated', (socket: Socket) => {\n\n            connectedUserEmails.push(socket.jwt.email);\n            console.log('Connected users', connectedUserEmails);\n            io.emit('connected users', connectedUserEmails.filter((value, index, self) => {\n                return self.indexOf(value) === index;\n            }));\n\n            socket.on('disconnect', () => {\n                connectedUserEmails.splice(connectedUserEmails.indexOf(socket.jwt.email), 1);\n                io.emit('connected users', connectedUserEmails.filter((value, index, self) => {\n                    return self.indexOf(value) === index;\n                }));\n            });\n\n            socket.on('message', (message: { text: string, channel: string }) => {\n                console.log(message);\n                let m: IMessage = new Message({\n                    channel: message.channel,\n                    text: message.text,\n                    userEmail: socket.jwt.email\n                });\n                m.save().then((m: IMessage) => {\n                    io.emit('message', {\n                        _id: m._id,\n                        userEmail: m.userEmail,\n                        text: m.text,\n                        channel: m.channel,\n                        created: m.createdAt\n                    });\n                    socket.emit('message received');\n                }).catch((err: Error) => {\n                    console.error(err);\n                    socket.emit('message receive error', err);\n                });\n            });\n        });\n    return io;\n}\n\nexport default init;","module.exports = require(\"socket.io\");","module.exports = require(\"socketio-jwt\");"],"sourceRoot":""}