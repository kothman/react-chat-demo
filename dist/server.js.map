{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"mongodb\"","webpack:///external \"bcryptjs\"","webpack:///external \"validator\"","webpack:///./src/server/middleware/authorized.ts","webpack:///external \"path\"","webpack:///./src/server/server.ts","webpack:///external \"http\"","webpack:///external \"express\"","webpack:///external \"express-session\"","webpack:///external \"body-parser\"","webpack:///external \"csurf\"","webpack:///external \"helmet\"","webpack:///external \"connect-mongo\"","webpack:///external \"mustache-express\"","webpack:///./src/server/routes/index.ts","webpack:///./src/server/routes/api/index.ts","webpack:///./src/server/routes/api/users.ts","webpack:///./src/server/routes/api/messages.ts","webpack:///./src/server/routes/api/channels.ts","webpack:///./src/server/middleware/admin.ts","webpack:///external \"shortid\"","webpack:///./src/server/routes/widget.ts","webpack:///./src/server/socket.io/index.ts","webpack:///external \"socket.io\"","webpack:///./env.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","req","res","next","session","user","status","json","error","http","express","path","mongodb_1","bodyParser","bcrypt","csurf","helmet","MongoStore","mustacheExpress","index_1","index_2","env","app","port","process","PORT","csurfMiddleware","engine","set","MongoClient","connect","mongodbConnectionUri","useNewUrlParser","err","client","console","db","use","sessionMiddleware","secret","saveUninitialized","resave","cookie","secure","store","collection","urlencoded","extended","authenticate","username","password","done","findOne","email","then","compareSync","userDetails","role","logout","render","resolve","__dirname","csrfToken","static","server","createServer","listen","log","widget_1","validator","users_1","messages_1","channels_1","shortid_1","post","isEmpty","body","isEmail","success","passwordHash","hashSync","users","countDocuments","count","insertOne","shortId","generate","domain","emailVerified","findOneAndUpdate","verifyKey","$set","result","message","authorized_1","send","usersColl","find","forEach","userDoc","push","params","_id","updateOne","newPass","oldPass","channel","skip","parseInt","offset","sort","limit","toArray","messages","msgArray","map","objID","ObjectID","created","getTimestamp","reverse","admin_1","e","coll","Promise","insertMany","arr","channels","reject","deleteOne","channelName","socketio","io","connectedUserEmails","socket","request","Error","on","emit","filter","index","self","indexOf","splice","text","userEmail","insertedId","MONGODB_URI","mailgunApiKey","MAILGUN_API_KEY","mailgunDomain","MAILGUN_DOMAIN","baseUrl","BASE_URL"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"mongodb\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"validator\");","export default function(req: any, res: any, next: Function) {\n    if (req.session.user) {\n        return next();\n    }\n    return res.status(401).json({ error: 'Not authorized' });\n}","module.exports = require(\"path\");","//import Models from './models/index.ts';\n\nimport * as http from 'http';\nimport * as express from 'express';\nimport * as session from 'express-session';\nimport * as path from 'path';\nimport { MongoClient, Db, Collection } from 'mongodb';\nimport * as bodyParser from 'body-parser';\nimport * as bcrypt from 'bcryptjs';\nimport * as csurf from 'csurf';\nimport * as helmet from 'helmet';\nconst MongoStore = require('connect-mongo')(session);\nconst mustacheExpress = require('mustache-express');\n\nimport Routes from './routes/index';\nimport websocket from './socket.io/index';\nimport { App, Request, Response } from '../types/express';\nconst env = require('../../env');\n\nconst app: App = express();\nconst port: string | number = process.env.PORT || 3000;\nconst csurfMiddleware: express.RequestHandler = csurf();\n\napp.engine('html', mustacheExpress());\napp.set('view engine', 'html');\n\nMongoClient.connect(env.mongodbConnectionUri, {useNewUrlParser: true}, function(err: Error, client: MongoClient) {\n    if (err) return console.error(err);\n    let db: Db = client.db();\n    // add DB to each req via middleware\n    app.use((req: Request, res: Response, next: Function) => {\n        req.db = db;\n        return next();\n    });\n    const sessionMiddleware = session({\n        secret: 'some secret',\n        saveUninitialized: true,\n        resave: false,\n        cookie: {\n            secure: false\n        },\n        store: new MongoStore({ db: db, collection: 'session' })\n    });\n\n    app.use(bodyParser.json()); // support json encoded bodies\n    app.use(bodyParser.urlencoded({ extended: true }));\n    //app.use(cors());\n    app.use(sessionMiddleware);\n    app.use(csurfMiddleware);\n    app.use(helmet());\n    // Setup local strategy for passport authentication\n    app.use((req: Request, res: Response, next: Function) => {\n        req.authenticate = (username: string, password: string, done: Function) => {\n            let users: Collection = db.collection('users');\n            users.findOne({ email: username }).then((user) => {\n                if (user === null || !bcrypt.compareSync(password, user.password)) {\n                    return done(false);\n                }\n                let userDetails: any = {\n                    email: user.email,\n                    name: user.name,\n                    role: user.role\n                };\n                req.session.user = userDetails;\n                return done(userDetails);\n            });\n        }\n        req.logout = () => {\n            req.session.user = null;\n        }\n        next();\n    });\n\n    Routes(app);\n\n    app.get('/', function (req: Request, res: Response) {\n        res.render(\n            path.resolve(__dirname, '../../dist/public/index.html'),\n            { csrfToken: req.csrfToken() }\n        );\n    });\n    // Serve static files from dist/public\n    app.use(express.static(path.resolve(__dirname, '../../dist/public/')));\n    // Display index.html if unknown path, and let React-Router handle the 404\n    app.get('*', function (req: Request, res: Response) {\n        res.render(\n            path.resolve(__dirname, '../../dist/public/index.html'),\n            {csrfToken: req.csrfToken()}    \n        );\n    });\n\n    const server: http.Server = http.createServer(app);\n    websocket(server, db, sessionMiddleware);\n    server.listen(port, () => {\n        console.log(`Listening on port ${port}!`);\n    });\n});\n\nexport default app;","module.exports = require(\"http\");","module.exports = require(\"express\");","module.exports = require(\"express-session\");","module.exports = require(\"body-parser\");","module.exports = require(\"csurf\");","module.exports = require(\"helmet\");","module.exports = require(\"connect-mongo\");","module.exports = require(\"mustache-express\");","import ApiRoutes from './api/index';\nimport WidgetRoutes from './widget';\nimport { App } from '../../types/express';\n\nexport default function(app: App) {\n    WidgetRoutes(app);\n    ApiRoutes(app);\n}","const bcrypt = require('bcryptjs');\n\nimport { Collection } from 'mongodb';\nimport * as validator from 'validator';\nimport UserRoutes from './users';\nimport MessageRoutes from './messages';\nimport ChannelRoutes from './channels';\nimport {generate as shortid} from 'shortid';\n\nimport { App, Request, Response } from '../../../types/express';\n\nexport default function(app: App) {\n    app.use(function(req: Request, res: Response, next: Function) {\n        res.set('new-csrf-token', req.csrfToken());\n        return next();\n    });\n    UserRoutes(app);\n    MessageRoutes(app);\n    ChannelRoutes(app);\n    app.post('/api/v1/login', (req: Request, res: Response) => {\n        if (validator.isEmpty(req.body.email) || validator.isEmpty(req.body.password)) {\n            return res.status(400).json({ error: 'Please supply an email and password' });\n        }\n        if (!validator.isEmail(req.body.email)) {\n            return res.status(400).json({error: 'Not a valid email address'});\n        }\n        req.authenticate(req.body.email, req.body.password, (user: any | boolean) => {\n            if (!user)\n                return res.status(401).json({error: 'Invalid email or password'});\n            return res.json({\n                success: true,\n                email: req.session.user.email,\n                role: req.session.user.role,\n                name: req.session.user.name\n            });\n        })\n    });\n    app.post('/api/v1/register', function(req: Request, res: Response) {\n        if (validator.isEmpty(req.body.email) || validator.isEmpty(req.body.password)) {\n            return res.status(400).json({ error: 'Please supply an email and password' });\n        }\n        if (!validator.isEmail(req.body.email)) {\n            return res.status(400).json({ error: 'Not a valid email address' });\n        }\n        let passwordHash = bcrypt.hashSync(req.body.password);\n        let users: Collection = req.db.collection('users');\n\n        users.findOne({email: req.body.email}).then((user: any) => {\n            if (user !== null) {\n                return res.status(401).json({error: 'Email address already in use'});\n            }\n            // If no users exist, the created user should be an admin (role: 'admin'), and\n            // a widget document created.\n            users.countDocuments().then((count) => {\n                let role: string = 'user';\n                if (count === 0) {\n                    role = 'admin';\n                    let widgets: Collection = req.db.collection('widgets');\n                    // don't need to check short id since this should be the first widget created\n                    widgets.insertOne({\n                        shortId: shortid(),\n                        domain: 'http://localhost:4000',\n                    });\n                }\n                users.insertOne({\n                    email: req.body.email,\n                    password: passwordHash,\n                    emailVerified: false,\n                    role: role\n                }, (err) => {\n                    return res.json({ success: true });\n                });\n            })\n\n            \n        });\n    });\n    app.post('/api/v1/verifyEmail', function(req: Request, res: Response) {\n        if (validator.isEmpty(req.body.key)) {\n            return res.status(400).json({ error: 'Invalid request, no key supplied' });\n        }\n        let users: Collection = req.db.collection('users');\n        //console.log(req.body.key, typeof req.body.key);\n        users.findOneAndUpdate({ verifyKey: req.body.key }, { $set: {emailVerified: true, verifyKey: null}}, (err, result) => {\n            if (err || !result) {\n                console.log(err, result);\n                return res.status(400).json({error: 'Invalid key'});\n            }\n            return res.status(200).json({success: true});\n        });\n    });\n    app.get('/api/v1/logout', function(req: Request, res: Response) {\n        req.logout();\n        return res.json({success: true, message: 'logged out'});\n    });\n}","import { Collection, MongoError } from 'mongodb';\nimport * as bcrypt from 'bcryptjs';\nimport * as validator from 'validator';\n\nimport authorizedMiddleware from '../../middleware/authorized';\nimport adminMiddleware from '../../middleware/admin';\nimport { App, Request, Response } from '../../../types/express';\n\nexport default function(app: App) {\n    app.get('/api/v1/user*', authorizedMiddleware);\n    app.get('/api/v1/user', function(req: Request, res: Response) {\n        res.send(req.session.user);\n    });\n    app.get('/api/v1/users', (req: Request, res: Response) => {\n        let usersColl: Collection = req.db.collection('users');\n        let users: any[] = [];\n        usersColl.find({}).forEach((userDoc) => {\n            users.push({\n                name: userDoc.name || '',\n                email: userDoc.email,\n                role: userDoc.role\n            })\n        }, (err: MongoError) => {\n            if (err) {\n                console.log(err)\n                return res.status(500).json({error: 'Something went wrong retrieving users'});\n            }\n            return res.status(200).json({success: true, users: users});\n        });\n    });\n    app.get('/api/v1/user/:user', function (req: Request, res: Response) {\n        req.db.collection('users').findOne({email: req.params.user},\n            (err: any, user: any) => {\n                if (err)\n                    return res.status(400).json({error: err});\n                return res.json({user: {\n                    email: user.email,\n                    _id: user['_id'],\n                    name: '',\n\n                }})\n            });\n    });\n    app.post('/api/v1/user/update/email', function (req: Request, res: Response) {\n        if (!validator.isEmail(req.body.email))\n            return res.status(400).json({error: 'Not a valid email'});\n        let users: Collection = req.db.collection('users');\n        return users.countDocuments({email: req.body.email}, (err: MongoError, count: number) => {\n            if(err) {\n                console.log(err);\n                return res.status(500).json({error: 'Something went wrong counting users with email ' + req.body.email});\n            }\n            if (count !== 0)\n                return res.status(400).json({error: 'Email address already in use'});\n            users.updateOne({ email: req.session.user.email }, { $set: { email: req.body.email } }, (err, user) => {\n                if (err || !user) {\n                    console.log(err, user);\n                    return res.status(500).json({ error: 'Something went wrong trying to update user\\'s email' });\n                }\n                // session info generally only gets populated on login, so we need to modify it here (and for other user updates)\n                req.session.user.email = req.body.email;\n                return res.status(200).json({ success: true });\n            });\n        })\n    });\n    app.post('/api/v1/user/update/name', function (req: Request, res: Response) {\n        let users: Collection = req.db.collection('users');\n        users.updateOne({email: req.session.user.email}, {$set: {name: req.body.name}}, (err, user) => {\n            if(err || !user) {\n                console.log(err, user);\n                return res.status(500).json({error: 'Something went wrong trying to update user\\'s name'});\n            }\n            req.session.user.name = req.body.name;\n            return res.status(200).json({success: true});\n        });\n    });\n    app.post('/api/v1/user/update/password', function (req: Request, res: Response) {\n        let users: Collection = req.db.collection('users');\n        if (validator.isEmpty(req.body.newPass) || validator.isEmpty(req.body.oldPass))\n            return res.status(400).json({error: 'Must supply the current and new password'});\n        return users.findOne({email: req.session.user.email}, (err: MongoError, user) => {\n            if (err || !user) {\n                console.log(err);\n                return res.status(500).json({error: 'Something went wrong trying to retrieve the logged in user'});\n            }\n            if (!bcrypt.compareSync(req.body.oldPass, user.password))\n                return res.status(400).json({error: 'Invalid password'});\n            users.updateOne({email: req.session.user.email}, {$set: {password: bcrypt.hashSync(req.body.newPass) }}, (err, user) => {\n                if (err) {\n                    console.log(err);\n                    return res.status(500).json({ error: 'Something went wrong trying to update the logged in user\\'s password' });\n                }\n                return res.status(200).json({success: true});\n            })\n        });\n    });\n    app.post('/api/v1/user/reset_password', function (req: Request, res: Response) {\n\n    });\n    app.post('/api/v1/user/resend_email_verification')\n}","import authorizedMiddleware from '../../middleware/authorized';\nimport {ObjectID, Collection, MongoError} from 'mongodb'; \nimport { App, Request, Response } from '../../../types/express';\n\nexport default function (app: App) {\n    app.get('/api/v1/messages?', authorizedMiddleware);\n    app.get('/api/v1/messages/:channel/:offset', function (req: Request, res: Response) {\n        let messages: Collection = req.db.collection('messages');\n        messages.find(\n            {channel: req.params.channel},\n            {skip: parseInt(req.params.offset), sort: [['_id', -1]], limit: 20})\n            .toArray((err: any, messages: any) => {\n                if (!messages)\n                    return res.status(400).json({json: err});\n                messages.toArray((err: MongoError, msgArray: any[]) => {\n                    return res.json({ messages: msgArray.map((m) => {\n                            let objID: ObjectID = new ObjectID(m['_id']);\n                            m.created = objID.getTimestamp();\n                            return m;\n                        }).reverse()\n                    });\n                });\n        });\n    });\n}","import authorizedMiddleware from '../../middleware/authorized';\nimport adminMiddleware from '../../middleware/admin';\nimport { Collection } from 'mongodb';\nimport * as validator from 'validator';\nimport { App, Request, Response } from '../../../types/express';\n\nexport default function (app: App) {\n    app.get('/api/v1/channel*', authorizedMiddleware);\n    app.get('/api/v1/channels', function (req: Request, res: Response) {\n        req.db.collection('channels', (e: Error, coll: Collection) => {\n            let p = new Promise((resolve) => {\n                coll.find({}).count((e, count: number) => {\n                    if (count === 0) {\n                        coll.insertMany(\n                            [{ name: 'general' }, { name: 'random' }],\n                            () => resolve());\n                    } else {\n                        resolve();\n                    }\n                })\n            });\n            p.then(() => {\n                coll.find({}).toArray((err: Error, arr: any) => {\n                    res.json({ channels: arr });\n                });\n            })\n        });\n    });\n    app.get('/api/v1/channel/delete/:channel', adminMiddleware, function (req: Request, res: Response) {\n        if (validator.isEmpty(req.params.channel)) {\n            return res.status(400).json({error: 'Invalid channel name'});\n        }\n        return req.db.collection('channels', (e: Error, coll: Collection) => {\n            let p = new Promise((resolve, reject) => {\n                coll.find({name: req.params.channel}).count((e, count: number) => {\n                    // make sure we only try to delete the record if one match was found\n                    if (count === 1) {\n                        return resolve();\n                    }\n                    return reject();\n                });\n            });\n            p.then(() => {\n                coll.deleteOne({name: req.params.channel}).then(() => {\n                    return res.json({success: true});\n                });\n            }).catch(() => {\n                return res.status(400).json({error: 'Returned channels count not equal to 1'});\n            })\n            return p;\n        });\n    });\n    app.post('/api/v1/channel/create', adminMiddleware, function (req: Request, res: Response) {\n        if (validator.isEmpty(req.body.channelName)) {\n            return res.status(400).json({ error: 'Invalid channel name' });\n        }\n        return req.db.collection('channels', (e: Error, coll: Collection) => {\n            let p = new Promise((resolve, reject) => {\n                coll.countDocuments({name: req.body.channelName}, (err, count) => {\n                    if (count!==0) {\n                        return reject();\n                    }\n                    return resolve();\n                });\n            });\n            return p.then(() => {\n                return coll.insertOne({name: req.body.channelName}).then(() => {\n                    return res.json({success: true});\n                });\n            }).catch(() => {\n                return res.status(400).json({error: 'Channel already exists'});\n            })\n        });\n    });\n}","export default function(req: any, res: any, next: Function) {\n    if (req.session.user && req.session.user.role === 'admin') {\n        return next();\n    }\n    return res.status(401).json({ error: 'Not authorized as admin' });\n}","module.exports = require(\"shortid\");","import * as path from 'path';\nexport default function(app: any) {\n    app.get('/widget', function(req: any, res: any) {\n        res.render(\n            path.resolve(__dirname, '../../../dist/public/widget/index.html')\n        );\n    });\n    app.get('/widget/demo', function(req: any, res: any) {\n        res.render(\n            path.resolve(__dirname, '../../../dist/public/widget/demo.html')\n        );\n    });\n}","import * as socketio from 'socket.io';\nimport { Db, ObjectID } from 'mongodb';\nimport { Server } from 'http';\n\ninterface Socket extends socketio.Socket {\n    request: {\n        session: {\n            user: {\n                email: string\n            }\n        }\n    }\n} \n\nconst init = (server: Server, db: Db, sessionMiddleware: any) => {\n    const io = socketio(server);\n    let connectedUserEmails: string[] = [];\n\n    // https://stackoverflow.com/questions/25532692/how-to-share-sessions-with-socket-io-1-x-and-express-4-x/25618636#25618636\n    io.use((socket, next) => {\n        sessionMiddleware(socket.request, socket.request.res, next);\n    });\n    // Make sure email is set on the session\n    io.use((socket, next) => {\n        if (socket.request.session.user.email) return next();\n        next(new Error('Authentication error'));\n    });\n    io.on('connection', (socket: Socket) => {\n        connectedUserEmails.push(socket.request.session.user.email);\n        console.log('Connected users', connectedUserEmails);\n        io.emit('connected users', connectedUserEmails.filter((value, index, self) => {\n            return self.indexOf(value) === index;\n        }));\n\n        socket.on('disconnect', () => {\n            connectedUserEmails.splice(connectedUserEmails.indexOf(socket.request.session.user.email), 1);\n            io.emit('connected users', connectedUserEmails.filter((value, index, self) => {\n                return self.indexOf(value) === index;\n            }));\n        });\n\n        socket.on('message', (message: { text: string, channel: string }) => {\n            console.log(message);\n            db.collection('messages').insertOne(\n                {channel: message.channel, text: message.text, userEmail: socket.request.session.user.email },\n                (err, r) =>{\n                    if (!err) {\n                        io.emit('message', {\n                            _id: r.insertedId,\n                            userEmail: socket.request.session.user.email,\n                            text: message.text,\n                            channel: message.channel,\n                            created: (new ObjectID(r.insertedId)).getTimestamp() });\n                        return socket.emit('message received');\n                    }\n                        \n                    return console.error(err);\n                });\n        });\n    });\n}\n\nexport default init;","module.exports = require(\"socket.io\");","module.exports = {\n    // https://docs.mongodb.com/manual/reference/connection-string/\n    mongodbConnectionUri: process.env.MONGODB_URI,\n    mailgunApiKey: process.env.MAILGUN_API_KEY,\n    mailgunDomain: process.env.MAILGUN_DOMAIN,\n    baseUrl: process.env.BASE_URL ? process.env.BASE_URL : 'http://localhost:5000'\n}\n"],"sourceRoot":""}